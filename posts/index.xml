<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Today I Learned</title>
        <link>https://haleyjung.github.io/posts/</link>
        <description>Recent content in Posts on Today I Learned</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Wed, 01 Dec 2021 21:45:06 -0500</lastBuildDate>
        <atom:link href="https://haleyjung.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Naming Convention</title>
            <link>https://haleyjung.github.io/posts/2021/12/naming-convention/</link>
            <pubDate>Wed, 01 Dec 2021 21:45:06 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/12/naming-convention/</guid>
            <description>Types of identifier naming convention in computer programming  hungarian case camel case pascal case snake_case  Hungarian notation Hungarian notation, nowadays known as Apps Hungarian, was invented by Charles Simonyi, a Hungarian-American software architect. It was widely implemented at Microsoft when Simonyi was leading the applications group to build the first versions of Microsoft Office.
This naming convention adds a prefix to the identifier name, which indicates the type of the identifier.</description>
            <content type="html"><![CDATA[<h2 id="types-of-identifier-naming-convention-in-computer-programming">Types of identifier naming convention in computer programming</h2>
<ul>
<li>hungarian case</li>
<li>camel case</li>
<li>pascal case</li>
<li>snake_case</li>
</ul>
<h2 id="hungarian-notation">Hungarian notation</h2>
<p>Hungarian notation, nowadays known as Apps Hungarian, was invented by Charles Simonyi, a Hungarian-American software architect. It was widely implemented at Microsoft when Simonyi was leading the applications group to build the first versions of Microsoft Office.</p>
<p>This naming convention adds a prefix to the identifier name, which indicates the type of the identifier.</p>
<pre tabindex="0"><code>public class HungarianVariation {
	private int intNum; 	     	// int variable; intNum or iNum
	private String strName;    	// string variable; strName or sName
	private boolean booNext;	// boolean variable; boolNext or bNext
}
</code></pre><p><strong>Resources</strong>
co.uk/rautenbach/students/ancillary_content/hungarian_notation.pdf</p>
<h2 id="camel-case">camel case</h2>
<p>Camel case capitalizes the first letter of each word, except for the first word.</p>
<pre tabindex="0"><code>public class camelVariation {
	private int myNumber; 	// int variable
	private String myName;	// string variable
	private int isNext; 		// boolean variable
}
</code></pre><h2 id="pascal-case">pascal case</h2>
<p>Pascal case is similar to camel case. The difference is that pascal case capitalizes the first letter of the first word as well. This is often used for naming classes or methods.</p>
<pre tabindex="0"><code>public class pascalVariation {
	private int MyNumber; 	// int variable
	private String MyName;	// string variable
	private int IsNext; 		// boolean variable
}
</code></pre><h2 id="snake_case">snake_case</h2>
<p>Snake case uses underscore in between each word.</p>
<pre tabindex="0"><code>public class snakelVariation {
	private int my_number; 	// int variable
	private String my_name;	// string variable
	private int is_next; 		// boolean variable
}
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Recommendation Engine: Netflix&#39;s Recommendation Algorithms</title>
            <link>https://haleyjung.github.io/posts/2021/11/recommendation-engine-netflixs-recommendation-algorithms/</link>
            <pubDate>Fri, 26 Nov 2021 14:06:25 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/11/recommendation-engine-netflixs-recommendation-algorithms/</guid>
            <description>Netflix&amp;rsquo;s Recommendation Algorithms Overview  Recommendation algorithms are at the core of the Netflix product. They provide our members with personalized suggestions to reduce the amount of time and frustration to find something great content to watch. Because of the importance of our recommendations, we continually seek to improve them by advancing the state-of-the-art in the field. We do this by using the data about what content our members watch and enjoy along with how they interact with our service to get better at figuring out what the next great movie or TV show for them will be.</description>
            <content type="html"><![CDATA[<h2 id="netflixs-recommendation-algorithms">Netflix&rsquo;s Recommendation Algorithms</h2>
<h3 id="overview">Overview</h3>
<blockquote>
<p>Recommendation algorithms are at the core of the Netflix product. They provide our members with personalized suggestions to reduce the amount of time and frustration to find something great content to watch. Because of the importance of our recommendations, we continually seek to improve them by advancing the state-of-the-art in the field. We do this by using the data about what content our members watch and enjoy along with how they interact with our service to get better at figuring out what the next great movie or TV show for them will be. We go beyond validating our ideas on historical data to understand how people actually respond to changes in our recommendation system by running online A/B tests and measuring long-term satisfaction metrics. These experiments also provide us with new insights to further improve our research and product. This cycle of experimentation has led us to move beyond rating prediction, made famous by the Netflix prize, and into personalized ranking, page generation, search, image selection, messaging, and much more.</p>
</blockquote>
<h3 id="human-approach">Human Approach</h3>
<blockquote>
<p>Dealing with human tastes and preferences is an extremely challenging problem. In many cases a member may come to our site not knowing exactly what they’re in the mood for. Each person is nuanced in what brings them joy and how that varies based on what context they are in. Plus, people change over time, so we need to help anticipate or enable those changes. We also need to supplement our algorithmic approaches with insights we gain from consumer research and curated metadata to incorporate more of a human element in our systems.</p>
</blockquote>
<h2 id="personalization">Personalization</h2>
<p>Netflix puts great emphasis on personalization to help its users find content to watch and enjoy to maximize user satisfaction and retention.</p>
<h3 id="what-does-netflix-personalize">What does Netflix personalize?</h3>
<ul>
<li>Ordering of vidoes in each row</li>
<li>Selection and placement of rows</li>
<li>Search query and result recommendation</li>
<li>Frame recommendation for artists</li>
<li>Personalized artwork selection</li>
<li>Marketing message personalization</li>
</ul>
<h3 id="challenges-of-personalization">Challenges of Personalization</h3>
<ul>
<li>Each user has a vairety of interests, and sometimes profiles are shared</li>
<li>Help users find what they want when they are not sure what they want</li>
<li>Large datasets but small data per user,</li>
<li>Cold-start problems</li>
<li>Non-stationary, context-dependent, mood-dependent, etc.</li>
<li>More than just accuracy: Diversity, novelty, freshness, fairness, and more.</li>
</ul>
<h3 id="approaches">Approaches</h3>
<ul>
<li>Casuality
<ul>
<li>Correaltion to Causation</li>
</ul>
</li>
<li>Bandits</li>
<li>Reinforcement Learning</li>
<li>Objectives</li>
<li>Fairness</li>
<li>Experience Personalization</li>
</ul>
<h2 id="evidence-selection-algorithm">Evidence Selection Algorithm</h2>
<p>(ACM, 13:5, 2.7) Netflix uses recommender system on most screens beyond the homepage. To help users determine if a video is right for them, Neflix uses several algorithms. One of them is <em>evidence selection</em> algorithm. Netflix defines evidence as all the information it shows on the page, including the predicted star rating, the synopsis, facts displayed about the video, such as awards, casts, and other metadata, and images used to support the recommendations in the rows and elsewhere in the UI. Evidence selection algorithms evaluate all the possible evidence items that we can display for every recommendation, to select the few that we think will be most helpful to the member viewing the recommendation. For example, evidence algorithms decide whether to show that a certain movie won an Oscar or instead show the member that the movie is similar to another video recently watched by that member; they also decide which image out of several versions use to best support a given recommendation.</p>
<h2 id="references">References</h2>
<p>&ldquo;The Netflix Recommender System: Algorithms, Business Value, and Innovation&rdquo;, ACM Transactions on Management Information Systems, Vol. 6, No. 4, Article 13, December 2015.</p>
<p>&ldquo;Recommendations: Figuring out how to bring unique joy to each member,&rdquo; Research Areas, Netflix Research, research.netflix.com, accessed Nov 25, 2021.</p>
]]></content>
        </item>
        
        <item>
            <title>Recommendation Engine: Measurements and Challenges</title>
            <link>https://haleyjung.github.io/posts/2021/11/recommendation-engine-measurements-and-challenges/</link>
            <pubDate>Fri, 26 Nov 2021 13:38:29 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/11/recommendation-engine-measurements-and-challenges/</guid>
            <description>In this post, I&amp;rsquo;ll dive further into the measurements and challenges of a recommendation engine. This post uses references from:
F.O. Isinkaye et al., &amp;ldquo;Recommendation systems: Principles, methods and evaluation,&amp;rdquo; Egyptian Informatics Journal, Cairo University, 13 March 2015.
&amp;ldquo;The Netflix Recommender System: Algorithms, Business Value, and Innovation&amp;rdquo;, ACM Transactions on Management Information Systems, Vol. 6, No. 4, Article 13, December 2015.
To note, I&amp;rsquo;ll be continuously adding more of the latest articles as references.</description>
            <content type="html"><![CDATA[<p>In this post, I&rsquo;ll dive further into the measurements and challenges of a recommendation engine. This post uses references from:</p>
<p>F.O. Isinkaye et al., &ldquo;Recommendation systems: Principles, methods and evaluation,&rdquo; Egyptian Informatics Journal, Cairo University, 13 March 2015.</p>
<p>&ldquo;The Netflix Recommender System: Algorithms, Business Value, and Innovation&rdquo;, ACM Transactions on Management Information Systems, Vol. 6, No. 4, Article 13, December 2015.</p>
<p>To note, I&rsquo;ll be continuously adding more of the latest articles as references.</p>
<h2 id="challenges">Challenges</h2>
<h3 id="1-sparsity-of-data">1. Sparsity of data</h3>
<p>This is the problem that occurs as a result of lack of enough information: for instance, when only a few of the total number of items available in a database are rated by users. This always leads to a sparse user-item matrix, inability to locate successful neighbors and finally, the generation of weak recommendations. Also, data sparsity always leads to coverage problems, which is the percentage of items in the system that recommendations can be made for. (Isinkaye, 4.2.3.2. Data sparsity problem, pg. 267 - 268)</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h3 id="2-imperfect-labeling">2. Imperfect labeling</h3>
<p>Synonymy is the tendency of very similar items to have different names or entries. Most recommender systems find it difficult to make distinction between closely related items such as the difference between e.g. baby wear and baby cloth. Collaborative Filtering system usually find no match between the two terms to be able to compute their similarity. Different methods, such as automatic term expansion, the construction of a thesaurus, and Singular Value Decomposition (SVD), especially Latent Semantic Indexing are capable of solving the synonymy problem. The shortcoming of these methods is that some added terms may have differnt meanings from what is intended, which sometimes leads to rapid degradation of recommendation performance. (Isinkaye, 4.2.3.4. Synonymy, pg. 268)</p>
<h3 id="3-scalability-of-products-and-clients">3. Scalability of products and clients</h3>
<p>This is another problem associated with recommendation algorithms because computation normally grows linearly with the number of users and items. A recommendation technique that is efficient when the number of dataset is limited may be unable to generate satisfactory number of recommendations when the volume of dataset is increased. Thus, it is crucial to apply recommendation techniques which are capable of scaling up in a successful manner as the number of dataset in a database increases. Methods used for solving scalability problem and speeding up recommendation generation are based on Dimensionality reduction techniques, such as Singular Value Decomposition (SVD) method, which has the ability to produce reliable and efficient recommendations. (Isinkaye, 4.2.3.3. Scalability, pg. 268)</p>
<p>&ldquo;The <em>page generation</em> algorithm uses the output of all the algorithms already described to construct every single page of recommendations, taking into account the relevance of each row to the member as well as the diversity of the page. A typical member has tens of thousands of rows that could go on one&rsquo;s homepage, making it challenging to manage the computations required to evaluate them. For this reason, before 2015, we used a rule-based approach that would define what type of row (e.g. genre row, BYW row, Popular row) would go in each vertical position of the page. This page layout was used to construct all homepages for all members. Today, we have a fully personalized and mathematical algorithm that can select and order rows from a large pool of candidates to create an ordering optimized for relevance and diversity. Our current algorithm does not use a template, thus is freer to optimize the experience, for example, choosing not to have any BYW row for a given homepage and devoting half of the page to BYW rows for another homepage. A recent blogpost [Alvino and Basilico 2015] on this algorithm discusses it in more detail.&rdquo; (13:5, 2.6 Page Generation: Row Selection and Ranking)</p>
<h2 id="success-measurements">Success Measurements</h2>
<p>The quality of a recommendation algorithm can be evaluated using different types of measurement which can be accuracy or coverage. The type of metrics used depends on the type of filtering technique.</p>
<h3 id="1-accuracy">1. Accuracy</h3>
<p>The fraction of correct recommendation out of the total possible recommendations.</p>
<p>Metrics for measuring the accuracy of recommendation filtering systems are divided into <strong>statistical</strong> and <strong>decision suport</strong> accuracy metrics. The suitability of each metric depends on the features of the dataset and the type of tasks that the recommender system will do.</p>
<h4 id="statistical-accuracy-metrics">Statistical accuracy metrics</h4>
<p>Statistical accuracy metrics evaluate the accuracy of a filtering technique by comparing the predicted ratings directly with the actual user rating. Mean Absolute Error (MAE), Root Mean Square Error (RMSE) and Correlation are usually used as statistical accuracy metrics.</p>
<p><strong>Mean Absolute Error (MAE)</strong></p>
<p>MAE is the most popular and commonly used; it is a measure of deviation of recommendation from user&rsquo;s specific value. The lower the MAE, the more accurately the recommendation engine predicts user ratings. It can be computed like the following:</p>
<blockquote>
<p>MAE = (1/N) * Σ_u,i|p_u,i – r_u,i|</p>
</blockquote>
<p>where:</p>
<p>Σ: A Greek symbol that means “sum”</p>
<p>p_u,i: The predicted rating for user &lsquo;u&rsquo; on item &lsquo;i&rsquo;</p>
<p>r_u,i: The actual rating</p>
<p>N: The total number of ratings on the item set</p>
<p><strong>Root Mean Square Error (RMSE)</strong></p>
<p>RMSE puts more emphasis on larger absolute error. The lower the RMSE is, the better the recommendation accuracy.</p>
<blockquote>
<p>RMSE = sqrt((1/n) * (Σ_u,i * (p_u,i – r_u,i)^2))</p>
</blockquote>
<h4 id="decision-support-accuracy-metrics">Decision support accuracy metrics</h4>
<p>Commonly used ones are Reversal rate, Weighted errors, Receiver Operating Characteristics (ROC) and Precision Recall Curve (PRC), Preciison, Recall and <em>F</em>-measure.</p>
<p>These metrics help users in selecting items that are of very high quality out of the available set of items. The metrics veiw prediction procedure as a binary operation which distinguishes good items from those items that are not good.</p>
<p><strong>Receiver Operating Characteristics (ROC)</strong></p>
<p>ROC curves are very successful when performing comprehensive assessments of the performance of some specific algorithms.</p>
<p><strong>Precision &amp; Recall</strong></p>
<p>Precision is the fraction of recommended items that is actually relevant to the user, which recall can be defined as the fraction of relevant items that are also part of the set of recommended items. They are computed as:</p>
<p>Precision = Correctly recommended items / Total recommended items</p>
<p>Recall = Correctly recommended items / Total useful recommended items</p>
<p><strong><em>F</em>-measure</strong></p>
<p><em>F</em>-measure defined below helps to simplify precision and recall into a single metric. The resulting value makes comparision between algorithms and across data sets very simple and straightforward.</p>
<p><em>F</em>-measure = 2PR/(P+R)</p>
<h3 id="2-coverage">2. Coverage</h3>
<p>This has to do with the fraction of items and users that a recommender system can provide predictions. Prediction may be practically impossible to make if no users or few users rated an item. Coverage can be reduced by defining small neighborhood sizes for user or items.</p>
<h2 id="self-sustaining-environment">Self-Sustaining Environment</h2>
<p>This leads to the critical question of &ldquo;How can we create a self-sustaining and ever-improving environment for the recommendation engine?&rdquo; More on this soon!</p>
<p> </p>
]]></content>
        </item>
        
        <item>
            <title>Recommendation Engine: The Introduction</title>
            <link>https://haleyjung.github.io/posts/2021/11/recommendation-engine-the-introduction/</link>
            <pubDate>Thu, 25 Nov 2021 16:56:37 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/11/recommendation-engine-the-introduction/</guid>
            <description>I&amp;rsquo;m at the airport right now, summarizing what I read on the plane about recommendation engine algorithm, as I wait for my next flight. Last night, I opened the Netflix app to download shows I will watch on the plane. I then saw a new feature in the &amp;lsquo;Downloads&amp;rsquo; section that will download a personalized selection of movies and shows for me so that there is always a show for me to watch with or without internet connection!</description>
            <content type="html"><![CDATA[<p>I&rsquo;m at the airport right now, summarizing what I read on the plane about recommendation engine algorithm, as I wait for my next flight. Last night, I opened the Netflix app to download shows I will watch on the plane. I then saw a new feature in the &lsquo;Downloads&rsquo; section that will download a personalized selection of movies and shows for me so that there is always a show <em>for me</em> to watch with or without internet connection! This felt like a whole new level of recommendation system that I needed to know. So unlike this feature&rsquo;s intention, I ended up downloading several articles and thesis on the topic of recommendation engine instead.</p>
<h2 id="what-is-it">What is it?</h2>
<p>Recommendation engine is a system that <em>recommends</em> products, services, or information to users based on analysis of user data.</p>
<p> </p>
<h3 id="types-of-user-data">Types of user data</h3>
<p>There are several types of data that can be used, such as user&rsquo;s history and behavior. They are often categorized as <strong>explicit interactions</strong> and <strong>implicit interactions</strong>.</p>
<ul>
<li>
<p><strong>Explicit interactions</strong> consist of past activity, ratings and reviews you wrote, information provided in your profile, such as gender, age, and investment objectives (for finance apps).</p>
</li>
<li>
<p><strong>Implicit interactions</strong> are the device you use for access, link click rates, location and dates.</p>
</li>
</ul>
<p> </p>
<h3 id="types-of-filtering-systems">Types of filtering systems</h3>
<p>The analysis can be based on a single user, or mutliple users, depending on the type of filtering system.</p>
<h4 id="1-content-based-filtering">1. Content-based filtering</h4>
<p>This filtering is based on a <em>single</em> user&rsquo;s past and current interactions and preferences. There are several limitations to this system due to privacy and regulatory issues, which is defined as <em>cold start problem</em>. If the user&rsquo;s information is insufficient, the recommendation accuracy will be significantly low.</p>
<p>A widely used form of content-based filtering is <strong>case-based recommendation</strong>, which evaluates similarities of an item a user has liked or purchased to recommend other &lsquo;similar&rsquo; products. This also has limitations, especially because the database of products that can be compared and recommended must exist within the specific domain, and the evaluation will very much depend on the accuracy and level of categorization, i.e. metadata or tags, across the platform.</p>
<h4 id="2-collaborative-filtering">2. Collaborative filtering</h4>
<p>Taking a step further from content-based filtering, collaborative filtering is able to develop a more accurate recommendation for a user by evaluating the data of multiple users who have similar purchasing history and/or behaviorial patterns. Yet this also has limitations of increased variability, less interpretable results, especially in the absence of previously collected data.</p>
<h4 id="3-knowledge-based-system">3. Knowledge-based system</h4>
<p>This system is based on domain expertise and knowledge to evaluate and meet users' needs. It has a set of defined rules that preset context for each recommendation. Unlike the previous two, this does not suffer the cold-start problem. It is therefore more expensive and suitable for companies with complex domains with infrequent purchasing rates.</p>
<h2 id="why-is-it-needed">Why is it needed?</h2>
<p>We are fed with an overwhelming amount of information on a daily basis. Recommendation engine helps us to navigate the sea of data in the digital world with greater efficiency. This is of course a very broad statement as there is a dual side to recommendation engine due to its invasiveness and also limitations. I&rsquo;ll explore this topic further later on, as the goal of this post is to cover the foundation of recommendation engine.</p>
<p>Going back to the increased efficiency, recommendation engine aims to provide a more personalized user experience and solution. For instance, you&rsquo;ve finished watching your favorite series and you still have time to kill. You start browsing an endless list of new series. Some of them seem interesting, but how do you know which one is <em>the</em> one? You&rsquo;ll probably lean towards choosing one from the list of &lsquo;Trending Now,&rsquo; &lsquo;Top 10 in the U.S.,&rsquo; or &lsquo;Shows You May Like&rsquo; - the recommendation engine. Then, you choose one, because though it didn&rsquo;t appeal to you initially, it&rsquo;s in every recommendation lists! You watch it to the end, and it&rsquo;s one of the best shows you&rsquo;ve seen in a while. This: increased user satisfaction. You&rsquo;ll most likely watch another show from the recommended lists later on, and if this cycle continues on, it leads to a high user retention rate. This lets us know that recommendation engine can also bring higher revenues for companies.</p>
<h2 id="upcoming-posts">Upcoming posts</h2>
<p>In the next posts, I plan to dive further into challenges, measurements and a case study on Netflix&rsquo;s recommendation engine.</p>
<p> </p>
]]></content>
        </item>
        
        <item>
            <title>Missing Contributions on Github</title>
            <link>https://haleyjung.github.io/posts/2021/11/missing-contributions-on-github/</link>
            <pubDate>Wed, 24 Nov 2021 00:03:33 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/11/missing-contributions-on-github/</guid>
            <description>Why are my contributions missing? After multiple commits on my GitHub for this static site, I noticed that the contributions were not lightening green on my profile. The GitHub page was successfully updated with the latest commit, so at first I thought it was a time lag. GitHub Docs also indicates that &amp;ldquo;you may need to wait for up to 24 hours to see the contribution appear on your contribution graph.</description>
            <content type="html"><![CDATA[<h2 id="why-are-my-contributions-missing">Why are my contributions missing?</h2>
<p>After multiple commits on my GitHub for this static site, I noticed that the contributions were not lightening green on my profile. The GitHub page was successfully updated with the latest commit, so at first I thought it was a time lag. <a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/managing-contribution-graphs-on-your-profile/why-are-my-contributions-not-showing-up-on-my-profile">GitHub Docs</a> also indicates that &ldquo;you may need to wait for up to 24 hours to see the contribution appear on your contribution graph.&rdquo; The issue remained the same after 24 hours, so I went ahead to check the following:</p>
<h3 id="1-is-your-local-git-commit-email--your-account">1. Is your local Git commit email === your account?</h3>
<p>To check the email address used for a commit, I opened the latest commit on my GitHub and added <strong>.patch</strong> to the end of the commit URL.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">https://github.com/haleyjung/haleyjung.github.io/commit/abcdefg.path
</code></pre></div><p>When the link opens, carefully check the first four lines of the page. It should have a format like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">From abcedfg Mon Sep 17 00:00:00 2001
From: Profile Name &lt;<span style="color:#f92672">email</span> <span style="color:#a6e22e">address</span>&gt;
Date: Tue, 23 Nov 2021 18:42:53 -0500
Subject: [PATCH] commit message
</code></pre></div><p>The email address in the &lsquo;From:&rsquo; field is the one that was used for the commit, which is what was set in the local git config settings. This was my issue! The email was set as a generic email address <a href="mailto:name@computer.local">name@computer.local</a>. Such email cannot be added to GitHub accounts, and when this is used for commits, the commits will not be linked to the GitHub profile and hence the contribution graph will not reflect them.</p>
<p>Now that I&rsquo;ve figured out what the issue is, it&rsquo;s time to configure my &lsquo;user.email&rsquo; in the command line.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#960050;background-color:#1e0010">$</span> git config <span style="color:#f92672">--</span>global user.email <span style="color:#e6db74">&#34;email@example.com&#34;</span>
</code></pre></div><p>Then to confirm that I have accurately set the email address in Git:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#960050;background-color:#1e0010">$</span> git config <span style="color:#f92672">--</span>global user.email
</code></pre></div><p>I can also check all the settings using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">git config <span style="color:#f92672">--</span>list <span style="color:#f92672">--</span>show<span style="color:#f92672">-</span>origin
</code></pre></div><p>Since the email address was the same as my GitHub account&rsquo;s email, I didn&rsquo;t have to add it to my account again. But if it&rsquo;s different, make sure to add it to the GitHub account, under Settings &gt; Emails.</p>
<p> </p>
<h3 id="2-to-which-branch-did-you-make-your-commit">2. To which branch did you make your commit?</h3>
<p>I was making commits to the default &lsquo;main&rsquo; branch, so this was not the problem.</p>
<p>To note, commits must be made in the <strong>default</strong> or <strong>gh-pages</strong> branch to be counted.</p>
<p>If I want to count the commits made in a non-default or non-gh-pages branch:</p>
<ul>
<li>Open a pull request to merge my changes into the default branch or the gh-pages branch</li>
<li>Change the default branch of the repository</li>
</ul>
<p>I should only do this if I want the new branch to become the base for all future pull requests and commits.</p>
<p> </p>
<h3 id="3-was-your-commit-made-in-a-fork">3. Was your commit made in a fork?</h3>
<p>This was not the case for me. However, these are the steps one should follow to make a fork count towards my contributions.</p>
<ul>
<li>Open a pull request to merge my changes into the parent repository</li>
<li>Contact GitHub Support to detach and turn the fork into a standalone repository.</li>
</ul>
<p>More about forks in another post!</p>
<p> </p>
]]></content>
        </item>
        
        <item>
            <title>Submodules</title>
            <link>https://haleyjung.github.io/posts/2021/11/submodules/</link>
            <pubDate>Tue, 23 Nov 2021 16:40:02 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/11/submodules/</guid>
            <description>What is a submodule? A git submodule is a record within a host git repository that points to a specific commit in another external repository. Submodules are very static and only track specific commits. Submodules do not track git refs or branches and are not automatically updated when the host repository is updated.
  It keeps a git repository as a subdirectory of another git repository.
  It serves as a reference to another repo at a particular snapshot of time.</description>
            <content type="html"><![CDATA[<h2 id="what-is-a-submodule">What is a submodule?</h2>
<p>A git submodule is a record within a host git repository that points to a specific commit in another external repository. Submodules are very static and only track specific commits. Submodules do not track git refs or branches and are not automatically updated when the host repository is updated.</p>
<ol>
<li>
<p>It keeps a git repository as a subdirectory of another git repository.</p>
</li>
<li>
<p>It serves as a reference to another repo at a particular snapshot of time.</p>
</li>
<li>
<p>It enables a git repo to incorporate and track version history of external code.</p>
</li>
</ol>
<p>A git submodule is a record within a host git repository that points to a specific commit in another external repository. Submodules are very static and only track specific commits. Submodules do not track git refs or branches and are not automatically updated when the host repository is updated. When adding a submodule to a repository a new .gitmodules file will be created. The .gitmodules file contains meta data about the mapping between the submodule project&rsquo;s URL and local directory. If the host repository has multiple submodules, the .gitmodules file will have an entry  for each submodule.</p>
<h2 id="when-should-i-use-submodules">When should I use submodules?</h2>
<p>If you need to maintain a strict version management over your external dependencies,  it can make sense to use git submodules. The following are a few best use cases for git submodules.</p>
<ul>
<li> When an external component or subproject is changing too fast or upcoming changes will break the API, you can lock the code to a specific commit for your own safety.</li>
<li> When you have a component that isn’t updated very often and you want to track it as a vendor dependency.</li>
<li> When you are delegating a piece of the project to a third party and you want to integrate their work at a specific time or release. Again this works when updates are not too frequent.</li>
</ul>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>Absolute vs Relative Path</title>
            <link>https://haleyjung.github.io/posts/2021/11/absolute-vs-relative-path/</link>
            <pubDate>Mon, 22 Nov 2021 11:00:33 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/11/absolute-vs-relative-path/</guid>
            <description>What is a path? A path is a string of characters that identify a specific location of a file or folder on computer. In another word, it represents the directory and file relationship in the operating system. The characters seperated with a slash in URLs represent a path. From this we can also grasp that a path is essential for constructing Uniform Resource Locators (URLs). A path is either absolute or relative.</description>
            <content type="html"><![CDATA[<h2 id="what-is-a-path">What is a path?</h2>
<p>A path is a string of characters that identify a specific location of a file or folder on computer. In another word, it represents the directory and file relationship in the operating system. The characters seperated with a slash in URLs represent a path. From this we can also grasp that a path is essential for constructing Uniform Resource Locators (URLs). A path is either <strong>absolute</strong> or <strong>relative</strong>.</p>
<h2 id="absolute-path">Absolute Path</h2>
<p>An absolute path, or full path, specifies the location of a file or folder regardless of the current working directory. It always contains the complete location, including the root directory. If you want to create a link to another website that belongs to an external domain, you would use an absolute URL.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&#39;/home/static/img/sample.img&#39;
</code></pre></div><h2 id="relative-path">Relative Path</h2>
<p>A relative path, or non-absolute path, refers to the location of a file or folder relative to the current working directory, or to the location of the current webpage. Instead of specifying the full path, it uses &lsquo;../&rsquo;, which refers to the parent folder of the current working file. It is often more efficient to use relative URLs than absolute URLs to reference links that are located on the same domain.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&#39;../img/sample.img&#39;
</code></pre></div><h2 id="representation-of-paths-by-operating-systems">Representation of paths by operating systems</h2>
<h3 id="unix-and-mac-os-paths">Unix and Mac OS Paths</h3>
<table>
<thead>
<tr>
<th>Delimiter</th>
<th>Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>/</td>
<td>Root directory &amp; directory separator; A path starting with / is an absolute path.</td>
</tr>
<tr>
<td>.</td>
<td>The current directory</td>
</tr>
<tr>
<td>..</td>
<td>The parent of the directory indicated by the preceding path</td>
</tr>
<tr>
<td>~</td>
<td>Home directory</td>
</tr>
</tbody>
</table>
<h3 id="microsoft-windows-powershell-path">Microsoft Windows (PowerShell) Path</h3>
<table>
<thead>
<tr>
<th>Delimiter</th>
<th>Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>[drive letter:]/ or [drive name:]\ or \[server name]\ or [PSSnapIn name][PSProvider name:][:PSDrive root]</td>
<td>Root directory</td>
</tr>
<tr>
<td>/ or \</td>
<td>Directory separator</td>
</tr>
<tr>
<td>.</td>
<td>The current directory</td>
</tr>
<tr>
<td>..</td>
<td>The parent of the directory indicated by the preceding path</td>
</tr>
<tr>
<td>~</td>
<td>Home directory</td>
</tr>
</tbody>
</table>
]]></content>
        </item>
        
        <item>
            <title>Hello World</title>
            <link>https://haleyjung.github.io/posts/2021/11/hello-world/</link>
            <pubDate>Mon, 22 Nov 2021 10:01:55 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/11/hello-world/</guid>
            <description>I can no longer remember how many times I&amp;rsquo;ve created this very same file due to various errors and deployment failures.
But, I love debugging! Coming from a field where subjectivity defines the output, I&amp;rsquo;m in love with coding that always has some form of solution.
With that, this shall be my first &amp;lsquo;final&amp;rsquo; post.</description>
            <content type="html"><![CDATA[<p>I can no longer remember how many times I&rsquo;ve created this very same file due to various errors and deployment failures.</p>
<p>But, I love debugging! Coming from a field where subjectivity defines the output, I&rsquo;m in love with coding that always has some form of solution.</p>
<p>With that, this shall be my first &lsquo;final&rsquo; post.</p>
]]></content>
        </item>
        
    </channel>
</rss>
