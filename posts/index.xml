<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Today I Learned</title>
        <link>https://haleyjung.github.io/posts/</link>
        <description>Recent content in Posts on Today I Learned</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 04 Feb 2022 00:31:44 -0500</lastBuildDate>
        <atom:link href="https://haleyjung.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Systems</title>
            <link>https://haleyjung.github.io/posts/2022/02/systems/</link>
            <pubDate>Fri, 04 Feb 2022 00:31:44 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/02/systems/</guid>
            <description>Webpage Rendering  HTML is received from the server and processed into the DOM. The styles are loaded and parsed into the CSSOM. The render tree is created using the DOM and CSSOM. The browser creates a layout for each render tree element with its individual coordinates using the flow method, which requires just one pass to layout all the elements, compared to the tables method that requires more than one pass.</description>
            <content type="html"><![CDATA[<h2 id="webpage-rendering">Webpage Rendering</h2>
<ol>
<li>HTML is received from the server and processed into the DOM.</li>
<li>The styles are loaded and parsed into the CSSOM.</li>
<li>The render tree is created using the DOM and CSSOM.</li>
<li>The browser creates a layout for each render tree element with its individual coordinates using the flow method, which requires just one pass to layout all the elements, compared to the tables method that requires more than one pass.</li>
<li>The information is displayed in the browser window in its final form through the last stage of the process, also known as painting.</li>
</ol>
<h3 id="repaint">Repaint</h3>
<p>Repaint is a technique that allows the browser to update the appearance of the elements of the webpage without changing the layout, such as the background color, outline of the element, or its visibility.</p>
<h3 id="reflow">Reflow</h3>
<p>Reflow takes place when the change to the webpage affects the layout of the page and the position of its elements. Reflow will recalculate the position of all the elements in the DOM, including the child and the parent components, even if the changes concern a single element. Reflow can be triggered by:</p>
<ul>
<li>manipulating the elements of the DOM</li>
<li>changes in the content (including the form field content)</li>
<li>changes in the CSS properties</li>
<li>adding or removing style sheets</li>
<li>changing the <code>class</code> attributes</li>
<li>resizing the browser window</li>
<li>scrolling</li>
<li>pseudo-class action such as <code>:hover</code></li>
</ul>
<h3 id="optimization">Optimization</h3>
<p>Both repaint and reflow slows down the performance of a webpage, especially <strong>reflow</strong>.</p>
<p>Method 1: <strong>Restricting the areas</strong> where repaint or reflow take place.
Method 2: <strong>Caching</strong> the changes while running JavaScript and applying the changes in a single pass after the code run has finished.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">$body</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;body&#39;</span>);
  <span style="color:#a6e22e">$body</span>.<span style="color:#a6e22e">css</span>(<span style="color:#e6db74">&#39;padding&#39;</span>, <span style="color:#e6db74">&#39;1px&#39;</span>); <span style="color:#75715e">// reflow, repaint
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">$body</span>.<span style="color:#a6e22e">css</span>(<span style="color:#e6db74">&#39;color&#39;</span>, <span style="color:#e6db74">&#39;red&#39;</span>); <span style="color:#75715e">// repaint
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">$body</span>.<span style="color:#a6e22e">css</span>(<span style="color:#e6db74">&#39;margin&#39;</span>, <span style="color:#e6db74">&#39;2px&#39;</span>); <span style="color:#75715e">// reflow, repaint
</span></code></pre></div><h2 id="same-origin-and-cors-cross-origin-resource-sharing">Same-origin and CORS (Cross-Origin Resource Sharing)</h2>
<p>The Cross-Origin Resource Sharing standard works by adding new <strong>HTTP headers</strong> that let servers describe which <strong>origins (domain, scheme, or port) are permitted</strong> to read that information <strong>from a web browser</strong>.</p>
<p>An example of a cross-origin request: the front-end JavaScript code served from <a href="https://domain-a.com">https://domain-a.com</a> uses <strong>XMLHttpRequest</strong> to make a request for <a href="https://domain-b.com/data.json">https://domain-b.com/data.json</a>.</p>
<p>CORS failures result in errors but for security reasons, specifics about the error are not available to JavaScript. All the code knows is that an error occurred. The only way to determine what specifically went wrong is to look at the browser&rsquo;s console for details.</p>
<p>Examples of access control scenarios include:</p>
<h3 id="1-simple-requests">1. Simple requests</h3>
<p>Some requests don&rsquo;t trigger a CORS preflight. A simple request is one that meets all the following conditions:</p>
<ul>
<li>One of the allowed methods: GET, HEAD, POST</li>
<li>Apart from the headers automatically set by the user agent, the only headers which are allowed to be manually set are those which the Fetch spec defines as a CORS-safelisted request-header, which are: Accept, Accept-Langauge, Content-Language, Content-Type.</li>
<li>The only type/subtype combinations allowed for the media type specified in the Content-Type header are: application/x-www-form-urlencoded, multipart/form-data, text/plain</li>
<li>If the request is made using an XMLHttpRequest object, no event listeners are registered on the object returned by the XMLHttpRequest.upload property used in the request; that is, given an XMLHttpRequest instance xhr, no code has called <code>xhr.upload.addEventListener()</code> to add an event listener to monitor the upload.</li>
<li>No ReadableStream object is used in the request.</li>
</ul>
<h3 id="2-preflighted-requests">2. Preflighted requests</h3>
<ul>
<li>The browser first sends an HTTP request using the OPTIONS method to the resource on the other origin, in order to determine if the actual request is safe to send.</li>
<li>Such cross-origin requests are preflighted since they may have implications for user data.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">xhr</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">XMLHttpRequest</span>();
<span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#39;POST&#39;</span>, <span style="color:#e6db74">&#39;https://bar.other/resources/post-here/&#39;</span>);
<span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">setRequestHeader</span>(<span style="color:#e6db74">&#39;X-PINGOTHER&#39;</span>, <span style="color:#e6db74">&#39;pingpong&#39;</span>);
<span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">setRequestHeader</span>(<span style="color:#e6db74">&#39;Content-Type&#39;</span>, <span style="color:#e6db74">&#39;application/xml&#39;</span>);
<span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">onreadystatechange</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">handler</span>;
<span style="color:#a6e22e">xhr</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#39;&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;&#39;</span>);
</code></pre></div><h3 id="3-requests-with-credentials">3. Requests with credentials</h3>
<ul>
<li>These are aware of HTTP cookies and HTTP Authentication information.</li>
<li>By default, in cross-origin XMLHttpRequest or Fetch invocations, browsers will not send credentials.</li>
<li>A specific flag has to be set on the XMLHttpRequest object or the Request constructor when it is invoked.</li>
</ul>
<h2 id="references">References</h2>
<p><a href="https://bestwebhostingaustralia.org/browserscope-org-joins-aussie-hosting/">&ldquo;Browser Scope Has Merged With Aussie Hosting&rdquo;, Aussie Hosting</a></p>
<p><a href="https://eloquentjavascript.net/14_dom.html">&ldquo;Chapter 14: The Document Object Model&rdquo;, Eloquent JavaScript</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">&ldquo;Cross-Origin Resource Sharing (CORS)&rdquo;, MDN Web Docs</a></p>
<p><a href="https://www.sitepoint.com/working-around-origin-policy/">Daityari, Shaumik. &ldquo;Working With and Around the Same-Origin Policy&rdquo;, sitepoint, February 28, 2014.</a></p>
<p><a href="https://www.breck-mckye.com/blog/2014/04/document-loading-and-DOM-lifecycle-events/">&ldquo;Document loading and DOM lifecycle events&rdquo;, Jimmy Breck-McKye, April 21, 2014.</a></p>
<p><a href="https://qarea.com/blog/webpage-rendering-how-it-works-tips-on-optimization">Frontend Dev, &ldquo;Webpage Rendering: How It Works + Tips on Optimization&rdquo;, Qarea, October 13, 2020.</a></p>
<p><a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/">Garsiel, Tali. Irish, Paul. &ldquo;How Browsers Work: Behind the scenes of modern web browsers&rdquo;, HTML5Rocks, August 5, 2011.</a></p>
<p><a href="http://blog.olamisan.com/max-parallel-http-connections-in-a-browser">&ldquo;Max parallel http connections in a browser?&rdquo;, Developer Blog, March 24, 2015.</a></p>
]]></content>
        </item>
        
        <item>
            <title>Client-Side Validation</title>
            <link>https://haleyjung.github.io/posts/2022/02/client-side-validation/</link>
            <pubDate>Thu, 03 Feb 2022 13:50:26 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/02/client-side-validation/</guid>
            <description>What is client-side validation? It refers to providing feedbacks to users so that they can give us the correct information.
e.g. &amp;ldquo;your password must be at least 8 characters&amp;rdquo; or &amp;ldquo;this field is required.&amp;rdquo;
HTML5 Form Validation Form validaiton is a large part of project-specific, dependent on business logic.
Input Types &amp;lt;form&amp;gt; &amp;lt;label&amp;gt;Name (required)&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Email (required)&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;email&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Age (required, must be older than 13)&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;age&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Number of siblings&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;siblings&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Number of rooms in your house&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;rooms&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Blog url&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;blog&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Twitter Username&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;twitter&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; HTML5 Constraint API HTML5 constraint validation API helps developers avoid use of JavaScript for simple validations.</description>
            <content type="html"><![CDATA[<h2 id="what-is-client-side-validation">What is client-side validation?</h2>
<p>It refers to providing feedbacks to users so that they can give us the correct information.</p>
<p>e.g. &ldquo;your password must be at least 8 characters&rdquo; or &ldquo;this field is required.&rdquo;</p>
<h2 id="html5-form-validation">HTML5 Form Validation</h2>
<p>Form validaiton is a large part of project-specific, dependent on <strong>business logic</strong>.</p>
<h3 id="input-types">Input Types</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">form</span>&gt;
    &lt;<span style="color:#f92672">label</span>&gt;Name (required)&lt;/<span style="color:#f92672">label</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;name&#34;</span>&gt;
    &lt;<span style="color:#f92672">label</span>&gt;Email (required)&lt;/<span style="color:#f92672">label</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;email&#34;</span>&gt;
    &lt;<span style="color:#f92672">label</span>&gt;Age (required, must be older than 13)&lt;/<span style="color:#f92672">label</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;age&#34;</span>&gt;

    &lt;<span style="color:#f92672">label</span>&gt;Number of siblings&lt;/<span style="color:#f92672">label</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;siblings&#34;</span>&gt;

    &lt;<span style="color:#f92672">label</span>&gt;Number of rooms in your house&lt;/<span style="color:#f92672">label</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rooms&#34;</span>&gt;

    &lt;<span style="color:#f92672">label</span>&gt;Blog url&lt;/<span style="color:#f92672">label</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;blog&#34;</span>&gt;

    &lt;<span style="color:#f92672">label</span>&gt;Twitter Username&lt;/<span style="color:#f92672">label</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;twitter&#34;</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span>&gt;
&lt;/<span style="color:#f92672">form</span>&gt;

</code></pre></div><h3 id="html5-constraint-api">HTML5 Constraint API</h3>
<p>HTML5 constraint validation API helps developers avoid use of JavaScript for simple validations.</p>
<p><strong>Validation based attributes</strong></p>
<ol>
<li>pattern</li>
</ol>
<p><code>&lt;input type=”text” pattern=”[1-4]{5}” /&gt;</code></p>
<ol start="2">
<li>required</li>
</ol>
<p><code>&lt;input type=”text” required /&gt;</code></p>
<ol start="3">
<li>maxlength</li>
</ol>
<p><code>&lt;input type=”text” maxlength=”20” /&gt;</code></p>
<ol start="4">
<li>
<p>min &amp; max</p>
</li>
<li>
<p>onchange</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">form</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ValidationForm&#34;</span>&gt;
	Password: &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;password&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;password1&#34;</span>/&gt;
	Confirm Password:&lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;password&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;password2&#34;</span>/&gt;
	&lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span>/&gt;
&lt;/<span style="color:#f92672">form</span>&gt;
</code></pre></div><p>&ldquo;Whenever a change event is fired, we need to check if both of the passwords match. If yes, we call setCustomValidity() on the input element (password field in this case) with an empty string as the argument. On the other hand, if we detect that the passwords don’t match in a change event we call setCustomValidity() with an error message as argument. It means the password field will be marked as invalid and the error message will be shown when the user submits the form.&rdquo;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/javascript&#34;</span><span style="color:#f92672">&gt;</span>
 window.<span style="color:#a6e22e">onload</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> () {
   document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;password1&#34;</span>).<span style="color:#a6e22e">onchange</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">validatePassword</span>;
   document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;password2&#34;</span>).<span style="color:#a6e22e">onchange</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">validatePassword</span>;
 }

 <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">validatePassword</span>(){
 <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pass2</span><span style="color:#f92672">=</span>document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;password2&#34;</span>).<span style="color:#a6e22e">value</span>;
 <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pass1</span><span style="color:#f92672">=</span>document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;password1&#34;</span>).<span style="color:#a6e22e">value</span>;
 <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">pass1</span><span style="color:#f92672">!=</span><span style="color:#a6e22e">pass2</span>)
   document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;password2&#34;</span>).<span style="color:#a6e22e">setCustomValidity</span>(<span style="color:#e6db74">&#34;Passwords Don&#39;t Match&#34;</span>);
 <span style="color:#66d9ef">else</span>
   document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;password2&#34;</span>).<span style="color:#a6e22e">setCustomValidity</span>(<span style="color:#e6db74">&#39;&#39;</span>);
 <span style="color:#75715e">//empty string means no validation error
</span><span style="color:#75715e"></span> }
<span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/script&gt;</span>
</code></pre></div><p><strong>A Sample Form</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">form</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;myForm&#34;</span>&gt;
  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;form-group&#34;</span>&gt;
    &lt;<span style="color:#f92672">label</span> <span style="color:#a6e22e">for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;email&#34;</span>&gt;
      Email&lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;required&#34;</span>&gt;*&lt;/<span style="color:#f92672">span</span>&gt;
    &lt;/<span style="color:#f92672">label</span>&gt;
    <span style="color:#75715e">&lt;!-- Email should be required and validate for a correct email. --&gt;</span>
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">required</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;required&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;form-control&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;email&#34;</span>&gt;
  &lt;/<span style="color:#f92672">div</span>&gt;

  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;form-group&#34;</span>&gt;
    &lt;<span style="color:#f92672">label</span> <span style="color:#a6e22e">for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;password&#34;</span>&gt;
      Password&lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;required&#34;</span>&gt;*&lt;/<span style="color:#f92672">span</span>&gt;
       &lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;info&#34;</span>&gt;(Minimum Length of 8 Characters)&lt;/<span style="color:#f92672">span</span>&gt;
    &lt;/<span style="color:#f92672">label</span>&gt;
    <span style="color:#75715e">&lt;!-- Password is required and must be at least 8 characters that are hidden when typed. --&gt;</span>
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">minlength</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;8&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;form-control&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;password&#34;</span>&gt;
  &lt;/<span style="color:#f92672">div</span>&gt;

  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;form-group&#34;</span>&gt;
    &lt;<span style="color:#f92672">label</span> <span style="color:#a6e22e">for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;website&#34;</span>&gt;My Website&lt;/<span style="color:#f92672">label</span>&gt;
    <span style="color:#75715e">&lt;!-- Website is optional but if it is there should be validated as a real URL. --&gt;</span>
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;url&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;form-control&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;website&#34;</span> <span style="color:#a6e22e">placeholder</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://...&#34;</span>&gt;
  &lt;/<span style="color:#f92672">div</span>&gt;

  &lt;<span style="color:#f92672">button</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;btn btn-primary&#34;</span>&gt;Submit&lt;/<span style="color:#f92672">button</span>&gt;

&lt;/<span style="color:#f92672">form</span>&gt;
</code></pre></div><h3 id="validating-against-a-regular-expression-regex">Validating against a regular expression (regex)</h3>
<p>Another useful validation feature is the <strong>pattern attribute</strong>, which expects a <strong>Regular Expression as its value</strong>. A regular expression <a href="https://regexr.com/">(regex)</a> is a pattern that can be used to match <strong>character combinations</strong> in text <strong>strings</strong>, so regexps are ideal for form validation and serve a variety of other uses in JavaScript.</p>
<p>In JavaScript, regular expressions are also objects. These patterns are used with the exec() and test() methods of RegExp, and with the match(), matchAll(), replace(), replaceAll(), search(), and split() methods of String.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">form</span>&gt;
  &lt;<span style="color:#f92672">label</span> <span style="color:#a6e22e">for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;choose&#34;</span>&gt;Would you prefer a banana or a cherry?&lt;/<span style="color:#f92672">label</span>&gt;
  &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;choose&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;i_like&#34;</span> <span style="color:#a6e22e">required</span> <span style="color:#a6e22e">pattern</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;[Bb]anana|[Cc]herry&#34;</span>&gt;
  &lt;<span style="color:#f92672">button</span>&gt;Submit&lt;/<span style="color:#f92672">button</span>&gt;
&lt;/<span style="color:#f92672">form</span>&gt;
</code></pre></div><p><strong>REMEMBER</strong>: <code>&lt;textarea&gt;</code> element does not support the <code>pattern</code> attribute.</p>
<h2 id="validating-with-javascript">Validating with JavaScript</h2>
<p><strong>Common Steps:</strong></p>
<ol>
<li>Select the value of the input(s) you&rsquo;re testing while the input(s) is being changed or on submit</li>
<li>Run some kind of check against it</li>
<li>If there&rsquo;s an error, surface it the user</li>
<li>If there&rsquo;s not an error, continue</li>
</ol>
<h3 id="using-vanilla-javascript-vs-jquery-to-access-form-inputs">Using Vanilla JavaScript vs jQuery to access form inputs</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// vanilla javascript
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">form</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#39;#some-form&#39;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">input</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#39;#some-input&#39;</span>);

document.<span style="color:#a6e22e">forms</span>; <span style="color:#75715e">// Get all forms on a page
</span><span style="color:#75715e"></span><span style="color:#a6e22e">form</span>.<span style="color:#a6e22e">elements</span>; <span style="color:#75715e">// Get all form elements
</span><span style="color:#75715e"></span><span style="color:#a6e22e">input</span>.<span style="color:#a6e22e">type</span>.<span style="color:#a6e22e">toLowerCase</span>(); <span style="color:#75715e">// Get input type (radio, checkbox, text, etc.)
</span><span style="color:#75715e"></span><span style="color:#a6e22e">input</span>.<span style="color:#a6e22e">value</span>; <span style="color:#75715e">// Get input value
</span><span style="color:#75715e"></span><span style="color:#a6e22e">input</span>.<span style="color:#a6e22e">name</span>; <span style="color:#75715e">// Get input name
</span><span style="color:#75715e"></span><span style="color:#a6e22e">input</span>.<span style="color:#a6e22e">checked</span>; <span style="color:#75715e">// Get the checked status of a checkbox or radio button
</span><span style="color:#75715e"></span><span style="color:#a6e22e">input</span>.<span style="color:#a6e22e">disabled</span>; <span style="color:#75715e">// Get input disabled status
</span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// jQuery
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">form</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;#some-form&#39;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">input</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;#some-input&#39;</span>);

<span style="color:#a6e22e">input</span>.<span style="color:#a6e22e">val</span>(); <span style="color:#75715e">// Get input value
</span><span style="color:#75715e"></span><span style="color:#a6e22e">input</span>.<span style="color:#a6e22e">getAttr</span>(<span style="color:#e6db74">&#34;name&#34;</span>); <span style="color:#75715e">// Get input name
</span><span style="color:#75715e"></span><span style="color:#a6e22e">input</span>[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">checked</span>; <span style="color:#75715e">// Get the checked status of a checkbox or radio button
</span><span style="color:#75715e"></span><span style="color:#a6e22e">input</span>[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">disabled</span>; <span style="color:#75715e">// Get input disabled status
</span></code></pre></div><h3 id="using-jquery-to-access-values">Using jQuery to access values:</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// 1. access values on submit: &#34;submit&#34;
</span><span style="color:#75715e"></span><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#myForm&#34;</span>).<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#34;submit&#34;</span>, <span style="color:#66d9ef">function</span>(){
    <span style="color:#75715e">// do entire form validation here
</span><span style="color:#75715e"></span>})

<span style="color:#75715e">// 2. access values as soon as a user is done typing: &#34;blur&#34;
</span><span style="color:#75715e"></span><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#myInput&#34;</span>).<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#34;blur&#34;</span>, <span style="color:#66d9ef">function</span>(){
    <span style="color:#75715e">// do single input validation here
</span><span style="color:#75715e"></span>})
</code></pre></div><h3 id="handling-errors">Handling Errors:</h3>
<p>A typical pattern is to display either next to the incorrectly filled out element, or a the top of the form, a new DOM element that lists the error in question.</p>
<p>When you bind an event handler to something that has a default action, the handler will fire and then the default action will happen. To stop this, we can use <code>event.preventDefault();</code> or call <code>return false</code> from within a jQuery event handler.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#myForm&#34;</span>).<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#34;submit&#34;</span>, <span style="color:#66d9ef">function</span>(){

    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">some_error_condition</span>) {

        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">errDiv</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;&lt;div class=&#34;error&#34;&gt;Please fix your phone number&lt;/div&gt;&#39;</span>)

        <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#myForm&#34;</span>).<span style="color:#a6e22e">append</span>(<span style="color:#a6e22e">errDiv</span>);

        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>; <span style="color:#75715e">// This tells the submission not to happen
</span><span style="color:#75715e"></span>    }
})
</code></pre></div><h3 id="cleavejs">Cleave.js</h3>
<p><a href="https://nosir.github.io/cleave.js/">Cleave.js</a> is a useful library to format input contents when you are typing!</p>
<h3 id="example-auto-capitalization">Example: Auto-capitalization</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;container&#34;</span>&gt;
  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;row&#34;</span>&gt;
    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;col&#34;</span>&gt;
      &lt;<span style="color:#f92672">h1</span>&gt;Auto-capitalize&lt;/<span style="color:#f92672">h1</span>&gt;
      &lt;<span style="color:#f92672">hr</span>&gt;
      &lt;<span style="color:#f92672">form</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;myForm&#34;</span>&gt;
        &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;form-group&#34;</span>&gt;
          &lt;<span style="color:#f92672">label</span> <span style="color:#a6e22e">for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;title&#34;</span>&gt;Add a Book Title&lt;/<span style="color:#f92672">label</span>&gt;
          &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;form-control&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;title&#34;</span>&gt;
        &lt;/<span style="color:#f92672">div</span>&gt;
      &lt;/<span style="color:#f92672">form</span>&gt;
    &lt;/<span style="color:#f92672">div</span>&gt;
  &lt;/<span style="color:#f92672">div</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">document.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;DOMContentLoaded&#39;</span>, <span style="color:#66d9ef">function</span> () {
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">input</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;title&#39;</span>)
  <span style="color:#a6e22e">input</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;keyup&#39;</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">event</span>) {
  	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">text</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">target</span>.<span style="color:#a6e22e">value</span>
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">textArray</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">text</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39; &#39;</span>)
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">titlecaseArray</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">textArray</span>.<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">word</span>) {
    	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">word</span> <span style="color:#f92672">?</span> <span style="color:#a6e22e">word</span>[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">toUpperCase</span>() <span style="color:#f92672">+</span> <span style="color:#a6e22e">word</span>.<span style="color:#a6e22e">slice</span>(<span style="color:#ae81ff">1</span>) <span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>
    })
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">titlecase</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">titlecaseArray</span>.<span style="color:#a6e22e">join</span>(<span style="color:#e6db74">&#39; &#39;</span>)

    <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">target</span>.<span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">titlecase</span>
  })
})
</code></pre></div><h2 id="points-of-discussion">Points of Discussion</h2>
<ul>
<li>Why do we need to do form validation inside an event listener?</li>
</ul>
<p>To perform more complex validation on form input values.</p>
<ul>
<li>What is a better experience for the user: using the required attribute, or using JS to ensure all required fields are checked?</li>
</ul>
<p>&ldquo;For good user experience, indicate to the user when form fields are required. It isn&rsquo;t only good user experience, it is required by WCAG <a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility">accessibility</a> guidelines. Also, only require users to input data you actually need: For example, why do you really need to know someone&rsquo;s gender or title?&rdquo;</p>
<ul>
<li>Why might browser validation not be enough?</li>
</ul>
<p>Client-side validation is not enough because its scope of action is strict and is only performed in the browser user-interface. A web server &lsquo;listens&rsquo; to and receives an HTTP request containing data from the browser, and then process it. It places trust in the browser, an entity that should never be trusted. It should only be used to improve user experience and application performance by catching malformed input on the client and saving a roundtrip to the server.</p>
<p>Client-side validation should never be used for security purposes. It can be easily <strong>bypassed</strong> and does not prevent <strong>malicious attacks</strong>.  All input should be validated <strong>server side</strong>. We can also place a <strong>server-side validator</strong> for all inputs. The following steps outline how to properly set the validation routines:</p>
<ol>
<li>Identify input: Determine the data that is to be passed from the client to your application, such as URL-based parameters, form-based parameters, hidden fields, and cookies.</li>
<li>Understand the use and constraints associated with each input. Define the format and type of each input. Build a server-side validator for each format and type of expected input.</li>
<li>Create a set of validators for each type of input on the server-side of the application. If there are validators on the client-side, make sure the same validators are implemented on the server-side as well.</li>
</ol>
<h2 id="references">References</h2>
<p><strong>HTML5</strong></p>
<p><a href="https://education.launchcode.org/intro-to-professional-web-dev/chapters/forms/validation-with-javascript.html">&ldquo;25.9. Validation with JavaScript&rdquo;, Launch Code Education</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#validating_against_a_regular_expression">&ldquo;Client-side form validation&rdquo;, MDN Web Docs</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Constraint_validation">&ldquo;Constraint validation&rdquo;, MDN Web Docs</a></p>
<p><a href="https://gomakethings.com/ditching-jquery/#working-with-forms">&ldquo;Ditching jQuery&rdquo;, Go Make Things, August 25, 2014</a></p>
<p><a href="http://diveintohtml5.info/forms.html">&ldquo;Dive Into HTML5&rdquo;</a></p>
<p><a href="https://www.html5pattern.com/">&ldquo;HTML5 Pattern&rdquo;</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes">&ldquo;HTML attribute reference&rdquo;, MDN Web Docs</a></p>
<p><a href="https://www.sitepoint.com/using-the-html5-constraint-api-for-form-validation/">Panda, Sandeep. &ldquo;Using the HTML5 Constrint API for Form Validation&rdquo;, sitepoint, August 22, 2013.</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions">&ldquo;Regular expressions&rdquo;, MDN Web Doc</a></p>
<p><a href="https://blog.securityinnovation.com/blog/2011/07/do-not-rely-on-client-side-validation.html#:~:text=A%20client%2Dside%20input%20validation,a%20roundtrip%20to%20the%20server.&amp;text=Always%20use%20server%2Dside%20validation,your%20application%20from%20malicious%20attacks.">Truth, Serge. &ldquo;Do Not Rely on Client-Side Validation&rdquo;, Security Innovation, July 26, 2011.</a></p>
]]></content>
        </item>
        
        <item>
            <title>Local Storage</title>
            <link>https://haleyjung.github.io/posts/2022/02/local-storage/</link>
            <pubDate>Wed, 02 Feb 2022 01:45:40 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/02/local-storage/</guid>
            <description>Definition of Local Storage  a browser API that allows a web application to persist its state inside a user&amp;rsquo;s web browser can be used to persist information retrieved from sources like user events, HTTP responses, and calculated results only persists strings has no expiration time until explicitly cleared improves a web application&amp;rsquo;s user experience more data can be stored in localStorage than in cookies  Data model: the software representation of information Data persistence: store data in the application so that when a user comes back to the site, they can pick up from where they left off</description>
            <content type="html"><![CDATA[<h2 id="definition-of-local-storage">Definition of Local Storage</h2>
<ul>
<li><strong>a browser API</strong> that allows a web application to persist its state inside a user&rsquo;s web browser</li>
<li>can be used to persist information retrieved from sources like user events, HTTP responses, and calculated results</li>
<li>only persists strings</li>
<li>has no expiration time until explicitly cleared</li>
<li>improves a web application&rsquo;s user experience</li>
<li>more data can be stored in localStorage than in cookies</li>
</ul>
<p><strong>Data model</strong>: the software representation of information
<strong>Data persistence</strong>: store data in the application so that when a user comes back to the site, they can pick up from where they left off</p>
<h2 id="how-it-works-in-a-web-browser">How it works in a web browser:</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">setItem</span>(<span style="color:#e6db74">&#39;favoriteFood&#39;</span>, <span style="color:#e6db74">&#39;Canned corn&#39;</span>);

<span style="color:#75715e">// Quit the application
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// Launch the application
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;favoriteFood&#39;</span>);  <span style="color:#75715e">// &#39;Canned corn&#39;
</span></code></pre></div><p>To persist state, the application provides local storage a key and a value. To retrieve state, the application provides local storage the same key.</p>
<h2 id="restrictions">Restrictions</h2>
<ol>
<li>State persisted to local storage is only available to pages on the same domain. If state is persisted for favoritefoods.com then it cannot be retrieved for favorite-foods.com.</li>
<li>State persisted to local storage is only available using the same web browser. If state is persisted using Chrome then it cannot be retrieved using Firefox, and vice versa.</li>
<li>Local storage only persists strings. If an application&rsquo;s state contains any other data type, it must be serialized to a string when it&rsquo;s saved and deserialized back to its original data type when it&rsquo;s retrieved.</li>
<li>Local storage has a limit of 5 MB, or 2.5 million characters, per domain.</li>
</ol>
<h2 id="crud-operations-on-items-in-local-storage">CRUD operations on items in local storage</h2>
<p>CRUD stands for Create / Read / Update / Delete.</p>
<h3 id="create">Create</h3>
<p>In <strong>Chrome DevTools</strong>:</p>
<ul>
<li>Click the Application tab</li>
<li>Click the arrow next to the &lsquo;Local Storage&rsquo; section on the sidebar</li>
<li>Click the child underneath the &lsquo;Local Storage&rsquo; section</li>
</ul>
<p>To create an item in local storage, pass a key and a value to the <code>localStorage.setItem()</code> method.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">setItem</span>(<span style="color:#e6db74">&#39;favoriteString&#39;</span>, <span style="color:#e6db74">&#39;Canned corn&#39;</span>);  <span style="color:#75715e">// &#39;Canned corn&#39;
</span><span style="color:#75715e"></span><span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">setItem</span>(<span style="color:#e6db74">&#39;favoriteNumber&#39;</span>, <span style="color:#ae81ff">42</span>);             <span style="color:#75715e">// &#39;42&#39;
</span><span style="color:#75715e"></span><span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">setItem</span>(<span style="color:#e6db74">&#39;favoriteBoolean&#39;</span>, <span style="color:#66d9ef">true</span>);          <span style="color:#75715e">// &#39;true&#39;
</span></code></pre></div><p>When creating items in local storage from an <strong>object or array</strong>, use the <code>JSON.stringify()</code> method to serialize the state first.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">setItem</span>(<span style="color:#e6db74">&#39;favoriteObject&#39;</span>, <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>({ <span style="color:#a6e22e">a</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">b</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span> }));  <span style="color:#75715e">// &#39;{ &#34;a&#34;: 1, &#34;b&#34;: 2 }&#39;
</span><span style="color:#75715e"></span><span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">setItem</span>(<span style="color:#e6db74">&#39;favoriteArray&#39;</span>, <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]));        <span style="color:#75715e">// &#39;[1,2,3]&#39;
</span><span style="color:#75715e"></span><span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">setItem</span>(<span style="color:#e6db74">&#39;favoriteBoolean&#39;</span>, <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#66d9ef">true</span>));           <span style="color:#75715e">// &#39;true&#39;
</span></code></pre></div><h3 id="read">Read</h3>
<p>To read an item from local storage, pass a key to the <code>localStorage.getItem()</code> method. Then, use the <code>JSON.parse()</code> method to deserialize any state that&rsquo;s been serialized.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">favoriteString</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;favoriteString&#39;</span>);

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">favoriteNumber</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;favoriteNumber&#39;</span>));
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">favoriteBoolean</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;favoriteBoolean&#39;</span>));
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">favoriteObject</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;favoriteObject&#39;</span>));
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">favoriteArray</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;favoriteArray&#39;</span>));
</code></pre></div><p>When attempting to read a local storage item, sometimes <code>null</code> is returned because it hasn&rsquo;t been created. For example, the first time a user launches an application. For these cases, it&rsquo;s wise to initialize the application&rsquo;s state with a default value. This is where the <code>||</code> operator can be useful. The <code>||</code> operator returns the value on the left, if it&rsquo;s truthy, otherwise it returns the value on the right.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">favoriteString</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;favoriteString&#39;</span>) <span style="color:#f92672">||</span> <span style="color:#e6db74">&#39;&#39;</span>;
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">favoriteNumber</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;favoriteNumber&#39;</span>)) <span style="color:#f92672">||</span> <span style="color:#ae81ff">0</span>;
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">favoriteBoolean</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;favoriteBoolean&#39;</span>)) <span style="color:#f92672">||</span> <span style="color:#66d9ef">false</span>;
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">favoriteObject</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;favoriteObject&#39;</span>)) <span style="color:#f92672">||</span> {};
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">favoriteArray</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;favoriteArray&#39;</span>)) <span style="color:#f92672">||</span> [];
</code></pre></div><h3 id="update">Update</h3>
<p>First, use the <code>localStorage.getItem()</code> method, or a default value, to initialize state. When an event is triggered, handle it by updating the state and then updating local storage with the <code>localStorage.setItem()</code> method, which will completely replaces an item.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// initialize state
</span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">favoriteObject</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;favoriteObject&#39;</span>)) <span style="color:#f92672">||</span> { <span style="color:#a6e22e">votes</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span> };

<span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;button&#39;</span>).<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#39;click&#39;</span>, () =&gt; {
  <span style="color:#75715e">// update state
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">favoriteObject</span>.<span style="color:#a6e22e">votes</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>;

  <span style="color:#75715e">// update local storage
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">setItem</span>(<span style="color:#e6db74">&#39;favoriteObject&#39;</span>, <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">favoriteObject</span>));
});
</code></pre></div><h3 id="destroy">Destroy</h3>
<p><code>localStorage.removeItem('favoriteObject');</code></p>
<h2 id="references">References</h2>
<p><a href="https://css-tricks.com/localstorage-examples/">Coyier, Chris. &ldquo;Examples of Sites where localStorage should or is being used&rdquo;, CSS-Tricks, July 27, 2011.</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage">&ldquo;Storage&rdquo;, MDN Web Docs</a></p>
<p><a href="http://diveintohtml5.info/storage.html">&ldquo;The past, present &amp; future of local storage for web applications&rdquo;, Dive Into HTML5</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage">&ldquo;Window.localStorage&rdquo;, MDN Web Docs</a></p>
]]></content>
        </item>
        
        <item>
            <title>Semantic Versioning</title>
            <link>https://haleyjung.github.io/posts/2022/02/semantic-versioning/</link>
            <pubDate>Tue, 01 Feb 2022 10:48:06 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/02/semantic-versioning/</guid>
            <description>Semantic Versioning (SemVer) A versioning system for software releases, such as new plugins, addons, libraries, and extensions.
It consists of 3 components in the format of X.Y.Z
X: Major Version  When the major version number is increased, the minor and patch version numbers are reset to zero. Increasing the major number breaks the existing API.  Y: Minor Version  Minor version indicates the release of new functionality in the system (when implementing new features in a backwards-incompatible way).</description>
            <content type="html"><![CDATA[<h2 id="semantic-versioning-semver">Semantic Versioning (SemVer)</h2>
<p>A versioning system for software releases, such as new plugins, addons, libraries, and extensions.</p>
<p>It consists of 3 components in the format of <strong>X.Y.Z</strong></p>
<h3 id="x-major-version">X: Major Version</h3>
<ul>
<li>When the major version number is increased, the minor and patch version numbers are reset to zero.</li>
<li>Increasing the major number breaks the existing API.</li>
</ul>
<h3 id="y-minor-version">Y: Minor Version</h3>
<ul>
<li>Minor version indicates the release of new functionality in the system (when implementing new features in a backwards-incompatible way).</li>
<li>When this is increased, the patch version number is reset to zero.</li>
<li>Does not break the existing API.</li>
</ul>
<h3 id="z-patch-version">Z: Patch Version</h3>
<ul>
<li>For bug fixes; no functionality changes.</li>
<li>There&rsquo;s no limit to patch version numbers.</li>
</ul>
<h3 id="important-notes">Important Notes</h3>
<ul>
<li>The first version starts at <strong>0.1.0</strong> not <strong>0.0.1</strong></li>
<li>The first stable version is <strong>1.0.0</strong>.</li>
<li>Before <strong>1.0.0</strong> is the Development Phase for Beta versions.</li>
<li>Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.</li>
</ul>
<h2 id="references">References</h2>
<p><a href="https://nodesource.com/blog/the-basics-of-package-json-in-node-js-and-npm/">Cyren, Tierney. &ldquo;The Basics of Package.json in Node.js and npm&rdquo;, Nodesource, March 3, 2017.</a></p>
<p><a href="https://www.geeksforgeeks.org/introduction-semantic-versioning/">&ldquo;Introduction to Semantic Versioning&rdquo;, GeeksforGeeks, Auguest 17, 2021.</a></p>
<p><a href="https://semver.org/">&ldquo;Semantic Versioning 2.0.0&rdquo;, Semver</a></p>
]]></content>
        </item>
        
        <item>
            <title>Node.js: Content Types</title>
            <link>https://haleyjung.github.io/posts/2022/02/node.js-content-types/</link>
            <pubDate>Tue, 01 Feb 2022 01:30:17 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/02/node.js-content-types/</guid>
            <description>JSON: JavaScript Object Notation JSON, or JavaScript Object Notation, is a minimal, readable format for structuring data. It is used primarily to transmit data between a server and web application, as an alternative to XML.
JSON can be parsed by a standard JavaScript function, and is parsed into a ready-to-use JavaScript object. It is thus faster and easier than XML.
To read from JSON, we need to first use fs to read in the file as text(strings) and then `JOSN.</description>
            <content type="html"><![CDATA[<h2 id="json-javascript-object-notation">JSON: JavaScript Object Notation</h2>
<p>JSON, or JavaScript Object Notation, is a minimal, readable format for structuring data. It is used primarily to transmit data between a server and web application, as an alternative to XML.</p>
<p>JSON can be parsed by a standard JavaScript function, and is parsed into a ready-to-use JavaScript object. It is thus faster and easier than XML.</p>
<p>To read from JSON, we need to first use <code>fs</code> to read in the file as text(strings) and then `JOSN.parse() to convert it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">fs</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;fs&#39;</span>)
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">contentsInJSON</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">readFileSync</span>(<span style="color:#e6db74">&#39;/path/to/my/file.json&#39;</span>, <span style="color:#e6db74">&#39;utf-8&#39;</span>)
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">contentsAsJS</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">contentsInJSON</span>)
</code></pre></div><p>To write back to JSON, use <code>JSON.stringify()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">fs</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;fs&#39;</span>)
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">contents</span> <span style="color:#f92672">=</span> [ { <span style="color:#a6e22e">id</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Intro to JSON&#39;</span> } ]
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">contentsAsJSON</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">contents</span>)
<span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">writeFileSync</span>(<span style="color:#e6db74">&#39;/path/to/my/json.file&#39;</span>, <span style="color:#a6e22e">contentsAsJSON</span>)
</code></pre></div><h2 id="xml--html">XML &amp; HTML</h2>
<p>Both XML and HTML are markup langauges.</p>
<p><strong>XML</strong>: Extensible Markup Language (meta-language of noting/marking)</p>
<ul>
<li>developed to <strong>describe data</strong> and to focalize on what the data represent</li>
<li>tags are not pre-defined, so they need to be created according to the needs</li>
<li>it is not a substitute for HTML
<ul>
<li>it can store data separately from HTML</li>
<li>it can be used to store data inside the HTML documents as &lsquo;data islands&rsquo;</li>
<li>can be used to store data in files and databases</li>
</ul>
</li>
</ul>
<p><strong>HTML</strong></p>
<ul>
<li>developed to <strong>display data</strong> about to focalize on the way that data looks</li>
<li>pre-defined tags</li>
</ul>
<p>The <a href="https://cheerio.js.org/">cheerio</a> library allows us to parse XML and HTML through Node.js. It can be used for reading XML data or parsing websites.</p>
<h2 id="csv-comma-separated-values">CSV: comma-separated values</h2>
<p>CSV files are not just separated by commas, but also tabs or delimiter.</p>
<p>It&rsquo;s powerful because it can be read in many formats.</p>
<p>An in-browser CSV parser is <a href="https://www.papaparse.com/">Papa Parse</a></p>
<h2 id="references">References</h2>
<p><a href="http://www.xmlobjective.com/what-is-the-difference-between-xml-and-html/">XML Object, &ldquo;What is the difference between XML and HTML?&rdquo;, XML Objective, July 11, 2013.</a></p>
<p><a href="https://www.json.org/json-en.html">JSON</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON">&ldquo;JSON&rdquo;, MDN Web Docs</a></p>
<p><a href="https://www.w3schools.com/js/js_json_xml.asp">&ldquo;JSON vs XML&rdquo; W3Schools</a></p>
<p><a href="https://developers.squarespace.com/what-is-json/">&ldquo;What is JSON?&rdquo;, Squarespace</a></p>
]]></content>
        </item>
        
        <item>
            <title>Node / Node.JS</title>
            <link>https://haleyjung.github.io/posts/2022/01/node-/-node.js/</link>
            <pubDate>Mon, 31 Jan 2022 10:35:53 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/node-/-node.js/</guid>
            <description>What is Node? Nodes in the DOM are elements from the HTML page, which are organized in a hiearchical tree-like structure consisting of parents and children. Elements such as &amp;lt;p&amp;gt;, &amp;lt;div&amp;gt;, &amp;lt;section&amp;gt; are considered as &amp;ldquo;element&amp;rdquo; nodes while comments are &amp;ldquo;comment&amp;rdquo; nodes, &amp;ldquo;text&amp;rdquo; objects and line-breaks are &amp;ldquo;text&amp;rdquo; nodes. Every HTML element is a node, but not every node is an HTML element.
The topmost node is the root node of the DOM tree, Document, which has two children: &amp;lt;!</description>
            <content type="html"><![CDATA[<h2 id="what-is-node">What is Node?</h2>
<p>Nodes in the DOM are elements from the HTML page, which are organized in a hiearchical tree-like structure consisting of parents and children. Elements such as <code>&lt;p&gt;</code>, <code>&lt;div&gt;</code>, <code>&lt;section&gt;</code> are considered as &ldquo;element&rdquo; nodes while comments are &ldquo;comment&rdquo; nodes, &ldquo;text&rdquo; objects and line-breaks are &ldquo;text&rdquo; nodes. Every HTML element is a node, but not every node is an HTML element.</p>
<p>The topmost node is the <strong>root node</strong> of the DOM tree, <code>Document</code>, which has two children: <code>&lt;!DOCTYPE html&gt;</code> and <code>&lt;html&gt;</code>. A text content inside an element is considered as the <strong>child node</strong> of the <strong>parent element</strong>.</p>
<ul>
<li><code>element.childNodes</code> returns a list of all child nodes</li>
<li><code>element.children</code> returns a list of child element nodes only</li>
</ul>
<h2 id="what-is-nodejs">What is NodeJS?</h2>
<p>NodeJS is an open source, cross-platform runtime system for developing applications in JavaScript. It runs JavaScript outside the browser.</p>
<h2 id="terminal-commands">Terminal Commands</h2>
<h3 id="installation">Installation</h3>
<p><code>brew install node</code></p>
<p><code>node -v</code> to check the version</p>
<h3 id="to-generate-a-packagejson-file-for-the-module">To generate a package.json file for the module</h3>
<p><code>npm init</code></p>
<h3 id="to-save-module-dependencies-to-the-packagejson-file">To save module dependencies to the package.json file</h3>
<p><code>npm install --save modulename</code></p>
<h2 id="node-shell">Node Shell</h2>
<p>Node Shell provides a read-evaluate-print-loop (<strong>REPL</strong>) for JavaScript programs.</p>
<p>Launch the Node shell by running this command, <code>node</code>.</p>
<p>We can then type and run the JavaScript in it.</p>
<p>To exit: <code>.exit</code> + <code>Enter</code> or just Command + D</p>
<h2 id="node-interpreter">Node Interpreter</h2>
<p>Node interpreter reads, evaluates, and quits the given JavaScript program stored in a file.</p>
<p>Unlike the interactive Node shell where we can experiment with JavaScript, Node interpreter does not automatically print the result of each line or loop waiting for us to add more input. It simply <strong>reads and evaluates</strong> a JS program file.</p>
<p>In the Terminal, open a JavaScript file that includes a line of <code>console.log()</code>: e.g. <code>code ~/Desktop/this.js</code>
Then run the program with node: <code>node ~/Desktop/this.js</code> The Terminal will then print the output from the console.log.</p>
<h2 id="nodejs-module">Node.JS Module</h2>
<ul>
<li>Allows us to split the code into modules, i.e. files</li>
<li>Modules can <strong>export any value</strong> such as functions, objects, arrays, strings/numbers/booleans</li>
<li>Easy to package and reuse codes: solves the problem by avoiding Large files, allowing an easy sharing of common functionality</li>
<li>In Node.js, module is a <strong>global variable</strong> with <code>exports</code> property that references an empty object by default.</li>
</ul>
<h3 id="steps-to-split-code-into-two-modules">Steps to Split Code into Two Modules</h3>
<ol>
<li>Identify which piece of code to export</li>
<li>Create a new module</li>
<li>Move that code to the new module</li>
<li><strong>Assign that code to the module.exports object</strong></li>
<li>Require the new module <strong>in the original module</strong> using the <strong>require()</strong> function
<ul>
<li>The built-in object to import a module: <code>require('filename')</code></li>
<li>The built-in object to export a module: <code>module.exports</code></li>
</ul>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// =============================//
</span><span style="color:#75715e">// main.js
</span><span style="color:#75715e"></span>
<span style="color:#e6db74">&#39;use strict&#39;</span>;

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">add</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;./arithmetic&#39;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">add</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>);

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">result</span>);

<span style="color:#75715e">// =============================//
</span><span style="color:#75715e">// arithmetic.js
</span><span style="color:#75715e"></span>
<span style="color:#e6db74">&#39;use strict&#39;</span>;

<span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span>;
};
</code></pre></div><h4 id="exporting-iife">Exporting IIFE</h4>
<p><code>require()</code> just returns a value, so we can also export a function and invoke it immediately.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#e6db74">&#39;use strict&#39;</span>;

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;./arithmetic&#39;</span>)(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>);

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">result</span>);
</code></pre></div><h4 id="exporting-an-object">Exporting an object</h4>
<p>Just assign the object to the <code>module.export</code> object:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#e6db74">&#39;use strict&#39;</span>;

<span style="color:#75715e">// ver.1
</span><span style="color:#75715e"></span><span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">add</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span>;
    }
};

<span style="color:#75715e">// ver.2
</span><span style="color:#75715e"></span><span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span>.<span style="color:#a6e22e">add</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span>;
};

<span style="color:#75715e">// ver.3
</span><span style="color:#75715e"></span><span style="color:#a6e22e">exports</span>.<span style="color:#a6e22e">add</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span>;
};
</code></pre></div><ul>
<li><code>add()</code> method references the function that&rsquo;s part of the object being exported</li>
</ul>
<h3 id="3-kinds-of-modules">3 Kinds of Modules</h3>
<ol>
<li>Core modules</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">fs</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;fs&#39;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">http</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;http&#39;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">path</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;path&#39;</span>);
</code></pre></div><ol start="2">
<li>NPM modules (node_modules)</li>
</ol>
<p>NPM modules are inside <strong>packages</strong> that can be downloaded from the NPM registry using <code>npm install</code> command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// install locally
</span><span style="color:#75715e"></span><span style="color:#a6e22e">npm</span> <span style="color:#a6e22e">install</span>

<span style="color:#75715e">// install globally
</span><span style="color:#75715e"></span><span style="color:#a6e22e">npm</span> <span style="color:#a6e22e">install</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">g</span>

<span style="color:#75715e">// to check where NPM modules are installed
</span><span style="color:#75715e"></span><span style="color:#a6e22e">npm</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">g</span> <span style="color:#a6e22e">root</span>
<span style="color:#a6e22e">npm</span> <span style="color:#a6e22e">root</span>
</code></pre></div><p>These are just like core modules: <code>require(packagename)</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">express</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;express&#39;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">morgan</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;morgan&#39;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">bodyParser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;body-parser&#39;</span>);
</code></pre></div><ol start="3">
<li>File modules</li>
</ol>
<p>File modules are what we create on our own. When creating a file module, we add values to <code>module.exports</code> object using one of the techniques above.</p>
<p>When requiring a file module, you provide a path to the module, minus the .js extension. These paths must start with /, ./, or ../ to indicate where on the filesystem Node.js can find the file module: <code>require('./filename')</code> / <code>require('../filename')</code> / <code>require('/filename')</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myModule1</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;/myModule1&#39;</span>);   <span style="color:#75715e">// absolute path
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myModule2</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;./myModule2&#39;</span>);  <span style="color:#75715e">// same path as the current module
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myModule3</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;../myModule3&#39;</span>); <span style="color:#75715e">// parent path of the current module
</span></code></pre></div><ol start="4">
<li>Folders as modules</li>
</ol>
<p><a href="https://nodejs.org/api/modules.html#modules_folders_as_modules">Official Documentation</a></p>
<h3 id="module-caching">Module Caching</h3>
<p>The first time a module is required during any given run of a script, that module is <strong>cached</strong>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// test.js
</span><span style="color:#75715e"></span><span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span>.<span style="color:#a6e22e">ms</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">500</span>;

<span style="color:#75715e">//originCopy.js
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">resultTwo</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;./test&#39;</span>);
<span style="color:#a6e22e">resultTwo</span>.<span style="color:#a6e22e">js</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;foo&#39;</span>;

<span style="color:#75715e">// origin.js
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;./test&#39;</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">ms</span>) <span style="color:#75715e">// logs 500
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;./originCopy&#39;</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">js</span>); <span style="color:#75715e">// due to caching, this now logs the result from originCopy.js: &#39;foo&#39;
</span><span style="color:#75715e"></span>
</code></pre></div><h3 id="path-module">Path Module</h3>
<p>The <code>path</code> module provides utilities for working with file and directory paths.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">path</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;path&#39;</span>);
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">myFile</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">join</span>(<span style="color:#a6e22e">__dirname</span>, <span style="color:#e6db74">&#39;myFile.txt&#39;</span>)

<span style="color:#75715e">// to access &#39;../src/main.js&#39; I would need to write
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">getMainFile</span> () {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">join</span>(<span style="color:#e6db74">&#39;..&#39;</span>, <span style="color:#e6db74">&#39;/src&#39;</span>, <span style="color:#e6db74">&#39;main.js&#39;</span>)
}
</code></pre></div><h2 id="file-system-module">File System Module</h2>
<p>The <code>fs</code> module allows us to manipulate the file system. For instance, to list out the contents of a folder, we can do the following:</p>
<p><a href="https://nodejs.org/api/fs.html">Official Documentation</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">fs</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;fs&#39;</span>)
<span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">readdir</span>(<span style="color:#e6db74">&#39;.&#39;</span>, (<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">files</span>) =&gt; {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">err</span>) {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#a6e22e">err</span>)
  } <span style="color:#66d9ef">else</span> {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">files</span>)
  }
})
</code></pre></div><p>The first argument of a callback function we pass into <code>fs.readdir()</code> is an error, which is a <strong>common pattern</strong> in Node. To run this code synchronously, we could use a similar method <code>fs.readdirSync()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">fs</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;fs&#39;</span>)
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">files</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">readdirSync</span>(<span style="color:#e6db74">&#39;.&#39;</span>)

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">files</span>)
</code></pre></div><p>Additional function of <code>fs</code> is the ability to read, write, update, and delete files.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// write
</span><span style="color:#75715e"></span><span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">writeFileSync</span>(<span style="color:#e6db74">&#39;names.txt&#39;</span>, <span style="color:#e6db74">&#39;Shelby\nJaiden\nAlfredo&#39;</span>)

<span style="color:#75715e">// read
</span><span style="color:#75715e"></span><span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">readFileSync</span>(<span style="color:#e6db74">&#39;names.txt&#39;</span>, <span style="color:#e6db74">&#39;utf-8&#39;</span>)

<span style="color:#75715e">// update
</span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">names</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">readFileSync</span>(<span style="color:#e6db74">&#39;names.txt&#39;</span>, <span style="color:#e6db74">&#39;utf-8&#39;</span>) <span style="color:#75715e">// 1. read all the content from names.txt
</span><span style="color:#75715e"></span><span style="color:#a6e22e">names</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Lucian\n&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">names</span> <span style="color:#75715e">// 2. added a new name to the front of the return string (with a new line character)
</span><span style="color:#75715e"></span><span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">writeFileSync</span>(<span style="color:#e6db74">&#39;names.txt&#39;</span>, <span style="color:#a6e22e">names</span>) <span style="color:#75715e">// 3. re-wrote the full text back to the file
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// delete
</span><span style="color:#75715e"></span><span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">unlinkSync</span>(<span style="color:#e6db74">&#39;names.txt&#39;</span>)
</code></pre></div><h2 id="packagejson-scripts">package.json: Scripts</h2>
<p>When running scripts with NPM, we have access to any package we&rsquo;ve installed locally and the command line.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// custom scripts can be added in package.json
</span><span style="color:#75715e">// after installing a package: e.g. clockmoji to tell us the time
</span><span style="color:#75715e"></span>{
  <span style="color:#e6db74">&#34;scripts&#34;</span><span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;clockmoji&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;clockmoji&#34;</span>
  }
}

<span style="color:#75715e">// In Terminal
</span><span style="color:#75715e"></span><span style="color:#a6e22e">npm</span> <span style="color:#a6e22e">run</span> <span style="color:#a6e22e">clockmoji</span>
</code></pre></div><h2 id="references">References</h2>
<p><strong>Node</strong></p>
<p><a href="https://eloquentjavascript.net/20_node.html#h_BOlGLA/wK7">&ldquo;Eloquent JavaScript&rdquo;</a></p>
<p><a href="https://www.w3schools.com/js/js_htmldom.asp">&ldquo;JavaScript HTML DOM&rdquo;, W3Schools</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node">&ldquo;Node&rdquo;, MDN Web Docs</a></p>
<p><a href="https://www.oreilly.com/library/view/learning-node/9781449326128/ch04.html">Powers, Shelley. &ldquo;Learning Node&rdquo;, O&rsquo;Reilly Media, October 2012.</a></p>
<p><a href="https://github.com/maxogden/art-of-node#modular-development-workflow">&ldquo;The Art of Node&rdquo;, Github</a></p>
<p><a href="https://stackoverflow.com/questions/24974621/what-is-a-node-in-javascript#:~:text=Nodes%20are%20in%20the%20DOM,document%20are%20known%20as%20nodes.">&ldquo;What is a node in JavaScript?&rdquo;, Stack Overflow</a></p>
<p><a href="https://stackoverflow.com/questions/40511513/why-does-node-prefer-error-first-callback/40512067#40512067">&ldquo;Why does node prefer error-first callback?&rdquo;, Stack Overflow</a></p>
<p><strong>NodeJS</strong></p>
<p><a href="https://github.com/nodejs/node/tree/master/lib">Node.js core modules source code</a></p>
<p><a href="https://nodejs.org/api/modules.html">Node.js v17.4.0 documentation</a></p>
<p><strong>npm scripts</strong></p>
<p><a href="https://blog.jayway.com/2014/03/28/running-scripts-with-npm/">Janmyr, Anders. &ldquo;Running scripts with npm&rdquo;, jayway blog, March 28, 2014.</a></p>
<p><a href="https://docs.npmjs.com/cli/v8/using-npm/scripts">&ldquo;scripts&rdquo;, npm Docs</a></p>
]]></content>
        </item>
        
        <item>
            <title>Recursion</title>
            <link>https://haleyjung.github.io/posts/2022/01/recursion/</link>
            <pubDate>Sun, 30 Jan 2022 01:12:59 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/recursion/</guid>
            <description>Definition Recursion is a technique for solving problems wherein a function makes calls to itself. By doing so, it can complete a small amount of the processing, and delegate the rest of the problem to the recursive calls.
Recursive function always come with a function inside. With 2 minimum cases inside: a base case, and a recursive case. The base case is the situation or condition where we don&amp;rsquo;t need to recursively invoke the function and is safe to assume that that function can end easily.</description>
            <content type="html"><![CDATA[<h2 id="definition">Definition</h2>
<p>Recursion is a technique for solving problems wherein a function makes calls to itself. By doing so, it can complete a small amount of the processing, and delegate the rest of the problem to the recursive calls.</p>
<p>Recursive function always come with a function inside. With 2 minimum cases inside: a base case, and a recursive case. The base case is the situation or condition where we don&rsquo;t need to recursively invoke the function and is safe to assume that that function can end easily. The recursive case is the case where we do need to invoke the function again.</p>
<h2 id="base-case--stop-condition">Base case / stop condition</h2>
<p>The base case (i.e. stop condition) should be obvious in a recursive function. Typically, it&rsquo;s at the <strong>top</strong> of the function.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">hasPathSum</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">node</span>, <span style="color:#a6e22e">targetSum</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">node</span>) <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">targetSum</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#75715e">// *---* //
</span><span style="color:#75715e"></span>};
</code></pre></div><h2 id="avoid-pseudo-global-anti-pattern">Avoid pseudo-global anti-pattern</h2>
<p>Avoid &ldquo;inner function&rdquo; or &ldquo;pseudo-global&rdquo; style of doing recursion like below.</p>
<p>Breaking the encapsulation of your functions (the clean &ldquo;known-inputs, known-outputs&rdquo; pattern) is a dangerous way to code. You&rsquo;ll get side effects for your functions that are harder to reason about.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">hasPathSum</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">tree</span>, <span style="color:#a6e22e">sum</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">hasPath</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">runningSum</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;

  <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">traverse</span>(<span style="color:#a6e22e">node</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">runningSum</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">sum</span>) {
      <span style="color:#a6e22e">runningSum</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">runningSum</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">val</span>; <span style="color:#75715e">// this relies on a closure, in effect it&#39;s a pseudo-global!
</span><span style="color:#75715e"></span>      <span style="color:#a6e22e">traverse</span>(<span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">left</span>);
    }
  }
  <span style="color:#66d9ef">return</span>;
}
<span style="color:#a6e22e">traverse</span>(<span style="color:#a6e22e">tree</span>);
<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">hasPath</span>;
</code></pre></div><p>A cleaner version would be:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">hasPathSum</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">node</span>, <span style="color:#a6e22e">targetSum</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">node</span>) <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">targetSum</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#a6e22e">targetSum</span> <span style="color:#f92672">-=</span> <span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">val</span>;
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">hasPathSum</span>(<span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">left</span>, <span style="color:#a6e22e">targetSum</span>) <span style="color:#f92672">||</span> <span style="color:#a6e22e">hasPathSum</span>(<span style="color:#a6e22e">node</span>.<span style="color:#a6e22e">right</span>, <span style="color:#a6e22e">targetSum</span>);
};
</code></pre></div><h2 id="when-should-we-use-recursion">When should we use Recursion?</h2>
<h3 id="dynamic-programming">Dynamic programming</h3>
<h3 id="nested-data-structure">Nested Data Structure</h3>
<ul>
<li>When working with nested data structure, in particular when the very when the outer data structure has can have an identical version of itself nested inside
<ul>
<li>e.g. If you want to flatten an array of arrays. There&rsquo;s an array in that array, and there&rsquo;s no guarantee that there won&rsquo;t be an array in that array and there could be an array for deep or five d or 60 or 70 and there&rsquo;s no way to know in advance how deep the input array will go</li>
</ul>
</li>
</ul>
<h4 id="data-structure-linked-list">Data Structure: Linked List</h4>
<ul>
<li>A linked list (has next property): An element in a linked list or node only knows about its neighboring node. You can&rsquo;t say like linked list of four.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">LinkedListNode</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">value</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">__</span>,
  <span style="color:#a6e22e">next</span><span style="color:#f92672">:</span> {};
};
</code></pre></div><h4 id="data-structure-tree-a-non-linear-linked-list">Data Structure: Tree (a non-linear linked list)</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Tree</span> <span style="color:#f92672">=</span> { <span style="color:#75715e">// e.g. HTML body
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">value</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">__</span>,
  <span style="color:#a6e22e">children</span><span style="color:#f92672">:</span> [{<span style="color:#a6e22e">Tree</span>}, {<span style="color:#a6e22e">Tree</span>}. {<span style="color:#a6e22e">Tree</span>}]; <span style="color:#75715e">//e.g. div
</span><span style="color:#75715e"></span>            <span style="color:#75715e">// each {} has the same Tree structure with value and children
</span><span style="color:#75715e"></span>};
</code></pre></div><h4 id="combinations-or-permutations-of-data">Combinations or Permutations of Data</h4>
<h2 id="call-stack">Call Stack</h2>
<p>Recursion abstracts away state into the call stack.</p>
<h3 id="definition-1">Definition</h3>
<p>Where the invoked functions are &lsquo;stacked&rsquo; in an order they were called.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">countDown</span>(<span style="color:#a6e22e">num</span>) {
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">string</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">num</span>;
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">num</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">string</span>;
  } <span style="color:#66d9ef">else</span> {
    <span style="color:#a6e22e">string</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">countDown</span>(<span style="color:#a6e22e">num</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">string</span>;
}

<span style="color:#a6e22e">countDown</span>(<span style="color:#ae81ff">3</span>);
</code></pre></div><h3 id="behavior">Behavior</h3>
<p>How does the Call Stack behave while a recursive algorithm is running?</p>
<ul>
<li>countDown(3) &gt; string = &lsquo;3&rsquo;;</li>
<li>countDown(2) &gt; string = &lsquo;2&rsquo;;</li>
<li>countDown(1) &gt; string = &lsquo;1&rsquo;;</li>
<li>countDown(0) &gt; string = &lsquo;0&rsquo;;</li>
</ul>
<h2 id="debugging-steps">Debugging Steps</h2>
<ol>
<li>Identify the smallest piece of the data that your function needs to handle</li>
<li>Write the function to handle this case and only this case</li>
<li>Identify what will make the function need to continue</li>
<li>Once identified, make the recursive call</li>
<li>Accumulate the return</li>
</ol>
<h2 id="applications-of-recursion">Applications of Recursion</h2>
<h3 id="flatten-nested-data">Flatten Nested Data</h3>
<h3 id="all-combinations">All Combinations</h3>
<h3 id="tree-traversal">Tree Traversal</h3>
<h2 id="identify-appropriate-usage-of-recursion">Identify Appropriate Usage of Recursion</h2>
<ul>
<li>
<p>Identify the base case of a recursive algorithm/strategy.</p>
</li>
<li>
<p>Identify the recursive case of a recursive algorithm/strategy.</p>
</li>
<li>
<p>Understand the relationship between the execution contexts that come to exist during a recursive process.</p>
</li>
<li>
<p>Read, write, and understand recursive algorithms.</p>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Twitter Clone</title>
            <link>https://haleyjung.github.io/posts/2022/01/twitter-clone/</link>
            <pubDate>Sat, 29 Jan 2022 23:31:33 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/twitter-clone/</guid>
            <description>Cloning Twitter using jQuery &amp;amp; NodeJS Goal The goal of the Twitter clone project was to create a single page that generates live user feeds. I used jQuery to create HTML elements and functions to make them dynamic.
Wireframe I began with drawing various wireframes to organize the structure of the overall layout and individual components. The first wireframe was a rough design to indicate the overall layout that was going to be created using CSS Grid.</description>
            <content type="html"><![CDATA[<h1 id="cloning-twitter-using-jquery--nodejs">Cloning Twitter using jQuery &amp; NodeJS</h1>
<h2 id="goal">Goal</h2>
<p>The goal of the Twitter clone project was to create a single page that generates live user feeds. I used jQuery to create HTML elements and functions to make them dynamic.</p>
<h2 id="wireframe">Wireframe</h2>
<p>I began with drawing various wireframes to organize the structure of the overall layout and individual components. The first wireframe was a rough design to indicate the overall layout that was going to be created using CSS Grid. I then drew the wireframe for each component, such as the header, side bar, and main contents. This helped to plan the minimum number of div to contain particular elements.</p>
<h2 id="user-interface--user-experience">User Interface &amp; User Experience</h2>
<p>Using jQuery I created the functions to perform the following:</p>
<ul>
<li>Generate every users' posts on the home page</li>
<li>Click the username to show only that user&rsquo;s feeds</li>
<li>Create a friend list where a username can be clicked and the page renders that user&rsquo;s live feeds</li>
<li>Show the number of characters when a user types in the message box</li>
<li>Use Timeago.js to indicate convert the time a feed was posted to a more readable text</li>
<li>Use jQuery UI library</li>
</ul>
<p>Then with CSS:</p>
<ul>
<li>CSS Grid</li>
<li>Margin and padding for layout</li>
<li><code>@media</code> for a responsive page</li>
<li><code>@keyframes</code> for animation</li>
<li>Sticky header and side bar</li>
<li><code>display:flex</code> on the parent element that contains the div I want</li>
<li>Scroll manipulation</li>
<li><code>:root</code> to create custom color var</li>
<li>Custom font</li>
<li>Icon design with <code>:hover</code></li>
<li>Button design with box shadow and opacity manipulation</li>
</ul>
<h2 id="css">CSS</h2>
<h3 id="css-functions">CSS Functions</h3>
<ul>
<li>attr()</li>
<li>calc()</li>
<li>conic-gradient()</li>
<li>counter()</li>
<li>cubic-bezier()</li>
<li>hsl()</li>
<li>hsla()</li>
<li>linear-gradient()</li>
<li>max()</li>
<li>min()</li>
<li>radial-gradient()</li>
<li>repeating-conic-gradient()</li>
<li>repeating-linear-gradient()</li>
<li>rgb()</li>
<li>rgba()</li>
<li>var()</li>
</ul>
<h3 id="css-selections">CSS Selections</h3>
<ul>
<li>.class</li>
<li>.class1.class2</li>
<li>.class .class2</li>
<li>#id</li>
<li>
<ul>
<li></li>
</ul>
</li>
<li>a[href^=&ldquo;https&rdquo;]</li>
<li>a[href$=&quot;.pdf&quot;]</li>
<li>a[href*=&ldquo;substring&rdquo;]</li>
<li>a:active</li>
<li>a:visited</li>
<li>p::after</li>
<li>p::before</li>
<li>input:checked</li>
<li>input:default</li>
<li>input:disabled</li>
<li>a:hover</li>
<li>:root</li>
<li>::selection</li>
</ul>
<p>&hellip;etc.</p>
<h2 id="debugging">Debugging</h2>
<h3 id="duplicate-tweets-are-generated">Duplicate tweets are generated</h3>
<p>When I press the &lsquo;Update Feed&rsquo; button, duplicate tweets were generated. This happened because when the page loads, an initial set of tweets were generated. These remained on the page when the button was clicked to generate the new tweets. The solution was to remove the initial set of tweets when the new tweets were generated. I used <code>$(&quot;.tweet&quot;).remove();</code> to remove the existing tweets before invoking the render feed function.</p>
<h3 id="showing-only-the-clicked-usernames-tweets">Showing only the clicked username&rsquo;s tweets</h3>
<p><code>.remove()</code> was also useful for refactoring the render feed function so that it passes a user input when a username click event occurred.</p>
<h2 id="clean-code">Clean Code</h2>
<ul>
<li>Create resuable helpful functions</li>
<li>Factor out common texts</li>
</ul>
<h2 id="references">References</h2>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout">CSS Grid Layout</a></p>
]]></content>
        </item>
        
        <item>
            <title>CSS Grid Layout</title>
            <link>https://haleyjung.github.io/posts/2022/01/css-grid-layout/</link>
            <pubDate>Fri, 28 Jan 2022 22:52:16 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/css-grid-layout/</guid>
            <description>CSS Grid Layout is great for creating a responsive web page layout.
We can also define an area by giving it a name and then specify the location of that area in the value of the grid-template-areas property, such as:
 header footer sidebar content  The grid-area property can be assigned to a class:
.header { grid-area: hd; } .footer { grid-area: ft; } .content { grid-area: main; } .</description>
            <content type="html"><![CDATA[<p>CSS Grid Layout is great for creating a responsive web page layout.</p>
<p>We can also define an area by giving it a name and then specify the location of that area in the value of the grid-template-areas property, such as:</p>
<ul>
<li>header</li>
<li>footer</li>
<li>sidebar</li>
<li>content</li>
</ul>
<p>The grid-area property can be assigned to a class:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">header</span> {
    <span style="color:#66d9ef">grid-area</span>: hd;
}
.<span style="color:#a6e22e">footer</span> {
    <span style="color:#66d9ef">grid-area</span>: ft;
}
.<span style="color:#a6e22e">content</span> {
    <span style="color:#66d9ef">grid-area</span>: main;
}
.<span style="color:#a6e22e">sidebar</span> {
    <span style="color:#66d9ef">grid-area</span>: sd;
}
</code></pre></div><p>Then the entire layout gets created in the grid container:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;wrapper&#34;</span>&gt;
    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;header&#34;</span>&gt;Header&lt;/<span style="color:#f92672">div</span>&gt;
    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sidebar&#34;</span>&gt;Sidebar&lt;/<span style="color:#f92672">div</span>&gt;
    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;content&#34;</span>&gt;Content&lt;/<span style="color:#f92672">div</span>&gt;
    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;footer&#34;</span>&gt;Footer&lt;/<span style="color:#f92672">div</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">wrapper</span> {
    <span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">grid</span>;
    <span style="color:#66d9ef">grid-template-columns</span>: <span style="color:#a6e22e">repeat</span>(<span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">1</span>fr);
    <span style="color:#66d9ef">grid-auto-rows</span>: <span style="color:#a6e22e">minmax</span>(<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>, <span style="color:#66d9ef">auto</span>);
    <span style="color:#66d9ef">grid-template-areas</span>:
      <span style="color:#e6db74">&#34;hd hd hd hd   hd   hd   hd   hd   hd&#34;</span>
      <span style="color:#e6db74">&#34;sd sd sd main main main main main main&#34;</span>
      <span style="color:#e6db74">&#34;ft ft ft ft   ft   ft   ft   ft   ft&#34;</span>;
}
</code></pre></div><h2 id="references">References</h2>
<p><a href="https://css-tricks.com/snippets/css/complete-guide-grid/">House, Chris. &ldquo;A Complete Guide to Grid&rdquo;, CSS-TRICKS, May 12, 2021 (Updated on November 9, 2021)</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Grid_Template_Areas">&ldquo;Grid template areas&rdquo;, MDN Web Docs</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Realizing_common_layouts_using_CSS_Grid_Layout">&ldquo;Realizing common layouts using CSS Grid Layout&rdquo;, MDN Web Docs</a></p>
]]></content>
        </item>
        
        <item>
            <title>Prototype &amp; Class Patterns</title>
            <link>https://haleyjung.github.io/posts/2022/01/prototype-class-patterns/</link>
            <pubDate>Thu, 27 Jan 2022 07:29:36 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/prototype-class-patterns/</guid>
            <description>Prototype Chains  A mechanism for making objects that resemble other objects. Makes one object behave as if it has the same properties of another object by delegating its failed property lookups to that other object at lookup time. Prototype chains make it possible for many child objects to all reflect the properties of one parent object. We can use a prototype object to store all the shared methods and make all our instance objects delegrate to that prototype object, rather than copying all the methods references over.</description>
            <content type="html"><![CDATA[<h2 id="prototype-chains">Prototype Chains</h2>
<ul>
<li>A mechanism for making objects that resemble other objects.</li>
<li>Makes one object behave as if it has the same properties of another object by delegating its failed property lookups to that other object at lookup time.</li>
<li>Prototype chains make it possible for many child objects to all reflect the properties of one parent object.</li>
<li>We can use a prototype object to store all the shared methods and make all our instance objects delegrate to that prototype object, rather than copying all the methods references over.</li>
<li>Prototypal and Pseudoclassical instantiation patterns rely on prototype chains for method sharing.</li>
</ul>
<h3 id="define-a-lookup">Define a lookup</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">test</span> <span style="color:#f92672">=</span> {<span style="color:#a6e22e">a</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>};
<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">test</span>.<span style="color:#a6e22e">a</span>);
</code></pre></div><ul>
<li><code>test.a</code> is a look up for the key <code>a</code></li>
<li>The value of <code>a</code> found in the object is <code>1</code></li>
<li>The value <code>1</code> is provided back as the result of the <strong>property lookup operation</strong>.</li>
<li>The found value is sent as an output to the logging system.</li>
</ul>
<h2 id="copying-properties-1-extend">Copying Properties 1: <code>extend()</code></h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">test</span> <span style="color:#f92672">=</span> {<span style="color:#a6e22e">a</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>};
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">copiedTest</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">extend</span>({}, <span style="color:#a6e22e">test</span>);
</code></pre></div><p>A helper function <code>extend()</code> iterates over the properties and copies them.</p>
<p>The copying happens at just one moment during the program&rsquo;s execution. So if the original variable <code>test</code> adds another property <em>after</em> <code>copiedTest</code> extended the properties, the new property won&rsquo;t be found in <code>copiedTest</code>.</p>
<h2 id="copying-properties-2-objectcreate">Copying Properties 2: <code>Object.create()</code></h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">test</span> <span style="color:#f92672">=</span> {<span style="color:#a6e22e">a</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>};
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">linkedToTest</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">extend</span>({}, <span style="color:#a6e22e">test</span>);
</code></pre></div><p>Rather than copying the properties, <code>Object.create()</code> method creates some linkage to the original object.</p>
<p>Whenever a requested property cannot be found in <code>linkedToTest</code>, <code>test</code> is used as a fallback source for properties.</p>
<p>Unlike <code>extend()</code>, if the original variable <code>test</code> gets modified and includes a new property, <code>linkedToTest</code> will return that new property: i.e, the failed local lookup results in a fall through lookup on the prototype object.</p>
<h2 id="the-object-prototype">The Object Prototype</h2>
<p>A top-level object that every JavaScript object delegates to where all the most basic methods are provided. The object prototype provides the shared properties of all objects.</p>
<h2 id="object-prototype-methods">Object Prototype Methods</h2>
<h3 id="tostring"><code>.toString</code></h3>
<p>Every object has a <code>.toString</code> method on it. Using <code>.toString</code> on an object will allow us to access a function that cna do teh appropriate work. We can then call it and the object we initiated the property lookup on will have appeared to the left of the dot at call time: <code>linkedToTest.toString()</code></p>
<h3 id="constructor"><code>.constructor</code></h3>
<p>Another useful properties is <code>.constructor</code>, which makes it easy to tell what function was used to create a cretain object. When we ask an object about its <code>.constructor</code>, the object most likely doesn&rsquo;t have a local <code>.constructor</code> property, so the prototype chain gets consulted. The <code>.constructor</code> property on the object prototype points to the constructor function for making objects, so that object is the result.</p>
<h3 id="hasownproperty"><code>.hasOwnProperty</code></h3>
<h2 id="the-array-prototype">The Array Prototype</h2>
<p>Arrays are stored in another prototype object called <strong>the array prototype</strong>. It has its own version of some standard methods like <code>.toString</code>, <code>.slice</code>, etc. The array prototype delegates in turn to the object prototype so that the non-unique aspects of arrays can be inherited from the object constructor and not every method will need to be reimplemented for arrays.</p>
<h2 id="prototypal-pattern">Prototypal Pattern</h2>
<p>Function sharing via prototype delegation is the very goal of the prototypal pattern.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// 1. A function for making instances
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Car</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">loc</span>) {
  <span style="color:#75715e">// 2. Object.create --&gt; creating a new instance object
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// 3. (Car.methods) --&gt; a delegation from the new object to some prototype
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> Object.<span style="color:#a6e22e">create</span>(<span style="color:#a6e22e">Car</span>.<span style="color:#a6e22e">methods</span>);
  <span style="color:#75715e">// 4. obj.loc = loc --&gt; some logic for augmenting the new object with
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// the properties that make it unique from other objects of the same class
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">loc</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">loc</span>;
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
};

<span style="color:#a6e22e">Car</span>.<span style="color:#a6e22e">methods</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">move</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>() {
    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">loc</span><span style="color:#f92672">++</span>;
  }
};
</code></pre></div><p><strong>Official conventions to support the protypal pattern</strong></p>
<p><strong>What&rsquo;s common?</strong></p>
<p>The building of a holder object for methods and attaching it as a property of the class function is common, so this gets done automatically.</p>
<p>Whenever any function gets created, it will have an object attached to it to use as a container for methods just in case you plan on using that function to build instances of a class.</p>
<p><strong>The Default Object: <code>.prototype</code></strong></p>
<p>The default object that comes with every function is sotred at the key <code>.prototype</code>.</p>
<p>Below is a refactoring of the code in step 1 to make usre of this free property.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Car</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">loc</span>) {
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> Object.<span style="color:#a6e22e">create</span>(<span style="color:#a6e22e">Car</span>.<span style="color:#a6e22e">prototype</span>);
  <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">loc</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">loc</span>;
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
};

<span style="color:#75715e">// Since the prototype object is given
</span><span style="color:#75715e">// we don&#39;t need to build this object
</span><span style="color:#75715e">// we can just add to it using the assignment operation
</span><span style="color:#75715e"></span><span style="color:#a6e22e">Car</span>.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">move</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> () {
    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">loc</span><span style="color:#f92672">++</span>;
};
</code></pre></div><p>For <code>var Car = function(loc) {...};</code>:</p>
<ol>
<li>Instead of <code>.method</code>, we can now use the provided container object, <code>.prototype</code></li>
<li>The <code>obj</code> is created and is delegated to the prototype object of <code>Car</code>, the function object.
* This means any failed lookups on <code>obj</code> will fall through to <code>Function.prototype</code>.
* When <code>Car</code> runs, it will <strong>create objects</strong> that delegate failed lookups to <code>Car.prototype</code>.
* <code>Car</code>&rsquo;s prototype is <code>Car.prototype</code>.</li>
</ol>
<p><strong>.constructor</strong></p>
<p>Every <code>.prototype</code> object has a <code>.constructor</code> property pointing back to the function it came attached to. So in the example code above, <code>log(Car.prototype.constructor)</code> is the <code>Car</code> function itself.</p>
<p><code>.constructor</code> helps to figure out which constructor function built a certain object.</p>
<p><strong>.instanceof Operator</strong></p>
<p><code>instanceof</code> operator works by checking to see if the right operand&rsquo;s <code>.prototype</code> object can be found anywhere in the left operand&rsquo;s prototype chain. This does not work when the code is written in the <strong>functional class style</strong>.</p>
<p>e.g. <code>log(varName instanceof Car)</code></p>
<h2 id="pseudoclassical-class-instantiation-pattern">Pseudoclassical Class Instantiation Pattern</h2>
<ul>
<li>Pseudoclassical Class Pattern tries to resemble the class systems of other languages by adding a thin layer of syntactic conveniences.</li>
<li>i.e. Pseudoclassical pattern is a thin layer of syntactic convenience on top of the prototypal pattern.</li>
<li>We call a function with the keyword <code>new</code> in front of it to design a class in the pseudoclassical style.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Car</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">loc</span>) {
  <span style="color:#75715e">// this = Object.create(Car.prototype); --&gt; momentary*
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">loc</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">loc</span>; <span style="color:#75715e">// got rid of obj var so the provided object, this, can be used
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// return this --&gt; momentary*
</span><span style="color:#75715e"></span>};

<span style="color:#a6e22e">Car</span>.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">move</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> () {
    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">loc</span><span style="color:#f92672">++</span>;
};

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ben</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Car</span>(<span style="color:#ae81ff">9</span>); <span style="color:#75715e">// because of &#39;new&#39; keyword
</span><span style="color:#75715e">// *the interpreter momentarily inserts the two lines above
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ben</span>.<span style="color:#a6e22e">move</span>();
</code></pre></div><h2 id="two-distinct-sections">Two Distinct Sections</h2>
<p>Every pseudoclassical, prototypal, and functional-shared class has two distinct sections.</p>
<p><strong>Section I</strong></p>
<p>Specifying how all the instances of a class should be familiar.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">Car</span>.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">move</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() { <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">loc</span><span style="color:#f92672">++</span>; };
<span style="color:#75715e">// Similarities are stored as properties on the prototype.
</span></code></pre></div><p><strong>Section II</strong></p>
<p>Specifying how each instance should be different from all the others.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Car</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">loc</span>) {
  <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">loc</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">loc</span>;
  <span style="color:#75715e">// takes place inside the body of the constructor function
</span><span style="color:#75715e"></span>};
</code></pre></div><h2 id="patterns-summary">Patterns Summary</h2>
<h3 id="functional-pattern"><strong>Functional Pattern</strong></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Car</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">loc</span>) {
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {<span style="color:#a6e22e">loc</span><span style="color:#f92672">:</span><span style="color:#a6e22e">loc</span>};
  <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">move</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() { <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">loc</span><span style="color:#f92672">++</span>; };
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
};

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">redCar</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Car</span>(<span style="color:#ae81ff">1</span>);
<span style="color:#a6e22e">redCar</span>.<span style="color:#a6e22e">move</span>();
</code></pre></div><ul>
<li>Has a class that is easy to read and explain</li>
<li>But, a new method is created for every instance</li>
<li>If I won&rsquo;t be creating thousands of instances, functional pattern is great for most classes</li>
<li>This also avoids using the keyword <code>this</code>, which could cause confusion about the value it&rsquo;s binding to</li>
</ul>
<h3 id="pseudoclassical-pattern"><strong>Pseudoclassical Pattern</strong></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Car</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">loc</span>) {
  <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">loc</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">loc</span>;
};
<span style="color:#a6e22e">Car</span>.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">move</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(){ <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">loc</span><span style="color:#f92672">++</span>; };

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">redCar</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Car</span>(<span style="color:#ae81ff">1</span>);
<span style="color:#a6e22e">redCar</span>.<span style="color:#a6e22e">move</span>();
</code></pre></div><ul>
<li>While the code looks cleaner, there&rsquo;s greater complexity</li>
<li>But, it&rsquo;s deep-rooted and widely used in the JavaScript community</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Functional Classes</title>
            <link>https://haleyjung.github.io/posts/2022/01/functional-classes/</link>
            <pubDate>Wed, 26 Jan 2022 11:20:29 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/functional-classes/</guid>
            <description>Decorator Pattern var Car = function (loc) { var obj = { loc: loc }; ob.mov = function() { // Decorator pattern: creates a new function for every function call  obj.loc++; }; }; var amy = Car(1); amy.move(); var ben = Car(9); ben.move(); Functional Class Pattern with Shared Methods &amp;hellip;or Functional-Shared Pattern
var Car = function (loc) { var obj = { loc: loc }; ob.mov = move; return obj; }; var move = function() { this.</description>
            <content type="html"><![CDATA[<h2 id="decorator-pattern">Decorator Pattern</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Car</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">loc</span>) {
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">loc</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">loc</span>
  };
  <span style="color:#a6e22e">ob</span>.<span style="color:#a6e22e">mov</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() { <span style="color:#75715e">// Decorator pattern: creates a new function for every function call
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">loc</span><span style="color:#f92672">++</span>;
  };
};

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">amy</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Car</span>(<span style="color:#ae81ff">1</span>);
<span style="color:#a6e22e">amy</span>.<span style="color:#a6e22e">move</span>();
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ben</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Car</span>(<span style="color:#ae81ff">9</span>);
<span style="color:#a6e22e">ben</span>.<span style="color:#a6e22e">move</span>();
</code></pre></div><h2 id="functional-class-pattern-with-shared-methods">Functional Class Pattern with Shared Methods</h2>
<p>&hellip;or Functional-Shared Pattern</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Car</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">loc</span>) {
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">loc</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">loc</span>
  };
  <span style="color:#a6e22e">ob</span>.<span style="color:#a6e22e">mov</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">move</span>;
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">obj</span>;
};
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">move</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
  <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">loc</span><span style="color:#f92672">++</span>; <span style="color:#75715e">// this will be the obj next to the calltime dot, so amy or ben
</span><span style="color:#75715e"></span>};
<span style="color:#75715e">// another way: using jQuery to copy properties for &#39;move&#39;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// extend(obj, {move: move});
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">amy</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Car</span>(<span style="color:#ae81ff">1</span>);
<span style="color:#a6e22e">amy</span>.<span style="color:#a6e22e">move</span>();
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ben</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Car</span>(<span style="color:#ae81ff">9</span>);
<span style="color:#a6e22e">ben</span>.<span style="color:#a6e22e">move</span>();
</code></pre></div><blockquote>
<p>Any construct that is capable of producing a fleet of similar instances conforming to some interface = a functional class</p>
</blockquote>
<h2 id="class">Class</h2>
<p>A class is any construct capable of producing a fleet of similar objects that all conform to some interface.</p>
<p>Name the class with a capitalized noun, like a proper noun for categorizing.</p>
<h2 id="constructor">Constructor</h2>
<p>The functions that produce these objects are called <strong>constructors</strong>. Their job is to construct objects that qualify as members of the class: <code>Car()</code></p>
<h2 id="instance-of-the-class">Instance of the class</h2>
<p>The object that gets returned is called an <em>instance</em> of the class: <code>amy</code> or <code>ben</code>.</p>
<h2 id="instantiating">Instantiating</h2>
<p>The braces of <code>Car()</code>, which calls a constructor function to build an instance is called &lsquo;instantiating.&rsquo;</p>
]]></content>
        </item>
        
        <item>
            <title>JavaScript: this</title>
            <link>https://haleyjung.github.io/posts/2022/01/javascript-this/</link>
            <pubDate>Tue, 25 Jan 2022 12:07:56 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/javascript-this/</guid>
            <description>What is this?  An identifier for values Designed to support object oriented programming  Binding When a method or constructor function is invoked, this binds to a likely-focal object, so that we can easily access that object.
this is not bound to&amp;hellip; var fn = function (a, b) { log(this); // what is this NOT bound to? };   The function object: {f}
  An instance of the function it appears within: {}</description>
            <content type="html"><![CDATA[<h2 id="what-is-this">What is <code>this</code>?</h2>
<ul>
<li>An identifier for values</li>
<li>Designed to support <strong>object oriented programming</strong></li>
</ul>
<h2 id="binding">Binding</h2>
<p>When a method or constructor function is invoked, <code>this</code> binds to a <strong>likely-focal object</strong>, so that we can easily access that object.</p>
<h3 id="this-is-not-bound-to"><code>this</code> is not bound to&hellip;</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">fn</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {
  <span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">this</span>); <span style="color:#75715e">// what is this NOT bound to?
</span><span style="color:#75715e"></span>};
</code></pre></div><ol>
<li>
<p>The function object: <code>{f}</code></p>
</li>
<li>
<p>An instance of the function it appears within: <code>{}</code></p>
</li>
<li>
<p>When appearing between the curly braces of an object literal</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">fn</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {
    <span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">this</span>);
  }
};

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">obj2</span> <span style="color:#f92672">=</span> {<span style="color:#a6e22e">method</span><span style="color:#f92672">:</span><span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">fn</span>};

<span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">fn</span>(<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>); <span style="color:#75715e">// invoke the function
</span><span style="color:#75715e">// related to point 4:
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// with the values for parameters given,
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// will we get {a:3, b:4} when `this` is logged?
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// No. The execution context is never in object format.
</span></code></pre></div></li>
<li>
<p>An execution context/scope of the function call</p>
</li>
</ol>
<h3 id="this-is-bound-to"><code>this</code> is bound to&hellip;</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">fn</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {
    <span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">this</span>);
  }
}

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">obj2</span> <span style="color:#f92672">=</span> {<span style="color:#a6e22e">method</span><span style="color:#f92672">:</span><span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">fn</span>}

<span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">fn</span>(<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>); <span style="color:#75715e">// HERE! `this` = obj {} = focal object
</span></code></pre></div><p><code>this</code> is bound to <code>obj</code>, which is to the <strong>left of the calltime dot</strong> where the <strong>containing function is called</strong>.</p>
<p>So, the operative determiner of which object is referred to as <code>this</code> has to do with a <strong>function invocation</strong>.</p>
<h2 id="usage-as-a-parameter">Usage as a parameter</h2>
<h3 id="method-invocation">Method Invocation</h3>
<p>Method invocation rule is the most common binding pattern for <code>this</code>.</p>
<p>To call <code>fn</code> as a method, we first add it as a property of an object: <code>r.method = fn</code></p>
<p>When we call the function, we can do so right after a dot access on that object, at the key where that function is stored as a property: <code>r.method(g, b)</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">fn</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">one</span>, <span style="color:#a6e22e">two</span>) {
  <span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">this</span>, <span style="color:#a6e22e">one</span>, <span style="color:#a6e22e">two</span>);
};

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">r</span> <span style="color:#f92672">=</span> {};
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">g</span> <span style="color:#f92672">=</span> {};
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">=</span> {};

<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">method</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fn</span>;
<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">method</span>(<span style="color:#a6e22e">g</span>,<span style="color:#a6e22e">b</span>);

<span style="color:#a6e22e">fn</span>(<span style="color:#a6e22e">g</span>, <span style="color:#a6e22e">b</span>);
</code></pre></div><h4 id="focal-object"><strong>Focal Object</strong></h4>
<p>This means, in addition to the two values being passed, <code>g</code> and <code>b</code>, which get <strong>bound to the positional parameters</strong> <code>one</code> and <code>two</code>, we are also passing a <strong>third parameter</strong> by calling the function on a <strong>dot access property lookup</strong>.</p>
<p>To find the <strong>focal object</strong>, look at the <strong>left of the dot</strong> or bracket in method invocation: e.g. <code>r['method'](g,b)</code> In both of these cases, the focal object is the variable <code>r</code>.</p>
<h4 id="global-object"><strong>Global Object</strong></h4>
<p>If there&rsquo;s no dot specifying a binding for <code>this</code>, it gets bound to the <strong>global object</strong> as a default value.</p>
<p>To override the default binding to the global object, we can use <code>.call</code> method. This will also disregard the &ldquo;left of the dot&rdquo; rule and just pass in any value we want to get bound to <code>this</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">fn</span>.<span style="color:#a6e22e">call</span>(<span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">g</span>, <span style="color:#a6e22e">b</span>);
</code></pre></div><p>We pass one extra value at the beginning of the argument list <code>r</code> which will get bound to the parameter <code>this</code> as long as that function is running.</p>
<p><strong>Remember</strong>: Only the function&rsquo;s <em>calltime moment</em> influences how <code>this</code> gets bound. For instance, <code>setTimeout(r.method, 1000)</code> where <code>var setTimeout = function(cb, ms) { ... };</code>: <code>this</code> cannot be <code>r</code> because its method is not being called, but <code>setTimeout()</code>. Considering that <code>cb</code> (a callback function) is also an undefined parameter, <code>this</code> will be bound to its default value, the global object.</p>
<h4 id="setting-this-myself"><strong>Setting <code>this</code> myself</strong></h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">setTimeout</span>(<span style="color:#66d9ef">function</span>() {
  <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">method</span>(<span style="color:#a6e22e">g</span>, <span style="color:#a6e22e">b</span>); <span style="color:#75715e">// r = this, one = g, two = b
</span><span style="color:#75715e"></span>}, <span style="color:#ae81ff">1000</span>);
</code></pre></div><h3 id="new-amethodb-c"><strong>new a.method(b, c);</strong>*</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">method</span>(<span style="color:#a6e22e">g</span>, <span style="color:#a6e22e">b</span>);
</code></pre></div><p>Calling a function with <code>new</code> keyword affects how <code>this</code> receives its binding while <code>.method</code> is running. In a case like this, <code>this</code> will be bound to an <strong>entirely new object</strong> which gets created automatically as an appearance of <code>new</code>.</p>
<h2 id="summary">Summary</h2>
<h3 id="how-to-determine-what-this-refers-to">How to determine what <code>this</code> refers to</h3>
<ol>
<li>Scan outward from <code>this</code> and look for the closest enclosing braces that represent a function body (ignore braces for object literals and <code>if</code> blocks).</li>
<li>After finding the function definition where <code>this</code> appears, look for <strong>where the function is called</strong>. Use the <strong>call stack</strong> to <strong>down one step</strong> in the debugger.</li>
<li>Inspect the syntax of how the function is being called.
<ul>
<li>There are <strong>five</strong> patterns for the appearance of <code>this</code>
<ul>
<li>Global Reference: <code>log(this)</code></li>
<li>Free Function Invocation: <code>fun();</code></li>
<li><code>.call</code>/<code>.apply</code> Invocation: <code>fun.call(obj);</code>, <code>fun.apply(obj);</code></li>
<li>Construction Mode: <code>new fun();</code></li>
<li>Method Invocation: <code>obj.method();</code></li>
</ul>
</li>
<li>Each pattern is associated with a specific rule. The interpreter uses this to determine what <code>this</code> gets bound to inside that function for that one invocation.</li>
</ul>
</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>IIFE &amp; Scopes</title>
            <link>https://haleyjung.github.io/posts/2022/01/iife-scopes/</link>
            <pubDate>Sat, 22 Jan 2022 11:10:24 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/iife-scopes/</guid>
            <description>Function Expression vs. Function Declaration The function name can be omitted in function expressions to create anonymous functions while function declarations (statements) require names.
A function expression can be used as an IIFE (Immediately Invoked Function Expression).
//Function Expression let variableName = function() { statements; }; // -&amp;gt; ends with a semicolon because it&amp;#39;s an assignment statement; not part of the function syntax  //Function Declaration function name([param[, param,[..., param]]]) { statements; } Definition of IIFE IIFE, also known as Self-Executing Anonymous Function, is a JavaScript function that runs as soon as it is defined.</description>
            <content type="html"><![CDATA[<h2 id="function-expression-vs-function-declaration">Function Expression vs. Function Declaration</h2>
<p>The <em>function name</em> can be <strong>omitted</strong> in function <strong>expressions</strong> to create <strong>anonymous functions</strong> while function declarations (statements) require names.</p>
<p>A function expression can be used as an IIFE (Immediately Invoked Function Expression).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//Function Expression
</span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">variableName</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
  <span style="color:#a6e22e">statements</span>;
}; <span style="color:#75715e">// -&gt; ends with a semicolon because it&#39;s an assignment statement; not part of the function syntax
</span><span style="color:#75715e"></span>
<span style="color:#75715e">//Function Declaration
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">name</span>([<span style="color:#a6e22e">param</span>[, <span style="color:#a6e22e">param</span>,[..., <span style="color:#a6e22e">param</span>]]]) {
   <span style="color:#a6e22e">statements</span>;
}
</code></pre></div><h2 id="definition-of-iife">Definition of IIFE</h2>
<p>IIFE, also known as <strong>Self-Executing Anonymous Function</strong>, is a JavaScript function that runs as soon as it is defined.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">(<span style="color:#66d9ef">function</span> () { <span style="color:#75715e">// -&gt; first part
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">statements</span>
})(); <span style="color:#75715e">// -&gt; second part
</span></code></pre></div><p>Using an arrow function to define an IIFE looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">(() =&gt; {
    <span style="color:#a6e22e">statements</span>
})();
</code></pre></div><h2 id="purpose">Purpose</h2>
<p>When a function is defined, the JavaScript engine adds the function to the <code>window</code> <strong>global object</strong>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(window.<span style="color:#a6e22e">funcName</span>);
</code></pre></div><p>When a variable is declared outside of a function using <code>var</code>, it is also added to the global object.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(window.<span style="color:#a6e22e">varName</span>);
</code></pre></div><p>It&rsquo;s important to limit the number of global variables. The application may include many global objects, which can lead to the script using the memory inefficiently, name collisions, and ultimately polluting the global objects.</p>
<p>Because IIFE invokes anonymous function expression immediately <em>without using an identifier</em>, a <strong>closure</strong> can be used without polluting the current scope.</p>
<h2 id="use-cases">Use Cases</h2>
<ul>
<li>Use IIFE pattern instead of a function declaration or a function expression if there are initiation code that won&rsquo;t be used again.</li>
</ul>
<p>The following <strong>firstVar</strong> and <strong>secondVar</strong> will be discarded after the function is executed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">(<span style="color:#66d9ef">function</span> () {
  <span style="color:#75715e">// some initiation code
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">firstVar</span>;
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">secondVar</span>;
})();
</code></pre></div><h2 id="design-pattern">Design Pattern</h2>
<p>IIFE&rsquo;s design pattern consists of two parts:</p>
<ol>
<li><strong>First part</strong> is an anonymous function with <em>lexical scope enclosed</em> within the <code>Grouping Operator ()</code>.
<ul>
<li>This prevents accessing variables within the IIFE idiom as well as polluting the global scope.</li>
</ul>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">(<span style="color:#66d9ef">function</span>() { <span style="color:#a6e22e">statements</span> })
</code></pre></div><ul>
<li>IIFE can be named <code>(function namedIIFE() {})();</code>, but it cannot be invoked again after execution.</li>
</ul>
<ol>
<li><strong>Second part</strong> creates the IIFE <code>()</code>
<ul>
<li>Through this, JS engine will directly interpret the function.</li>
<li>Values defined in <code>()</code> are passed into a function and copied, or &lsquo;locked.&rsquo;</li>
</ul>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">();
</code></pre></div><h2 id="module-pattern">Module Pattern</h2>
<p>IIFE can be used to create private and public variables and methods.</p>
<p>Every JavaScript function creates a new execution context when it is invoked. Because the functions and variables defined within a function may only be accessed inside, not outside in the global scope, invoking a function provides an easy way to create <strong>privacy</strong>.</p>
<h2 id="scopes">Scopes</h2>
<p>Scopes: the set of rules that govern how JavaScript engine can look up a variable by its identifier name and find it.</p>
<h3 id="local-scope">Local Scope</h3>
<p>Other than <strong>global scope</strong>, there is <strong>local scope</strong>, which can be divided into <strong>function scope</strong> and <strong>block scope</strong>.</p>
<h4 id="1-function-scope">(1) Function Scope</h4>
<p>When a variable is declared in a function, it&rsquo;s only visible within that function. It cannot be accessed outside the function.</p>
<p>In the following <code>for</code> loop, <code>var i</code> is function scoped. There is only a single variable called <code>i</code>, and its value changes on each iteration.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
  <span style="color:#a6e22e">it</span>(<span style="color:#e6db74">&#39;has a value of &#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">i</span>, <span style="color:#66d9ef">function</span>() {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;value of i is&#39;</span>, <span style="color:#a6e22e">i</span>);
  });
}
</code></pre></div><h4 id="2-block-scope">(2) Block Scope</h4>
<p>Refers to the area within <code>if</code> and <code>switch</code> conditions or <code>for</code> and <code>while</code> loops.</p>
<p><code>{ }</code> generally is considered as a block.</p>
<p>With ES6, variables can be declared in the block scope with <code>let</code> and <code>const</code>. These only exist within the corresponding block while declaring <code>var</code> within the same scope will be considered as a <strong>function scope</strong>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">foo</span>() {
  <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">true</span>) {
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">first</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;exists in the function scope&#39;</span>;
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">second</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;exists in the block scope&#39;</span>;
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">third</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;exists in the block scope&#39;</span>;
  }
}
</code></pre></div><h3 id="lexical-scope-static-scope">Lexical Scope (Static Scope)</h3>
<p>JavaScript has the lexical scope!</p>
<p>Lexical scope refers to the <strong>children scope</strong> that have access to the <strong>variables defined in the parent scope</strong>.</p>
<blockquote>
<p>&ldquo;The children functions are <em>lexically</em> bound to the <em>execution context</em> of their parents.&rdquo;</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">foo1</span>(){
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">varParentScope1</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;the first var defined in the parent scope&#39;</span>;
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">varParentScope2</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;the second var defined in the parent scope&#39;</span>;
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">varParentScope3</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;the third var defined in the parent scope&#39;</span>;
    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">foo2</span>(){ <span style="color:#75715e">// -&gt; child scope
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">varParentScope1</span>);
        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">varParentScope2</span>);
        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">varParentScope3</span>);
    }
    <span style="color:#a6e22e">foo2</span>();
}

<span style="color:#a6e22e">foo1</span>(); <span style="color:#75715e">// -&gt;  calling the function foo1 to invoke it
</span></code></pre></div><h3 id="dynamic-scope">Dynamic Scope</h3>
<ul>
<li>The mechanism of JavaScript&rsquo;s <code>this</code> keyword is dynamically scoped. But, JavaScript has the <strong>lexical scope</strong>, not the dynamic scope.</li>
<li>Dynamic scope does not concern itself with <em>how and where</em> functions and scopes are <em>declared</em>, but rather <strong>where they are called from</strong>. That means that, the scope chain is based on call-stack, not the nesting of scopes in code.
<ul>
<li><strong>Call-stack</strong>: a mechanism for an interpreter to keep track of its place in a script that calls multiple functions—what function is currently being run and what functions are called from within that function.</li>
</ul>
</li>
</ul>
<h4 id="call-stack-example">Call-stack Example</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">greeting</span>() {
   <span style="color:#75715e">// *---* //
</span><span style="color:#75715e"></span>   <span style="color:#a6e22e">sayHi</span>();
   <span style="color:#75715e">// *---* //
</span><span style="color:#75715e"></span>}
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sayHi</span>() {
   <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Hi!&#34;</span>;
}

<span style="color:#a6e22e">greeting</span>();

<span style="color:#75715e">// *---* //
</span></code></pre></div><ol>
<li>Ignore all functions until it reaches the invocation of <code>greeting()</code></li>
<li>Add <code>greeting()</code> to the call-stack list</li>
<li>Execute all lines of code inside <code>greeting()</code></li>
<li>Get to <code>sayHi()</code> function invocation</li>
<li>Add <code>sayHi()</code> to the call-stack list</li>
<li>Execute all lines of code inside <code>sayHi()</code> until it reaches the end</li>
<li>Return execution to the line that invoked <code>sayHi()</code> and continue executing the rest of <code>greeting()</code></li>
<li>Delete <code>sayHi()</code> from the call-stack list</li>
<li>When <code>greeting()</code> has been fully executed, return to its invoking line to continue invoking the rest of the JavaScript code.</li>
<li>Delete <code>greeting()</code> from the call-stack list.</li>
</ol>
<h2 id="references">References</h2>
<p><a href="https://medium.com/@osmanakar_65575/javascript-lexical-and-dynamic-scoping-72c17e4476dd">Akar, Osman. &ldquo;JavaScript - Lexical and Dynamic Scoping?&rdquo;, Medium, February 12, 2019.</a></p>
<p><a href="https://web.archive.org/web/20171201033208/http://benalman.com/news/2010/11/immediately-invoked-function-expression/#iife">Alman, Ben. &ldquo;Immediately-Invoked Function Expression (IIFE)&rdquo;, Ben Alman. November 15, 2010.</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE">&ldquo;IIFE&rdquo;, MDN Web Docs.</a></p>
<p><a href="https://javascript.info/function-expressions%22">Kantor, Ilya. &ldquo;Function expressions&rdquo;, The Modern JavaScript Tutorial, January 13, 2022.</a></p>
<ul>
<li>An open source JavaScript tutorial that started in 2007!</li>
</ul>
<p><a href="https://www.javascripttutorial.net/javascript-immediately-invoked-function-expression-iife/">&ldquo;JavaScript Immediately Invoked Function Expression&rdquo;, JavaScript Tutorial.</a></p>
<p><a href="https://www.amazon.com/dp/B008VJSPZE?ref=KC_GS_GB_US">Osmani, Addy. &ldquo;Learning JavaScript Design Patterns&rdquo;, O&rsquo;Reilly Media, July 8, 2021.</a></p>
<p><a href="https://medium.com/@allansendagi/dynamic-scope-vs-lexical-scope-in-javascript-ca7d21a6d069">Sendagi, Allan. &ldquo;Dynamic Scope VS Lexical Scope in JavaScript&rdquo;, Medium, March 29, 2020.</a></p>
<p><a href="https://dev.to/sandy8111112004/javascript-introduction-to-scope-function-scope-block-scope-d11">Tsai, Ming-Shiuan. &ldquo;JavaScript: Introduction to Scope (function scope, block scope)&rdquo;, dev.to, November 26, 2018. </a></p>
]]></content>
        </item>
        
        <item>
            <title>Function Call vs Function Invocation</title>
            <link>https://haleyjung.github.io/posts/2022/01/function-call-vs-function-invocation/</link>
            <pubDate>Fri, 21 Jan 2022 10:44:05 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/function-call-vs-function-invocation/</guid>
            <description>Function Call  Directly telling the function to run. The combined process of fully applying the function then invoking it, usually with the added semantic that the code will wait for a return value.  Function Invocation  i.e. Function got executed. Indirectly refers to the calling statement. The process required to schedule the function with its fully bound arguments for execution. Includes pushing arguments onto the stack and transferring the PC to the new address, placing messages/objects/functions/thunks on a queue for later execution or various other RPC systems.</description>
            <content type="html"><![CDATA[<h2 id="function-call">Function Call</h2>
<ul>
<li><strong>Directly</strong> telling the function to run.</li>
<li>The combined process of fully applying the function then invoking it, usually with the added semantic that the code will wait for a return value.</li>
</ul>
<h2 id="function-invocation">Function Invocation</h2>
<ul>
<li>i.e. Function got executed.</li>
<li><strong>Indirectly</strong> refers to the calling statement.</li>
<li>The process required to schedule the function with its fully bound arguments for execution.</li>
<li>Includes pushing arguments onto the stack and transferring the PC to the new address, placing messages/objects/functions/thunks on a queue for later execution or various other RPC systems.</li>
<li>Exact mechanism does not matter. The notion of scheduling for future execution matters.</li>
<li>Invoking requires that the will function execution.</li>
</ul>
<h2 id="client-vs-server-side">Client vs Server Side</h2>
<p>These terms are subjective from the point of view of the current code being written.</p>
<blockquote>
<p>Invoking a function via a RPC call is only invoking it from the client&rsquo;s side. From the server&rsquo;s side the request has a different invocation point, if the function even has any &ldquo;meaning&rdquo; as a function on the server&rsquo;s side.</p>
</blockquote>
<h2 id="javascript">JavaScript</h2>
<ul>
<li>Functions can be invoked without being called.</li>
<li>&ldquo;The code inside the body of the function can be executed without creating an object for the same. It is tied to the global object. When there is no individual object, the value of <code>this</code> (the current/calling object) is associated with the global object.&rdquo;</li>
<li>&ldquo;The major difference between invoking and calling comes in terms of the this object. Calling let&rsquo;s you set the <code>this</code> value whereas invoking just ties it to the global object.&rdquo;</li>
</ul>
<h2 id="other-terms">Other Terms</h2>
<h3 id="execution">Execution</h3>
<ul>
<li>The process of running a code.</li>
<li>Exact method isn&rsquo;t considered. It doesn&rsquo;t matter whether it can be compiled or executed by a computer or not.</li>
</ul>
<h3 id="applyingapplication">Applying/Application</h3>
<ul>
<li>The binding of arguments to the function.</li>
<li>Application can be both partial and complete.</li>
<li>In functional programming, partial application produces another function with less parameters while complete application produces a thunk. <strong>Thunks</strong> are functions with no parameters and can help with <em>lazy evaluation</em>.</li>
</ul>
<h2 id="reference">Reference</h2>
<p><a href="https://stackoverflow.com/questions/18505422/whats-the-difference-between-call-and-invoke/56475412">Stack Overflow 1</a></p>
<p><a href="https://stackoverflow.com/questions/50884893/calling-vs-invoking-a-function#:~:text=The%20difference%20is%20semantic%20and,are%20letting%20something%20run%20it.&amp;text=Here%2C%20you%20are%20invoking%20the,run">Stack Overflow 2</a>%20by%20calling%20it%20directly.)</p>
]]></content>
        </item>
        
        <item>
            <title>DOM</title>
            <link>https://haleyjung.github.io/posts/2022/01/dom/</link>
            <pubDate>Thu, 20 Jan 2022 10:50:59 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/dom/</guid>
            <description>Definition  DOM: Document Object Model An object-based representation of the source HTML document An interface to web pages; an API to the page  Functions  Allows browsers to determine what to render in the viewport Allows JavaScript to manipulate the page&amp;rsquo;s content, structure, and styles  DOM vs. HTML DOM is not HTML. It is an interface to valid HTML documents. They differ from one another for a number of reasons:</description>
            <content type="html"><![CDATA[<h2 id="definition">Definition</h2>
<ul>
<li>DOM: Document Object Model</li>
<li>An object-based representation of the source HTML document</li>
<li>An interface to web pages; an API to the page</li>
</ul>
<h2 id="functions">Functions</h2>
<ul>
<li>Allows browsers to determine what to render in the viewport</li>
<li>Allows JavaScript to manipulate the page&rsquo;s content, structure, and styles</li>
</ul>
<h2 id="dom-vs-html">DOM vs. HTML</h2>
<p>DOM is not HTML. It is an interface to valid HTML documents. They differ from one another for a number of reasons:</p>
<ul>
<li>HTML represents initial page content, and the DOM represents current page content.</li>
<li>DOM is a living model that can be modified by JavaScript. When JavaScript adds, removes, or edits nodes, the DOM becomes different than the HTML.</li>
<li>DOM does not include pseudo-elements.</li>
<li>DOM does include hidden elements (e.g. <code>display: none</code>).</li>
</ul>
<h2 id="critical-rendering-path">Critical Rendering Path</h2>
<ul>
<li>The steps a browser takes from a source HTML document to displaying a styled and interactive page in the viewport
<ol>
<li>The DOM Tree construction
<ul>
<li>A representation of the elements</li>
<li>Node tree: the object structure of the DOM</li>
</ul>
</li>
<li>The CSSOM Tree construction
<ul>
<li>A representation of the styles associated with elements</li>
<li>CSS is considered a <strong>render blocking resource</strong> if it applies to the current device. For instance, if a CSS element is only applied for <code>orientation: landscape</code> and a user is viewing the page in a portrait mode, the element is not considered render blocking.</li>
<li>CSS can also be <strong>script blocking</strong> because CSS has to be constructed for JavaScript to run.</li>
</ul>
</li>
<li>Running JavaScript
<ul>
<li>JavaScript is considered a <strong>parser blocking resource</strong> because the parsing of the HTML document is blocked by JavaScript.</li>
</ul>
</li>
<li>The Render Tree
<ul>
<li>A representation of the HTML elements and their related styles that will be rendered on the page (DOM &amp; CSSOM)</li>
<li>Hidden elements are not part of the render tree</li>
</ul>
</li>
<li>Generating the layout
<ul>
<li>The size of the viewport</li>
<li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;</code></li>
</ul>
</li>
<li>Painting
<ul>
<li>The visible content of the page gets converted to pixels for display on the screen.</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="chrome-devtool">Chrome DevTool</h2>
<p>What we see in DevTools is a close approximation to the DOM, but it is not DOM as it includes additional information such as CSS pseudo-elements (<code>::before</code>, <code>::after</code>).</p>
<p><strong>Performance</strong> tab helps to inspect the Critical Rendering Path in process.</p>
<ul>
<li>Send Request - GET request sent for index.html</li>
<li>Parse HTML and Send Request - Begin parsing of HTML and DOM construction. Send GET request for style.css and main.js</li>
<li>Parse Stylesheet - CSSOM created for style.css</li>
<li>Evaluate Script - Evaluate main.js</li>
<li>Layout - Generate Layout based on meta viewport tag in HTML</li>
<li>Paint - Paint pixels on document</li>
</ul>
<h2 id="references">References</h2>
<p><a href="https://developer.chrome.com/docs/devtools/dom/">Basques, Kayce. &ldquo;Get Started With Viewing and Changing the DOM,&rdquo; Chrome Developers, March 1, 2019.</a></p>
<p><a href="https://developer.chrome.com/docs/devtools/shortcuts/#elements">Basques, Kayce. &ldquo;Elements panel keyboard shortcuts,&rdquo; Chrome Developers, April 29, 2015.</a></p>
<p><a href="https://bitsofco.de/understanding-the-critical-rendering-path/">&ldquo;Understanding the Critical Rendering Path,&rdquo; bitsofcode, January 17, 2017.</a></p>
<p><a href="https://bitsofco.de/what-exactly-is-the-dom/">&ldquo;What, exactly, is the DOM?&rdquo; bitsofcode, November 16, 2018.</a></p>
]]></content>
        </item>
        
        <item>
            <title>Primitive and Non-Primitive Data Types</title>
            <link>https://haleyjung.github.io/posts/2022/01/primitive-and-non-primitive-data-types/</link>
            <pubDate>Wed, 19 Jan 2022 12:53:10 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/primitive-and-non-primitive-data-types/</guid>
            <description>Definitions Data Type There is a variety of data types, such as number, boolean, string, null, undefined, etc.
Primitive Data Type  Numbers Strings Booleans undefined null  Primitives are stored by value.
Every time a new variable is declared using a primitive data type, a new address in memory is created for that value.
let a = 1; let b = a;  a has value of 1, which is a Number, a Primitive data type.</description>
            <content type="html"><![CDATA[<h2 id="definitions">Definitions</h2>
<h3 id="data-type">Data Type</h3>
<p>There is a variety of data types, such as number, boolean, string, null, undefined, etc.</p>
<h3 id="primitive-data-type">Primitive Data Type</h3>
<ul>
<li>Numbers</li>
<li>Strings</li>
<li>Booleans</li>
<li>undefined</li>
<li>null</li>
</ul>
<p>Primitives are stored by <strong>value</strong>.</p>
<p>Every time a new variable is declared using a primitive data type, a new address in memory is created for that value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">a</span>;
</code></pre></div><ul>
<li><code>a</code> has value of 1, which is a Number, a Primitive data type.</li>
<li><code>b</code> has a value of <code>a</code>, which is a Number; however, <code>b</code> is not storing the variable <code>a</code> itself, but the <strong>value of the variable</strong>, which is 1.</li>
<li>Even if the value of <code>a</code> is changed, this will <strong>not</strong> affect the value of <code>b</code>, because it has already stored 1 into its address.</li>
</ul>
<h3 id="non-primitive-data-type">Non-Primitive Data Type</h3>
<ul>
<li>Objects</li>
<li>Arrays</li>
<li>Functions</li>
</ul>
<p>Non-Primitives are stored by <strong>reference</strong>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>];
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">b</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">a</span>;
</code></pre></div><ul>
<li><code>a</code> is referencing the address of the array object [1]</li>
<li><code>b</code> is referencing the address of the variable which is pointing to the address of [1]</li>
<li>Unlike Primitives, if a variable pointing to the same address as another variable is modified, the value stored inside the address itself will be modified, updating the values of both variables.</li>
</ul>
<h2 id="reference">Reference</h2>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures">&ldquo;JavaScript data types and data structures,&rdquo; MDN</a></p>
<p><a href="https://javascript.plainenglish.io/javascript-reviewing-primitive-and-non-primitive-data-types-5bc4ca68c3de">Louie, Benny. &ldquo;JavaScript: Reviewing Primitive and Non-Primitive Data Types</a></p>
]]></content>
        </item>
        
        <item>
            <title>CDN: Content Delivery Networks</title>
            <link>https://haleyjung.github.io/posts/2022/01/cdn-content-delivery-networks/</link>
            <pubDate>Tue, 18 Jan 2022 11:27:23 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/cdn-content-delivery-networks/</guid>
            <description>Definition  CDN is a group of geographically distributed servers that speed up the delivery of web content by caching contents in proxy servers near to the user&amp;rsquo;s physical location. Leads to a faster and high performance of activities such as watching a movie, downloading a software, checking a bank balance, posting on social media, and making a transaction.  Purpose  Users experience a consistent, faster, and high performance web application.</description>
            <content type="html"><![CDATA[<h2 id="definition">Definition</h2>
<ul>
<li>CDN is a group of geographically distributed servers that speed up the delivery of web content by caching contents in proxy servers near to the user&rsquo;s physical location.</li>
<li>Leads to a faster and high performance of activities such as watching a movie, downloading a software, checking a bank balance, posting on social media, and making a transaction.</li>
</ul>
<h2 id="purpose">Purpose</h2>
<ul>
<li>Users experience a consistent, faster, and high performance web application.</li>
<li>Reducing the latency (network congestion) caused by rich web content such as heavy usage of graphics and vidoes.</li>
</ul>
<h2 id="benefits">Benefits</h2>
<ul>
<li>CDN offloads traffic from content servers and improves the web experience.</li>
<li>CDN can improve web security by helping to absorb and mitigate a distributed denial-of-server (DDoS) attack.</li>
</ul>
<h2 id="expansion">Expansion</h2>
<ul>
<li>CDN has grown to include beyond text, graphics, scripts and media files (4K and HD-quality videos too!), such as software downloads, OS updates, documents, portals, ecommerce, live streaming media, on-demand video streaming media, and social media sites.</li>
</ul>
<h2 id="sample-case">Sample case</h2>
<p><strong>Scenario</strong></p>
<p>A user based in New York accessing an ecommerce site hosted in Seoul.</p>
<ul>
<li>CDN would store a cached version of its website content in multiple geographical locations around the world (i.e. PoPs: points of presence).</li>
<li>PoPs contain their own caching servers and are responsible for delivering that content close to the user&rsquo;s location.</li>
<li>The cached contents will remain on the CDN for other user requests in the same geographic area.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Scopes &amp; Closures</title>
            <link>https://haleyjung.github.io/posts/2022/01/scopes-closures/</link>
            <pubDate>Mon, 17 Jan 2022 18:36:49 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/scopes-closures/</guid>
            <description>Lexical Scopes The part of a program where a binding between a variable and value is valid (variables are only available under certain circumstances with different languages having different access rules).
 Describes the regions in my code where I can refer to a variable by name without getting access errors. Defining a function creates a new lexical scope It is a collection of key-value pairs, but is not an object - except the global context object.</description>
            <content type="html"><![CDATA[<h2 id="lexical-scopes">Lexical Scopes</h2>
<p>The part of a program where a binding between a variable and value is valid (variables are only available under certain circumstances with different languages having different access rules).</p>
<ul>
<li>Describes the regions in my code where I can refer to a variable by name without getting access errors.</li>
<li>Defining a function creates a new lexical scope</li>
<li>It is a collection of key-value pairs, but is not an object - except the global context object.</li>
</ul>
<h2 id="global-scope">Global Scope</h2>
<ul>
<li>Bad practice: a variable that has never been declared can be assigned within a lexical scope (i.e. a function) without &lsquo;var,&rsquo; but such variable will be added to the global scope.</li>
</ul>
<h2 id="execution-contexts">Execution Contexts</h2>
<ul>
<li>In-memory data structures for storing variables</li>
<li>Built as the code runs instead of when it&rsquo;s typed</li>
<li>When a program runs, it builds up storage systems for holding variables and their values. These in-memory scope structures are called &ldquo;execution contexts.&rdquo;</li>
<li>It&rsquo;s impossible to return a context from a function or to make a variable refer to a context, or to get an array full of contexts.</li>
</ul>
<h2 id="closure">Closure</h2>
<p>A closure is a pairing of:</p>
<ul>
<li>A function and</li>
<li>A reference to that function&rsquo;s outer scope (lexical environment)</li>
</ul>
<p>A lexical environment is part of every execution context (stack frame) and is a map between identifiers (i.e. local variable names) and values.</p>
<ul>
<li>A function object that retains ongoing access to the variables of the context it was created in (even after the outer function calls it was created within have returned).</li>
<li>In JavaScript, closures are created every time a function is created, at function creation time.</li>
<li>Inner functions have access to the variables of outer functions, but they cannot access arguments object of outer functions.</li>
<li>Inner function does not keep the separate copy of outer variables but it reference outer variables: i.e. value of the outer variables will be changed if you change it using inner function.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>APIs &amp; jQuery</title>
            <link>https://haleyjung.github.io/posts/2022/01/apis-jquery/</link>
            <pubDate>Sat, 15 Jan 2022 12:40:33 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/apis-jquery/</guid>
            <description>APIs  Manipulate (create new or update existing) HTML elements on the page Create event-based user interactivity Embed rich media in documents with HTML &amp;lt;audio&amp;gt; and &amp;lt;video&amp;gt; elements Fetch data from a server Create visualizations by:  Creating SVG (Scalable Vector Graphics) Drawing on HTML canvas elements Rendering high-performance interactive 2D and 3D graphics with WebGL    Define jQuery  A JavaScript library that improves the native DOM API Portable across browsers Has a concise syntax Makes manipulating and adding interactivity to HTML documents easier  Using jQuery Method 1: Download the jQuery library and install it locally in the HTML code</description>
            <content type="html"><![CDATA[<h2 id="apis">APIs</h2>
<ul>
<li>Manipulate (create new or update existing) HTML elements on the page</li>
<li>Create event-based user interactivity</li>
<li>Embed rich media in documents with HTML <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code> elements</li>
<li>Fetch data from a server</li>
<li>Create visualizations by:
<ul>
<li>Creating SVG (Scalable Vector Graphics)</li>
<li>Drawing on HTML <code>canvas</code> elements</li>
<li>Rendering high-performance interactive 2D and 3D graphics with WebGL</li>
</ul>
</li>
</ul>
<h2 id="define-jquery">Define jQuery</h2>
<ul>
<li>A JavaScript library that improves the native DOM API</li>
<li>Portable across browsers</li>
<li>Has a concise syntax</li>
<li>Makes manipulating and adding interactivity to HTML documents easier</li>
</ul>
<h2 id="using-jquery">Using jQuery</h2>
<p><strong>Method 1</strong>: Download the jQuery library and install it locally in the HTML code</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">head</span>&gt;
  &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/jquery/jquery-3.4.1.min.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
  &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;js/scripts.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;/<span style="color:#f92672">head</span>&gt;
</code></pre></div><p><strong>Method 2</strong>: Link to the jQuery library using CDN</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">head</span>&gt;
  &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src </span><span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
  &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;js/scripts.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
&lt;/<span style="color:#f92672">head</span>&gt;
</code></pre></div><h2 id="jquery-selectors">jQuery Selectors</h2>
<ul>
<li>Uses CSS-style selectors to select parts, or elements of an HTML page</li>
<li><a href="https://api.jquery.com/category/selectors/">jQuery Official Documentation: Selectors</a></li>
</ul>
<h3 id="elementmethod">$(&ldquo;element&rdquo;).method</h3>
<p><code>$(&quot;p&quot;).addClass(&quot;selected&quot;);</code></p>
<ul>
<li>selects all paragraph elements and adds a class of &ldquo;selected&rdquo; to them</li>
</ul>
<p><code>$(&quot;.pclassName&quot;).css(&quot;color&quot;, &quot;blue&quot;);</code></p>
<ul>
<li>colors the text of class named pclassName with blue</li>
</ul>
<p><code>$(#liID).replaceWith(&quot;&lt;p&gt;text&lt;/p&gt;&quot;);</code></p>
<ul>
<li>selects ID and replaces it with text</li>
</ul>
<p><code>$('ul.wishList').append(&quot;&lt;li&gt;New List&lt;/li&gt;&quot;);</code></p>
<ul>
<li>selects a specific class &lsquo;wishList&rsquo; from ul</li>
</ul>
<p><code>$(&quot;h1#headline&quot;).css(&quot;font-size&quot;, &quot;2em&quot;);</code></p>
<ul>
<li>selects a specific id &lsquo;headline&rsquo; from h1</li>
</ul>
<h3 id="selectors-as-filters">Selectors as Filters</h3>
<p><code>:first</code></p>
<ul>
<li>selects the element that is the first child of its parent</li>
<li><code>$(&quot;li:first&quot;).css(&quot;color&quot;, &quot;green&quot;);</code></li>
</ul>
<p><code>:contains(text)</code></p>
<ul>
<li>selects elements that have a certain text</li>
<li><code>$(&quot;p:contains('World')&quot;).css(&quot;color&quot;, &quot;yellow&quot;);</code></li>
</ul>
<p><code>:last</code></p>
<ul>
<li>selects the element that is the last child of its parent</li>
<li><code>$(&quot;li:last&quot;).css(&quot;color&quot;, &quot;yellow&quot;);</code></li>
</ul>
<h3 id="multiple-selectors">Multiple Selectors</h3>
<p><code>$(&quot;#cat,#dog,#rat&quot;).css(&quot;background-color&quot;,&quot;red&quot;);</code></p>
<ul>
<li>by separating the different ids with a comma, apply the same changes to more than one element in a single line of code</li>
</ul>
<p>To set multiple CSS properties, use <strong>object literal syntax</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;#element&#39;</span>).<span style="color:#a6e22e">css</span>({
  <span style="color:#e6db74">&#39;background&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;gray&#39;</span>,
  <span style="color:#e6db74">&#39;color&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;white&#39;</span>
});
</code></pre></div><h2 id="jquery-methods">jQuery Methods</h2>
<h3 id="click-method">Click Method</h3>
<p>The jQuery Click method triggers a function &ldquo;handler&rdquo; when an element is clicked.</p>
<p><code>$(&quot;#clickMe&quot;).click(handler)</code> takes the handler function as an argument and executes it <strong>every time the element #clickMe is clicked</strong>. The handler function receives a parameter known as an eventObject that can be useful for controlling the action.</p>
<p><strong>Example 1</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">button</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;alert&#34;</span>&gt;Click Here&lt;/<span style="color:#f92672">button</span>&gt;
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#alert&#34;</span>).<span style="color:#a6e22e">click</span>(<span style="color:#66d9ef">function</span> () {
  <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;Hi! I&#39;m an alert&#34;</span>);
});
</code></pre></div><p><strong>Example 2</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">jqueryElement</span>.<span style="color:#a6e22e">click</span>(<span style="color:#a6e22e">usefulInfo</span>, <span style="color:#a6e22e">handler</span>)

<span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;element&#34;</span>).<span style="color:#a6e22e">click</span>({<span style="color:#a6e22e">firstWord</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Hello&#34;</span>, <span style="color:#a6e22e">secondWord</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;World&#34;</span>}, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">event</span>){
    <span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">firstWord</span>);
    <span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">secondWord</span>);
});
</code></pre></div><p><strong>Remember</strong></p>
<p>Use <code>.on(&quot;click&quot;,...)</code> over <code>.click(...)</code> because the former can use less memory and work for dynamically added elements.</p>
<p>The click event is only bound to elements currently in the DOM at the time of binding, so any elements added afterwards will not be bound. To bind all elements in the DOM, even if they will be created at a later time, use the .on() method.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;element&#34;</span>).<span style="color:#a6e22e">click</span>(<span style="color:#66d9ef">function</span>() {
  <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;I&#39;ve been clicked!&#34;</span>);
});

<span style="color:#75715e">// Instead of &#39;.click()&#39; use &#39;.on()&#39;:
</span><span style="color:#75715e"></span><span style="color:#a6e22e">$</span>(document).<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#34;click&#34;</span>, <span style="color:#e6db74">&#34;element&#34;</span>, <span style="color:#66d9ef">function</span>() {
  <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;I&#39;ve been clicked!&#34;</span>);
});
</code></pre></div><h3 id="mousedown-method">Mousedown Method</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#a6e22e">selector</span>).<span style="color:#a6e22e">mousedown</span>(<span style="color:#66d9ef">function</span>);

<span style="color:#a6e22e">$</span>(<span style="color:#960050;background-color:#1e0010">#</span><span style="color:#a6e22e">example</span>).<span style="color:#a6e22e">mousedown</span>(<span style="color:#66d9ef">function</span>(){
   <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;Example was clicked&#34;</span>);
});
</code></pre></div><h3 id="hover-method">Hover Method</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#a6e22e">selector</span>).<span style="color:#a6e22e">hover</span>(<span style="color:#a6e22e">inFunction</span>, <span style="color:#a6e22e">outFunction</span>);

<span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;p&#34;</span>).<span style="color:#a6e22e">hover</span>(<span style="color:#66d9ef">function</span>(){
    <span style="color:#a6e22e">$</span>(<span style="color:#66d9ef">this</span>).<span style="color:#a6e22e">css</span>(<span style="color:#e6db74">&#34;background-color&#34;</span>, <span style="color:#e6db74">&#34;yellow&#34;</span>);
}, <span style="color:#66d9ef">function</span>(){
    <span style="color:#a6e22e">$</span>(<span style="color:#66d9ef">this</span>).<span style="color:#a6e22e">css</span>(<span style="color:#e6db74">&#34;background-color&#34;</span>, <span style="color:#e6db74">&#34;pink&#34;</span>);
});
</code></pre></div><p>The first function, inFunction, will run when the <code>mouseenter</code> event occurs. The second function is optional, but will run when the <code>mouseleave</code> event occurs. If only one function is specified, the other function will run for both the <code>mouseenter</code> and <code>mouseleave</code> events.</p>
<h3 id="animate-method">Animate Method</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;.selector&#34;</span>).<span style="color:#a6e22e">animate</span>(<span style="color:#a6e22e">properties</span>, <span style="color:#a6e22e">duration</span>, <span style="color:#a6e22e">callbackFunction</span>());
</code></pre></div><ul>
<li><code>properties</code>: a javascript object with the CSS properties you want to animate as keys and the values</li>
<li><code>duration</code>:  the amount of time in milliseconds the animation should take</li>
<li><code>callbackFunction()</code>: executed once the animation has finished</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;.example-animation&#34;</span>).<span style="color:#a6e22e">animate</span>({
	<span style="color:#a6e22e">opacity</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>,
	<span style="color:#a6e22e">bottom</span><span style="color:#f92672">:</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">15</span>
}, <span style="color:#ae81ff">1000</span>, <span style="color:#66d9ef">function</span>() {
	<span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;.different-element&#34;</span>).<span style="color:#a6e22e">hide</span>();
});
</code></pre></div><h3 id="hide-method">Hide Method</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;.myclass&#34;</span>).<span style="color:#a6e22e">hide</span>() <span style="color:#75715e">// hides all the elements whose clasee is &#39;myclass&#39;
</span></code></pre></div><p><code>.hide()</code> can also animate the width, height, and opacity of the matched elements.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;p&#34;</span>).<span style="color:#a6e22e">hide</span>( <span style="color:#e6db74">&#34;slow&#34;</span>, <span style="color:#66d9ef">function</span>() { <span style="color:#75715e">// slow: 600ms
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;.titles&#34;</span>).<span style="color:#a6e22e">hide</span>(<span style="color:#e6db74">&#34;fast&#34;</span>); <span style="color:#75715e">// fast: 200ms
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;No more text!&#34;</span>);
});
</code></pre></div><h3 id="show-method">Show Method</h3>
<p>Immediately displays the matched element without an animation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;.myclass&#34;</span>).<span style="color:#a6e22e">show</span>(); <span style="color:#75715e">// doesn&#39;t override `!important!`
</span></code></pre></div><p>Just like <code>.hide()</code>, <code>.show()</code> can be used as an animation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#title&#34;</span>).<span style="color:#a6e22e">show</span>( <span style="color:#e6db74">&#34;slow&#34;</span>, <span style="color:#66d9ef">function</span>() {
  <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;p&#34;</span>).<span style="color:#a6e22e">show</span>(<span style="color:#e6db74">&#34;fast&#34;</span>);
});
</code></pre></div><h3 id="toggle-method">Toggle Method</h3>
<p>To show or hide elements: <code>$(&quot;.myclass&quot;).toggle()</code></p>
<h3 id="slide-down-method">Slide Down Method</h3>
<p>To animate the height of the matched elements:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;.myclass&#34;</span>).<span style="color:#a6e22e">slideDown</span>(); <span style="color:#75715e">//will expand the element with the identifier myclass for 400 ms.
</span><span style="color:#75715e"></span><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;.myclass&#34;</span>).<span style="color:#a6e22e">slideDown</span>(<span style="color:#ae81ff">1000</span>); <span style="color:#75715e">//will expand the element with the identifier myclass for 1000 ms.
</span><span style="color:#75715e"></span><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;.myclass&#34;</span>).<span style="color:#a6e22e">slideDown</span>(<span style="color:#e6db74">&#34;slow&#34;</span>); <span style="color:#75715e">//will expand the element with the identifier myclass for 600 ms.
</span><span style="color:#75715e"></span><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;.myclass&#34;</span>).<span style="color:#a6e22e">slideDown</span>(<span style="color:#e6db74">&#34;fast&#34;</span>); <span style="color:#75715e">//will expand the element with the identifier myclass for 200 ms.
</span></code></pre></div><h3 id="load-method">Load Method</h3>
<p>To load data from a server and puts the returned data into the selected element (There is also a jQuery Event method called load. Which one is called, depends on the parameters):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;button&#34;</span>).<span style="color:#a6e22e">click</span>(<span style="color:#66d9ef">function</span>(){
    <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#div1&#34;</span>).<span style="color:#a6e22e">load</span>(<span style="color:#e6db74">&#34;demo_test.txt&#34;</span>);
});
</code></pre></div><h3 id="chaining">Chaining</h3>
<p>To execute multiple methods on the same jQuery selection, on a single line.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//From this:
</span><span style="color:#75715e"></span><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;#someElement&#39;</span>).<span style="color:#a6e22e">removeClass</span>(<span style="color:#e6db74">&#39;classA&#39;</span>);
<span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;#someElement&#39;</span>).<span style="color:#a6e22e">addClass</span>(<span style="color:#e6db74">&#39;classB&#39;</span>);

<span style="color:#75715e">// To this:
</span><span style="color:#75715e"></span><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;#someElement&#39;</span>).<span style="color:#a6e22e">removeClass</span>(<span style="color:#e6db74">&#39;classA&#39;</span>).<span style="color:#a6e22e">addClass</span>(<span style="color:#e6db74">&#39;classB&#39;</span>);
</code></pre></div><h3 id="ajax-get-method">Ajax Get Method</h3>
<p>Sends an asynchronous http GET request to load data from the server:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">jQuery</span>.<span style="color:#a6e22e">get</span>( <span style="color:#a6e22e">url</span> [, <span style="color:#a6e22e">data</span> ] [, <span style="color:#a6e22e">success</span> ] [, <span style="color:#a6e22e">dataType</span> ] )

<span style="color:#75715e">// equivalent to:
</span><span style="color:#75715e"></span><span style="color:#a6e22e">$</span>.<span style="color:#a6e22e">ajax</span>({
     <span style="color:#a6e22e">url</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">url</span>,
     <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">data</span>,
     <span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">success</span>,
     <span style="color:#a6e22e">dataType</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">dataType</span>
});
</code></pre></div><ul>
<li><strong>data</strong>: An object or string sent to the server with the request.</li>
<li><strong>success</strong>: A callback function executed if the request succeeds. It takes as an argument the returned data. It is also passed the text status of the response.</li>
<li><strong>dataType</strong>: The type of data expected from the server. The default is Intelligent Guess (xml, json, script, text, html). If this parameter is provided, the success callback also must be provided.</li>
</ul>
<p><strong>Example: Requesting <code>resource.js</code> from the server</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;http://example.com/resource.json&#39;</span>, {<span style="color:#a6e22e">category</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#39;client&#39;</span>, <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#39;premium&#39;</span>})
     .<span style="color:#a6e22e">done</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">response</span>) {
           <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;success&#34;</span>);
           <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#mypar&#34;</span>).<span style="color:#a6e22e">html</span>(<span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">amount</span>);
     })
     .<span style="color:#a6e22e">fail</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">error</span>) { <span style="color:#75715e">// with error handling
</span><span style="color:#75715e"></span>           <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;error&#34;</span>);
           <span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;#mypar&#34;</span>).<span style="color:#a6e22e">html</span>(<span style="color:#a6e22e">error</span>.<span style="color:#a6e22e">statusText</span>);
     });
</code></pre></div><h3 id="ajax-post-method">Ajax Post Method</h3>
<p>Same logic:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">jQuery</span>.<span style="color:#a6e22e">post</span>( <span style="color:#a6e22e">url</span> [, <span style="color:#a6e22e">data</span> ] [, <span style="color:#a6e22e">success</span> ] [, <span style="color:#a6e22e">dataType</span> ] )

<span style="color:#a6e22e">$</span>.<span style="color:#a6e22e">ajax</span>({
  <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;POST&#34;</span>,
  <span style="color:#a6e22e">url</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">url</span>,
  <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">data</span>,
  <span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">success</span>,
  <span style="color:#a6e22e">dataType</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">dataType</span>
});
</code></pre></div><p><strong>Example: Using the github api to fetch the list of repositories of a user using jQuery.ajax() and put results in a div</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">body</span>&gt;

&lt;<span style="color:#f92672">form</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;userForm&#34;</span>&gt;
  &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;username&#34;</span> <span style="color:#a6e22e">placeholder</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Enter gitHub User name&#34;</span>&gt;
  &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Search&#34;</span>&gt;
&lt;/<span style="color:#f92672">form</span>&gt;
<span style="color:#75715e">&lt;!-- the result of the search will be rendered inside this div --&gt;</span>
&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;result&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;

&lt;<span style="color:#f92672">script</span>&gt;
<span style="color:#75715e">// Attach a submit handler to the form
</span><span style="color:#75715e"></span><span style="color:#a6e22e">$</span>( <span style="color:#e6db74">&#34;#userForm&#34;</span> ).<span style="color:#a6e22e">submit</span>(<span style="color:#66d9ef">function</span>( <span style="color:#a6e22e">event</span> ) {

  <span style="color:#75715e">// Stop form from submitting normally
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">preventDefault</span>();

  <span style="color:#75715e">// Get some values from elements on the page:
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">$form</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>( <span style="color:#66d9ef">this</span> ),
    <span style="color:#a6e22e">username</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$form</span>.<span style="color:#a6e22e">find</span>( <span style="color:#e6db74">&#34;input[name=&#39;username&#39;]&#34;</span> ).<span style="color:#a6e22e">val</span>(),
    <span style="color:#a6e22e">url</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://api.github.com/users/&#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">username</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;/repos&#34;</span>;

  <span style="color:#75715e">// Send the data using post
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">posting</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">$</span>.<span style="color:#a6e22e">post</span>( <span style="color:#a6e22e">url</span>, { <span style="color:#a6e22e">s</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">term</span> } );

  <span style="color:#75715e">//Ajax Function to send a get request
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">$</span>.<span style="color:#a6e22e">ajax</span>({
    <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;GET&#34;</span>,
    <span style="color:#a6e22e">url</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">url</span>,
    <span style="color:#a6e22e">dataType</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#34;jsonp&#34;</span>
    <span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">response</span>){
        <span style="color:#75715e">//if request if made successfully then the response represent the data
</span><span style="color:#75715e"></span>
        <span style="color:#a6e22e">$</span>( <span style="color:#e6db74">&#34;#result&#34;</span> ).<span style="color:#a6e22e">empty</span>().<span style="color:#a6e22e">append</span>( <span style="color:#a6e22e">response</span> );
    }
  });

});
&lt;/<span style="color:#f92672">script</span>&gt;

&lt;/<span style="color:#f92672">body</span>&gt;
</code></pre></div><h2 id="references">References</h2>
<p><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage">&ldquo;Client-side storage,&rdquo; MDN Web Docs.</a></p>
<p><a href="https://jquery.com/">jQuery Official Documentation</a></p>
<ul>
<li><a href="https://learn.jquery.com/using-jquery-core/">Using jQuery Core</a></li>
<li><a href="https://learn.jquery.com/events/">Events</a></li>
</ul>
<p><a href="https://www.freecodecamp.org/news/jquery-selectors/">&ldquo;jQuery Selectors Explained: Class Selectors, ID Selectors, and More,&rdquo; freeCodeCamp, January 27, 2020.</a></p>
<p><a href="https://www.freecodecamp.org/news/the-best-jquery-examples/">&ldquo;The Best jQuery Examples,&rdquo; freeCodeCamp, November 22, 2019.</a></p>
]]></content>
        </item>
        
        <item>
            <title>Chrome DevTools: Debugging JavaScript</title>
            <link>https://haleyjung.github.io/posts/2022/01/chrome-devtools-debugging-javascript/</link>
            <pubDate>Thu, 13 Jan 2022 09:33:30 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/chrome-devtools-debugging-javascript/</guid>
            <description>Step 1: Reproduce the bug Finding a series of actions that consistently reproduces a bug is always the first step to debugging.
Step 2: Get familiar with the Sources panel UI After opening the DevTools by pressing Command+Option+J on Mac, click the Sources tab. This is where we debug JavaScript. It has 3 main parts:
(1) Top left: File Navigator pane
This is where we can see and inspect every files that the page requests.</description>
            <content type="html"><![CDATA[<h2 id="step-1-reproduce-the-bug">Step 1: Reproduce the bug</h2>
<p>Finding a series of actions that consistently reproduces a bug is always the first step to debugging.</p>
<h2 id="step-2-get-familiar-with-the-sources-panel-ui">Step 2: Get familiar with the Sources panel UI</h2>
<p>After opening the DevTools by pressing Command+Option+J on Mac, click the <strong>Sources</strong> tab. This is where we debug JavaScript. It has 3 main parts:</p>
<p><img src="https://wd.imgix.net/image/admin/fgJB1mwfZsJ7Pv21hzSt.png?auto=format&amp;w=1428" alt="Basques, Kayce. &ldquo;Debug JavaScript: The 3 parts of the Sources panel UI&rdquo;, Chrome Developers, January 4, 2017"></p>
<p><strong>(1) Top left: File Navigator pane</strong></p>
<p>This is where we can see and inspect every files that the page requests.</p>
<p><strong>(2) Top right: Code Editor pane</strong></p>
<p>This is where we can see the contents of the file after clicking it from the File Navigator pane.</p>
<p><strong>(3) Bottom (or Far-right for wide screen): JavaScript Debugging pane</strong></p>
<p>This shows various tools for inspecting the page&rsquo;s JavaScript.</p>
<h2 id="step-3-pause-the-code-with-a-breakpoint">Step 3: Pause the code with a breakpoint</h2>
<h3 id="breakpoint-types">Breakpoint Types</h3>
<table>
<thead>
<tr>
<th>Breakpoint Types</th>
<th>Use This When You Want to Pause&hellip;</th>
<th>How to Set the Breakpoint</th>
</tr>
</thead>
<tbody>
<tr>
<td>Line-of-code</td>
<td>On the exact region of code that you need to investigate.</td>
<td>Click the line number column of the code. A blue icon will appear. &lsquo;debugger;&rsquo; can also be called from the code to pause on that line.</td>
</tr>
<tr>
<td>Conditional line-of-code</td>
<td>On an exact region of code, but only when some other condition is true.</td>
<td>To set this breakpoint, go to the line of code and right-click in the line number column and select &lsquo;add conditional breakpoint.&rsquo; Enter the condition in the dialog that appears underneath the line of code. An orange icon appears to indicate that the breakpoint has been activated.</td>
</tr>
<tr>
<td>DOM</td>
<td>On the code that changes or removes a specific DOM node, or its childern.</td>
<td>To set this, click the Elements tab, go to the element you want to set the breakpoint on, right-click the element, and hover over &lsquo;Break on&rsquo; to select &lsquo;subtree modifications,&rsquo; &lsquo;attribute modifications,&rsquo; or &lsquo;node removal.&rsquo;</td>
</tr>
<tr>
<td>XHR/Fetch</td>
<td>When an XHR URL contains a single pattern (i.e. when the requested URL matches a substring that you provide).</td>
<td>Click the Sources tab and expand the XHR Breakpoints pane. Click Add breakpoint and enter the string which you want to break on. DevTools pauses when this string is present anywhere in an XHR&rsquo;s request URL. (e.g. org)</td>
</tr>
<tr>
<td>Event Listener</td>
<td>On the code that runs after an event, such as <em>click</em> is fired.</td>
<td>Click the Sources tab, expand the Event Listener Breakpoints pane which will show a list of event categories. Check on of these categories to pause whenever any event from that category is fired or expand the category and check a specific event.</td>
</tr>
<tr>
<td>Exception</td>
<td>On the line of code that is throwing a caught or uncaught exception.</td>
<td>Click the Sources tab and click &lsquo;Pause on exceptions&rsquo; button, which will then turn blue to indicate that it&rsquo;s been enabled. You can also check the &lsquo;Paul On Caught Exceptions&rsquo; checkbox if you also want to pause on caught exceptions in addition to uncaught ones.</td>
</tr>
<tr>
<td>Function</td>
<td>Whenever a specific function is called.</td>
<td>Call &lsquo;debug(functionName)&rsquo; in the code on from the DevTools Console when you want to pause whenever a specific function is called. debug() is equivalent to setting a line-of-code breakpoint on the first line of the function.</td>
</tr>
</tbody>
</table>
<h4 id="event-listener">Event Listener</h4>
<p><strong>Event Listener Breakpoints</strong> is a faster and more efficient method to inspect values to find and fix bugs than <strong>console.log()</strong>. A breakpoint lets you pause the code in the middle of its execution and examine all values at that moment in time, even without knowing how the code is structured. I can use various types of breakpoints to pause the code closer to the probable location of the bug.</p>
<h4 id="types-of-dom-change-breakpoints">Types of DOM change breakpoints</h4>
<ul>
<li>Subtree moditfications: triggered when a child of the currently-selected node is removed or added, or the contents of a child are changed. Not triggered on child node attribute changes, or on any changes to the currently-selected node.</li>
<li>Attributes modifications: triggered when an attribute is added or removed on the currently-selected node, or when an attribute value changes.</li>
<li>Node removal: triggered when the currently-selected node is removed.</li>
</ul>
<h4 id="xhrfetch-breakpoints">XHR/Fetch breakpoints</h4>
<p>This is helpful when you see that your page is requesting an incorrect URL and you want to quickly find the AJAX or Fetch source code that is causing the incorrect request.</p>
<h4 id="function-breakpoints">Function breakpoints</h4>
<p>You&rsquo;ll get ReferenceError if the function you want to debug is not in scope.</p>
<ol>
<li>Set a line-of-code breakpoint somewhere where the function is in scope.</li>
<li>Trigger the breakpoint.</li>
<li>Call debug() in the DevTools Console while the code is still paused on your line-of-code breakpoint.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">(<span style="color:#66d9ef">function</span> () {
  <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">hey</span>() {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;hey&#39;</span>);
  }
  <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">yo</span>() {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;yo&#39;</span>);
  }
  <span style="color:#a6e22e">debug</span>(<span style="color:#a6e22e">yo</span>); <span style="color:#75715e">// This works.
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">yo</span>();
})();
<span style="color:#a6e22e">debug</span>(<span style="color:#a6e22e">hey</span>); <span style="color:#75715e">// This doesn&#39;t work. hey() is out of scope.
</span></code></pre></div><h2 id="step-4-step-through-the-code">Step 4: Step through the code</h2>
<p>Step through the code one line at a time to find out if it&rsquo;s executing in a different order than I expected. This can be done on the <strong>Sources</strong> panel.</p>
<ul>
<li>Click <strong>Step into next function call</strong> (the downwards arrow button). This steps through the execution of the affiliated function one line at a time.</li>
<li>Click <strong>Step over next function call</strong> (the arc arrow button). This skips a few lines of code that evaluate to false to execute the next function call.</li>
</ul>
<h2 id="step-5-set-a-line-of-code-breakpoint">Step 5: Set a line-of-code breakpoint</h2>
<p>Line-of-code breakpoint is used for pausing on a specific line of code. Click on the # of the code line and it will get highlighed with a blue tag. This indicates that there is a line-of-code breakpoint on this line and DevTools will now pause before this line of code is executed. This line of code is also highlighted in the Breakpoints section of the debugging pane.</p>
<p><img src="https://wd.imgix.net/image/admin/99Omb7ALyJB7MfYpuqXp.png?auto=format&amp;w=1428" alt="Basques, Kayce. &ldquo;Debug JavaScript: DevTools pauses on the line-of-code breakpoint on line 32,&rdquo; Chrome Developers, January 4, 2017"></p>
<h2 id="step-6-check-variable-values">Step 6: Check variable values</h2>
<h3 id="method-1-the-scope-pane">Method 1: The Scope pane</h3>
<p>When you&rsquo;re paused on a line of code, the Scope pane shows you what local and global variables are currently defined, along with the value of each variable. It also shows closure variables, when applicable. Double-click a variable value to edit it. When you&rsquo;re not paused on a line of code, the Scope pane is empty.</p>
<p><img src="https://wd.imgix.net/image/admin/Tynv55DnsSgtvpd6Iz9z.png?auto=format&amp;w=1428" alt="Basques, Kayce. &ldquo;Debug JavaScript: The Scope pane,&rdquo; Chrome Developers, January 4, 2017"></p>
<h3 id="method-2-watch-expressions">Method 2: Watch Expressions</h3>
<p>The &lsquo;Watch&rsquo; tab, found in the debugging pane, allows you to monitor the values of variables over time. Any valid JavaScript expressions can be stored in a Watch Expression.</p>
<ul>
<li>Click the Watch tab.</li>
<li>Click the plus icon to add expression (e.g. typeof sum)</li>
<li>Then DevTools will show the value. Evaluate whether the value is what you expected.</li>
</ul>
<h3 id="method-3-the-console">Method 3: The Console</h3>
<p>Use the Console to evaluate arbitrary JavaScript statements and test out potential fixes for bugs. For instance, if the value that needs to be changed from string to number:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-console" data-lang="console">parseInt(varName1) + parseInt(varName2)
</code></pre></div><h2 id="step-7-apply-a-fix">Step 7: Apply a fix</h2>
<p>You can edit JavaScript code directly within the DevTools UI.</p>
<ol>
<li>Click <strong>Resume script execution</strong> (the blue play button).</li>
<li>In the Code Editor, update the line that needs to be fixed</li>
<li>Save changes with Command+S (Mac)</li>
<li>Click <strong>Deactivate breakpoints</strong> (the black arrow with cross over it). It should turn blue, indicating that it&rsquo;s active. While this is set, DevTools ignores any breakpoints.</li>
</ol>
<p>This entire workflow only applies a fix to the code that is <strong>running in your browser</strong>. It won&rsquo;t fix the code for all users that visit your page. To do that, you need to fix the code that&rsquo;s on your servers.</p>
<h2 id="snippets">Snippets</h2>
<p><img src="https://wd.imgix.net/image/admin/P9yNZWUJKt2hUUYsDy1v.png?auto=format&amp;w=845" alt="Basques, Kayce. &ldquo;Run Snippets of JavaScript: The Snippets pane,&rdquo; Chrome Developers, January 4, 2017"></p>
<p>Snippets are executable scripts that you author, store, and run within DevTools. Use a Snippet if you are repeatedly running the same code in the Console.</p>
<p>The Snippets pane can be opened from the Sources panel &ndash;&gt; Snippets tab.</p>
<p>Alternatively, press Command+Shift+P (Mac) to open the Command Menu. Type in &lsquo;Snippets&rsquo; to select &lsquo;Show Snippets&rsquo; and run the command.</p>
<p>To run a Snippet, manually click &lsquo;Run Snippet&rsquo; button from the Snippet panel or press Command+Enter (Mac).</p>
<p>Alternatively, press Command+O (Mac) to open the Command Menu, type &ldquo;!&rdquo; followed by the name of the Snippet that you want to run and press enter to run the Snippet.</p>
<h2 id="references">References</h2>
<p><a href="https://developer.chrome.com/docs/devtools/">Basques, Kayce, &ldquo;Chrome DevTools&rdquo; Chrome Developers</a></p>
]]></content>
        </item>
        
        <item>
            <title>Approach to Problem Solving</title>
            <link>https://haleyjung.github.io/posts/2022/01/approach-to-problem-solving/</link>
            <pubDate>Wed, 12 Jan 2022 10:26:29 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/approach-to-problem-solving/</guid>
            <description>IOCE: Input, Output, Constraints, Edge Cases  Identifying the input(s), output(s), constrains, and edge cases is important as we need to know what the inputs and expected outputs are for a problem, which also reflects my understanding of the prompt.  Strategy(s): How can I get from my input to my output?  A moment to be extra verbal and thinking out loud to brainstorm strategies After brainstorming the first strategy (write quick notes about it to remember), I can also come up with a second strategy, then identify trade-off.</description>
            <content type="html"><![CDATA[<h2 id="ioce-input-output-constraints-edge-cases">IOCE: Input, Output, Constraints, Edge Cases</h2>
<ul>
<li>Identifying the input(s), output(s), constrains, and edge cases is important as we need to know what the inputs and expected outputs are for a problem, which also reflects my understanding of the prompt.</li>
</ul>
<h2 id="strategys-how-can-i-get-from-my-input-to-my-output">Strategy(s): How can I get from my input to my output?</h2>
<ul>
<li>A moment to be extra verbal and thinking out loud to brainstorm strategies</li>
<li>After brainstorming the first strategy (write quick notes about it to remember), I can also come up with a second strategy, then identify trade-off.</li>
<li>I should always choose that seems the easiest to get to the naive (easy) solution even if it’s not the most efficient. Pick the one that will get me started working towards a working functional product. Afterwards, if it’s not good enough, I can implement the second strategy and compare the results.</li>
<li>Optional step: I can draw out diagram(s) to verify my strategies!</li>
</ul>
<h2 id="writing-tests-sample-input-sample-output">Writing Tests: sample input, sample output</h2>
<ul>
<li>Taking sample input(s), invoking them, and commenting what I expect the output(s) should be are important steps to show that I have a clear vision of how the function should perform and what outputs are expected.</li>
<li>e.g. ‘Expect <em>functionName</em> invoked with these given inputs to be <em>this</em> output..’</li>
</ul>
<h2 id="pseudocode">Pseudocode</h2>
<ul>
<li>Writing the one line of plain English pseudocode per line of actual code is an important step to clearly communicate how I plan on implementing each code and showing the data flow step by step.</li>
<li>Write inside the shell of the function that we are going to implement</li>
<li>Indent the comment for if/else statements as well as anything that’s a block with the code inside</li>
<li>IMPORTANT: Strategy and implementation should be separate.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// Create a Map that store the key value pairs
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Key will be the difference of target value and current position value
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Value is the position number
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// Iterate over the array of integers from start to end with step 1 with for loop
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Create a difference variable that looks at difference between target and current position value
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// If Map has the target difference
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// Return the targetDifference position and current position
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Else
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// Set the current value as key and it&#39;s postiion as the corresponding value
</span><span style="color:#75715e"></span>        <span style="color:#75715e">// nums[i] : i
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Else return empty brackets
</span><span style="color:#75715e"></span>
</code></pre></div><h2 id="code">Code</h2>
<ul>
<li>Writing code is translating instructions into a language that a computer can understand</li>
<li>Translate my thoughts into the language the computer can understand</li>
</ul>
<h2 id="refactor">Refactor</h2>
<ul>
<li>Refactoring consists of improving the internal structure of an existing program&rsquo;s source code, while preserving its external behavior. The noun “refactoring” refers to one particular behavior-preserving transformation, such as “Extract Method” or “Introduce Parameter.”</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>ESLint</title>
            <link>https://haleyjung.github.io/posts/2022/01/eslint/</link>
            <pubDate>Tue, 11 Jan 2022 23:21:14 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/eslint/</guid>
            <description>What is ESLint? &amp;ldquo;ESLint is a static code analysis tool for identifying problematic patterns found in JavaScript code. It was created by Nicholas C. Zakas in 2013. Rules in ESLint are configurable, and customized rules can be defined and loaded. ESLint covers both code quality and coding style issues.&amp;rdquo;
ESLint is written using Node.js to provide a fast runtime standard using a customizable set of rules like below.
module.exports = { parserOptions: { ecmaVersion: 5 }, rules: { /* Indentation */ &amp;#39;no-mixed-spaces-and-tabs&amp;#39;: 2, &amp;#39;indent-legacy&amp;#39;: [2, 2], /* Variable names */ &amp;#39;camelcase&amp;#39;: 2, /* Language constructs */ &amp;#39;curly&amp;#39;: 2, &amp;#39;eqeqeq&amp;#39;: [2, &amp;#39;smart&amp;#39;], &amp;#39;func-style&amp;#39;: [2, &amp;#39;expression&amp;#39;], /* Semicolons */ &amp;#39;semi&amp;#39;: 2, &amp;#39;no-extra-semi&amp;#39;: 2, /* Padding &amp;amp; additional whitespace (perferred but optional) */ &amp;#39;brace-style&amp;#39;: [2, &amp;#39;1tbs&amp;#39;, { &amp;#39;allowSingleLine&amp;#39;: true }], &amp;#39;semi-spacing&amp;#39;: 1, &amp;#39;key-spacing&amp;#39;: 1, &amp;#39;block-spacing&amp;#39;: 1, &amp;#39;comma-spacing&amp;#39;: 1, &amp;#39;no-multi-spaces&amp;#39;: 1, &amp;#39;space-before-blocks&amp;#39;: 1, &amp;#39;keyword-spacing&amp;#39;: [1, { &amp;#39;before&amp;#39;: true, &amp;#39;after&amp;#39;: true }], &amp;#39;space-infix-ops&amp;#39;: 1, /* Variable declaration */ &amp;#39;one-var&amp;#39;: [1, { &amp;#39;uninitialized&amp;#39;: &amp;#39;always&amp;#39;, &amp;#39;initialized&amp;#39;: &amp;#39;never&amp;#39; }], /* Minuta */ &amp;#39;comma-style&amp;#39;: [2, &amp;#39;last&amp;#39;], &amp;#39;quotes&amp;#39;: [1, &amp;#39;single&amp;#39;], &amp;#39;max-len&amp;#39;: [1, { &amp;#39;code&amp;#39;: 100 }], } }; Why should we use ESLint?</description>
            <content type="html"><![CDATA[<h2 id="what-is-eslint">What is ESLint?</h2>
<p>&ldquo;ESLint is a static code analysis tool for identifying problematic patterns found in JavaScript code. It was created by Nicholas C. Zakas in 2013. Rules in ESLint are configurable, and customized rules can be defined and loaded. ESLint covers both code quality and coding style issues.&rdquo;</p>
<p>ESLint is written using Node.js to provide a fast runtime standard using a customizable set of rules like below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-eslintrc.js" data-lang="eslintrc.js"><span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">parserOptions</span><span style="color:#f92672">:</span> {
    <span style="color:#a6e22e">ecmaVersion</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">5</span>
  },
  <span style="color:#a6e22e">rules</span><span style="color:#f92672">:</span> {
    <span style="color:#75715e">/* Indentation */</span>
    <span style="color:#e6db74">&#39;no-mixed-spaces-and-tabs&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>,
    <span style="color:#e6db74">&#39;indent-legacy&#39;</span><span style="color:#f92672">:</span> [<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>],
    <span style="color:#75715e">/* Variable names */</span>
    <span style="color:#e6db74">&#39;camelcase&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>,
    <span style="color:#75715e">/* Language constructs */</span>
    <span style="color:#e6db74">&#39;curly&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>,
    <span style="color:#e6db74">&#39;eqeqeq&#39;</span><span style="color:#f92672">:</span> [<span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;smart&#39;</span>],
    <span style="color:#e6db74">&#39;func-style&#39;</span><span style="color:#f92672">:</span> [<span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;expression&#39;</span>],
    <span style="color:#75715e">/* Semicolons */</span>
    <span style="color:#e6db74">&#39;semi&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>,
    <span style="color:#e6db74">&#39;no-extra-semi&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>,
    <span style="color:#75715e">/* Padding &amp; additional whitespace (perferred but optional) */</span>
    <span style="color:#e6db74">&#39;brace-style&#39;</span><span style="color:#f92672">:</span> [<span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;1tbs&#39;</span>, { <span style="color:#e6db74">&#39;allowSingleLine&#39;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span> }],
    <span style="color:#e6db74">&#39;semi-spacing&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>,
    <span style="color:#e6db74">&#39;key-spacing&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>,
    <span style="color:#e6db74">&#39;block-spacing&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>,
    <span style="color:#e6db74">&#39;comma-spacing&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>,
    <span style="color:#e6db74">&#39;no-multi-spaces&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>,
    <span style="color:#e6db74">&#39;space-before-blocks&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>,
    <span style="color:#e6db74">&#39;keyword-spacing&#39;</span><span style="color:#f92672">:</span> [<span style="color:#ae81ff">1</span>, { <span style="color:#e6db74">&#39;before&#39;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>, <span style="color:#e6db74">&#39;after&#39;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span> }],
    <span style="color:#e6db74">&#39;space-infix-ops&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>,
    <span style="color:#75715e">/* Variable declaration */</span>
    <span style="color:#e6db74">&#39;one-var&#39;</span><span style="color:#f92672">:</span> [<span style="color:#ae81ff">1</span>, { <span style="color:#e6db74">&#39;uninitialized&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;always&#39;</span>, <span style="color:#e6db74">&#39;initialized&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;never&#39;</span> }],
    <span style="color:#75715e">/* Minuta */</span>
    <span style="color:#e6db74">&#39;comma-style&#39;</span><span style="color:#f92672">:</span> [<span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;last&#39;</span>],
    <span style="color:#e6db74">&#39;quotes&#39;</span><span style="color:#f92672">:</span> [<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;single&#39;</span>],
    <span style="color:#e6db74">&#39;max-len&#39;</span><span style="color:#f92672">:</span> [<span style="color:#ae81ff">1</span>, { <span style="color:#e6db74">&#39;code&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">100</span> }],
  }
};
</code></pre></div><h2 id="why-should-we-use-eslint">Why should we use ESLint?</h2>
<p>JavaScript is prone to errors as a dynamic and loosely typed language (i.e. you do not specify what type of information will be stored in a variable in advance). By imposing a standard coding guideline using ESLint, the errors can be discovered before actual execution of the codes.</p>
<h2 id="when-can-we-use-eslint">When can we use ESLint?</h2>
<p>ESLint can be used for any applications that runs on JavaScript/TypeScript, including React/React Native, Angular and Node.</p>
<h2 id="how-to-install">How to install</h2>
<p>It&rsquo;s a good practice to install ESLint locally rather than globally.</p>
<p>Install ESLint using npm:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span> <span style="color:#a6e22e">npm</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">g</span> <span style="color:#a6e22e">eslint</span>
</code></pre></div><p>Then install Pomander:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">curl</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">s</span> <span style="color:#a6e22e">https</span><span style="color:#f92672">:</span><span style="color:#75715e">//raw.githubusercontent.com/hackreactor-labs/pomander/master/bin/install | bash
</span><span style="color:#75715e"></span>
</code></pre></div><h2 id="references">References</h2>
<p><a href="https://dev.to/shivambmgupta/eslint-what-why-when-how-5f1d">Gupta, Shivam, &ldquo;ESLint: What, Why, When, How&rdquo;, DEV, June 19, 2021</a></p>
<p><a href="https://eslint.org/">Official ELint, OpenJS Foundation</a></p>
<p><a href="https://xiaoyunyang.medium.com/javascript-is-a-loosely-typed-language-meaning-you-dont-have-to-specify-what-type-of-information-137408d54fc7">Yang, Xiaoyun, &lsquo;Javascript is a loosely typed language&hellip;&rsquo;, Medium, January 29, 2018</a></p>
]]></content>
        </item>
        
        <item>
            <title>Git Push Error</title>
            <link>https://haleyjung.github.io/posts/2022/01/git-push-error/</link>
            <pubDate>Mon, 10 Jan 2022 12:19:52 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/git-push-error/</guid>
            <description>error: failed to push some refs to &#39;origin&#39; &amp;ldquo;This means that someone else pushed a commit to the same branch you&amp;rsquo;re pushing to, but you don&amp;rsquo;t have that commit on your laptop yet. This can happen if it has been awhile since you ran &amp;ldquo;git pull&amp;rdquo; on a branch that many people contribute to, such as staging.&amp;rdquo;
To fix this issue, run:
git pull origin &amp;lt;your-branch&amp;gt; git push origin &amp;lt;your-branch&amp;gt; </description>
            <content type="html"><![CDATA[<pre tabindex="0"><code class="language-error" data-lang="error">error: failed to push some refs to 'origin'
</code></pre><p>&ldquo;This means that someone else pushed a commit to the same branch you&rsquo;re pushing to, but you don&rsquo;t have that commit on your laptop yet. This can happen if it has been awhile since you ran &ldquo;git pull&rdquo; on a branch that many people contribute to, such as staging.&rdquo;</p>
<p>To fix this issue, run:</p>
<pre tabindex="0"><code>git pull origin &lt;your-branch&gt;
git push origin &lt;your-branch&gt;
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Mocha &amp; Chai</title>
            <link>https://haleyjung.github.io/posts/2022/01/mocha-chai/</link>
            <pubDate>Mon, 10 Jan 2022 12:16:25 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/mocha-chai/</guid>
            <description>What are Mocha and Chai? They are JavaScript frameworks that are commonly used together for unit testing.
Mocha is a testing framework that provides functions that are executed according in a specific order, and that logs their results to the terminal window.
When you read tests written in Mocha, you’ll see regular use of the keywords describe and it. These keywords, provided by Mocha, provide structure to the tests by batching them into test suites and test cases.</description>
            <content type="html"><![CDATA[<h2 id="what-are-mocha-and-chai">What are Mocha and Chai?</h2>
<p>They are JavaScript frameworks that are commonly used together for unit testing.</p>
<p>Mocha is a testing framework that provides functions that are executed according in a specific order, and that logs their results to the terminal window.</p>
<p>When you read tests written in Mocha, you’ll see regular use of the keywords describe and it. These keywords, provided by Mocha, provide structure to the tests by batching them into test suites and test cases.</p>
<p>A test suite is a collection of tests all relating to a single functionality or behavior. A test case or a unit test is a single description about the desired behavior of the code that either passes or fails. Test suites are batched underneath the describe keyword, and test cases are batched under the it keyword.</p>
<p>Additionally, Mocha provides tools for cleaning the state of the software being tested in order to insure that test cases are being run independently of each other. You might end up using other tools, to stub or mock the desired behaviors of other units that a given unit of code might interact with. The independence of test cases is a key principle of unit testing, as it allows the cause of errors to be pinpointed more specifically if a test case fails, thereby speeding up the debugging process.</p>
<h2 id="assertions">Assertions</h2>
<p>The base component of test cases are assertions. Assertions are tied to particular values (whereas test cases are descriptions of behavior) and they will fail if the expected value does not match the actual value.</p>
<p>Every assertion in a test case must be met in order for the test case to pass.</p>
<p>Chai is an assertion library that is often used alongside Mocha. It provides functions and methods that help you compare the output of a certain test with its expected value. Chai provides clean syntax that almost reads like English!</p>
<p>Example of a Chai assertion: expect(exampleArray).to.have.lengthOf(3);</p>
<p>This code will check whether that the variable exampleArray has a length of three or not.</p>
<h2 id="failing-and-passing-tests">Failing and Passing Tests</h2>
<p>Robust tests are accurate for both failing and passing conditions! When writing tests, you need to make sure that the test fails if the feature that it is testing was not implemented properly, as well as making sure that the test passes if it is. Tests that will erroneously pass can be enormously misleading, and might lead to broken code getting merged and deployed.</p>
<h2 id="reference">Reference</h2>
<p><a href="https://www.codecademy.com/article/bapi-testing-intro">&ldquo;Introduction to Testing with Mocha and Chai</a></p>
]]></content>
        </item>
        
        <item>
            <title>Underscore.js</title>
            <link>https://haleyjung.github.io/posts/2022/01/underscore.js/</link>
            <pubDate>Sun, 09 Jan 2022 12:53:51 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/underscore.js/</guid>
            <description>&amp;ldquo;Underscore is a JavaScript library that provides a whole mess of useful functional programming helpers without extending any built-in objects. It’s the answer to the question: &amp;lsquo;If I sit down in front of a blank HTML page, and want to start being productive immediately, what do I need?&amp;rsquo; … and the tie to go along with jQuery&amp;rsquo;s tux and Backbone&amp;rsquo;s suspenders.
You can use Underscore in either an object-oriented or a functional style, depending on your preference.</description>
            <content type="html"><![CDATA[<p>&ldquo;Underscore is a JavaScript library that provides a whole mess of useful functional programming helpers without extending any built-in objects. It’s the answer to the question: &lsquo;If I sit down in front of a blank HTML page, and want to start being productive immediately, what do I need?&rsquo; … and the tie to go along with jQuery&rsquo;s tux and Backbone&rsquo;s suspenders.</p>
<p>You can use Underscore in either an object-oriented or a functional style, depending on your preference. The following two lines of code are identical ways to double a list of numbers.&rdquo;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">_</span>.<span style="color:#a6e22e">map</span>([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>], <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">n</span>){ <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>; });
<span style="color:#a6e22e">_</span>([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]).<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">n</span>){ <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>; });
</code></pre></div><h2 id="before-using-underscorejs">Before using underscore.js</h2>
<p>Link the underscore CDN in the browser, which will then attach &ldquo;_&rdquo; to the brower as global variable.</p>
<h2 id="a-selection-of-collection-functions">A Selection of Collection Functions</h2>
<table>
<thead>
<tr>
<th>Collection Functions</th>
<th>Allas</th>
<th>Function</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>_.each</strong>(list, iteratee, [context])</td>
<td>forEach</td>
<td>Iterates over a list of elements, yielding each in turn to an iteratee function.</td>
</tr>
<tr>
<td><strong>_.map</strong>(list, iteratee, [context])</td>
<td>collect</td>
<td>Produces a new array of values by mapping each value in list through a transformation function (iteratee).</td>
</tr>
<tr>
<td><strong>_.reduce</strong>(list, iteratee, [memo], [context])</td>
<td>inject, foldl</td>
<td>Also known as inject and foldl, reduce boils down a list of values into a single value.</td>
</tr>
<tr>
<td><strong>_.find</strong>(list, predicate, [context])</td>
<td>detect</td>
<td>Looks through each value in the list, returning the first one that passes a truth test (predicate), or undefined if no value passes the test.</td>
</tr>
<tr>
<td><strong>_.filter</strong>(list, predicate, [context])</td>
<td>select</td>
<td>Looks through each value in the list, returning an array of all the values that pass a truth test (predicate).</td>
</tr>
<tr>
<td><strong>_.where</strong>(list, properties)</td>
<td>n/a</td>
<td>Looks through each value in the list, returning an array of all the values that matches the key-value pairs listed in properties.</td>
</tr>
<tr>
<td><strong>_.reject</strong>(list, predicate, [context])</td>
<td>n/a</td>
<td>Returns the values in list without the elements that the truth test (predicate) passes. The opposite of filter.</td>
</tr>
<tr>
<td><strong>_.every</strong>(list, [predicate], [context])</td>
<td>all</td>
<td>Returns true if all of the values in the list pass the predicate truth test. Short-circuits and stops traversing the list if a false element is found.</td>
</tr>
<tr>
<td><strong>_.some</strong>(list, [predicate], [context])</td>
<td>any</td>
<td>Returns true if any of the values in the list pass the predicate truth test. Short-circuits and stops traversing the list if a true element is found.</td>
</tr>
<tr>
<td><strong>_.contains</strong>(list, value, [fromIndex])</td>
<td>include, includes</td>
<td>Returns true if the value is present in the list. Uses indexOf internally, if list is an Array.</td>
</tr>
<tr>
<td><strong>_.groupBy</strong>(list, iteratee, [context])</td>
<td>n/a</td>
<td>Splits a collection into sets, grouped by the result of running each value through iteratee. If iteratee is a string instead of a function, groups by the property named by iteratee on each of the values.</td>
</tr>
<tr>
<td><strong>_.indexBy</strong>(list, iteratee, [context])</td>
<td>n/a</td>
<td>Given a list, and an iteratee function that returns a key for each element in the list (or a property name), returns an object with an index of each item. Just like groupBy, but for when you know your keys are unique.</td>
</tr>
</tbody>
</table>
<h2 id="define-list-iteratee-context">Define (list, iteratee, [context])</h2>
<p>The <strong>context</strong> parameter sets the value of <code>this</code> is referred to.</p>
<h2 id="chaining">Chaining</h2>
<p>| <strong>_.chain</strong>(obj)  | Returns a wrapped object. Calling methods on this object will continue to return wrapped objects until value is called. |
| <strong>_.chain</strong>(obj).value()  | Extracts the value of a wrapped object. |</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// _.chain(obj)
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">stooges</span> <span style="color:#f92672">=</span> [{<span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;curly&#39;</span>, <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">25</span>}, {<span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;moe&#39;</span>, <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">21</span>}, {<span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;larry&#39;</span>, <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">23</span>}];
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">youngest</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">_</span>.<span style="color:#a6e22e">chain</span>(<span style="color:#a6e22e">stooges</span>)
  .<span style="color:#a6e22e">sortBy</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">stooge</span>){ <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">stooge</span>.<span style="color:#a6e22e">age</span>; })
  .<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">stooge</span>){ <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">stooge</span>.<span style="color:#a6e22e">name</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; is &#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">stooge</span>.<span style="color:#a6e22e">age</span>; })
  .<span style="color:#a6e22e">first</span>()
  .<span style="color:#a6e22e">value</span>();
=&gt; <span style="color:#e6db74">&#34;moe is 21&#34;</span>

<span style="color:#75715e">// _.chain(obj).value()
</span><span style="color:#75715e"></span><span style="color:#a6e22e">_</span>.<span style="color:#a6e22e">chain</span>([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]).<span style="color:#a6e22e">reverse</span>().<span style="color:#a6e22e">value</span>();
=&gt; [<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1</span>]
</code></pre></div><h2 id="how-to-run-underscorejs-using-npm-node-package-manager">How to run Underscore.js using npm (Node Package Manager)</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span> <span style="color:#a6e22e">npm</span> <span style="color:#a6e22e">init</span>
<span style="color:#75715e">// -&gt; package.json will appear in the local project
</span><span style="color:#75715e"></span><span style="color:#a6e22e">$</span> <span style="color:#a6e22e">npm</span> <span style="color:#a6e22e">install</span> <span style="color:#f92672">--</span><span style="color:#a6e22e">save</span> <span style="color:#a6e22e">underscore</span>
<span style="color:#75715e">// -&gt; downloads the underscore library from online and adds it to the dependencies in package.json
</span></code></pre></div><p>If the library was already added as the dependencies, one can simply execute <strong>npm install</strong> without specifying the library.</p>
<h2 id="rewriting-underscore">Rewriting Underscore</h2>
<ul>
<li>Reassign _ to a variable</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_</span> <span style="color:#f92672">=</span> {};
</code></pre></div><ul>
<li>Rewriting the iteration helper <code>_.each</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">_</span>.<span style="color:#a6e22e">each</span>(<span style="color:#a6e22e">array</span>, <span style="color:#a6e22e">func</span>){
  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>){
    <span style="color:#a6e22e">func</span>(<span style="color:#a6e22e">array</span>[<span style="color:#a6e22e">i</span>]);
  }
}
</code></pre></div><ul>
<li>Rewriting <code>_.map</code> using <code>_.each</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">_</span>.<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">array</span>, <span style="color:#a6e22e">func</span>){
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> [];
  <span style="color:#a6e22e">_</span>.<span style="color:#a6e22e">each</span>(<span style="color:#a6e22e">array</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">element</span>){
    <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">func</span>(<span style="color:#a6e22e">element</span>));
  })
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">result</span>;
}
</code></pre></div><ul>
<li>Rewriting <code>_.reduce</code> using <code>_.each</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">_</span>.<span style="color:#a6e22e">reduce</span>(<span style="color:#a6e22e">collection</span>, <span style="color:#a6e22e">func</span>, <span style="color:#a6e22e">accumulator</span>){
  <span style="color:#a6e22e">_</span>.<span style="color:#a6e22e">each</span>(<span style="color:#a6e22e">collection</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">nextElement</span>){
    <span style="color:#a6e22e">accumulator</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">func</span>(<span style="color:#a6e22e">accumulator</span>, <span style="color:#a6e22e">nextElement</span>)
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">accumulator</span>;
}
</code></pre></div><h2 id="reference">Reference</h2>
<p><a href="https://underscorejs.org/#">UNDERSCORE.JS</a></p>
<p><a href="https://johanna-fulghum.medium.com/underbar-explained-f71ebb3fe006">Fulghum, Johanna. &ldquo;Underbar, explained,&rdquo; Medium, Dec 18, 2017</a></p>
]]></content>
        </item>
        
        <item>
            <title>Jasmine</title>
            <link>https://haleyjung.github.io/posts/2022/01/jasmine/</link>
            <pubDate>Sat, 08 Jan 2022 14:38:40 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2022/01/jasmine/</guid>
            <description>What is Jasmine? Jasmine is an open-source testing framework for JavaScript. With this tool we are able to describe the code we are testing and make assertions about our code. In the early 2000s, JsUnit was a framework for testing JavaScript applications. It was upgraded and released as Jasmine in 2010 by Pivotal Labs.
It is a Behavior Driven Development testing framework: i.e. Regardless of which JavaScript framework I use (e.</description>
            <content type="html"><![CDATA[<h2 id="what-is-jasmine">What is Jasmine?</h2>
<p>Jasmine is an open-source testing framework for JavaScript. With this tool we are able to describe the code we are testing and make assertions about our code. In the early 2000s, JsUnit was a framework for testing JavaScript applications. It was upgraded and released as Jasmine in 2010 by Pivotal Labs.</p>
<p>It is a Behavior Driven Development testing framework:
i.e. Regardless of which JavaScript framework I use (e.g. React, Vue, Express) and where it’s used (Web, Node JS), Jasmine can be used for unit testing, and it does not require a Document Object Model (DOM).
Therefore it’s well suited for websites, Node.js projects, or anywhere JavaScript can run.
It has easy-to-read syntax.
It is similar to other Unit Testing libraries such as Mocha and Chai, so picking up on other libraries are easier!</p>
<h2 id="what-is-unit-testing">What is unit testing?</h2>
<p>Unit Testing is a level of software testing where individual units or components of the software are tested individually and independently. Testing should start as early as possible to minimize and immediately locate errors.</p>
<p>Test automation can reduce the amount of time developers spend testing the software because the environment can be prepared and cleaned up automatically. It can also report the results of the test run to be used for future tests.</p>
<p>It is important to note that <strong>console.log()</strong> is not testing!</p>
<h2 id="jasmine-syntax">Jasmine Syntax</h2>
<p>Describe( )
Describe block helps organize the tests. Often one describe block is assigned to each unit testing. It can be nested.
it( )
It statement is used inside a describe block to indicate what the unit being tested should be doing. Each ‘it’ statement inside a describe block corresponds to a distinct test on one unit. There can be as many it statements as one needs in each describe block.
Expect()
Expectations are used inside it statements for comparisons, and making assertions about the functionality being tested. If one of the expectations inside a function isn’t met, the test is said to have failed.
toBe()
toBe() is one of Jasmine matchers that compare a value from the code with an expected value using a boolean matcher.</p>
<p><a href="https://jasmine.github.io/api/edge/matchers.html">Link to a full list of Jasmine matchers</a></p>
<h2 id="test-automation-pyramid">Test Automation Pyramid</h2>
<p>Testing strategy for web apps need a number of testing types, such as end-to-end testing, load testing, and UI testing. Jasmine is at the bottom of the test automation pyramid.</p>
<p>Test automation can reduce the amount of time developers spend testing the software because the environment can be prepared and cleaned up automatically. It can also report the results of the test run to be used for future tests.</p>
<p>The test automation pyramid is a crucial concept that guides the production of a high-quality product and ensures that code changes do not break existing features. It represents various types of tests and the frequency of their execution in a test suite.</p>
<p>It’s divided into three distinct sections. The unit tests can be found at the lowest level. The lower-level application tests (unit, component, functional tests) occupy the majority of an overall test count, running quickly every time a code is changed and giving immediate feedback to a developer on the code’s functionality. They will continue to grow in number as new features get added.</p>
<p>The middle tier of the test automation pyramid is integration tests, which validate interactions of the software with the outside world. They are not executed as often as unit tests, and as they require communication to the dependency, the integration tests run slower. An example is database integration tests (databases are a common external dependency in software applications), which test whether the software interacts with the database as intended. Another example is service integration tests, which test the interaction of the codes with the external service such as a RESTful API.</p>
<p>The top tier of the pyramid is occupied by end-to-end tests, which test the integration of the front end with the back end. They can be very slow, fragile, and may depend on external dependencies that could be unreliable. Thus, it’s considered a good practice to have fewer end-to-end tests to avoid relying on external systems and facing failures due to environmental issues, slowness, or faulty test data.</p>
<h2 id="references">References</h2>
<p><a href="https://jasmine.github.io/">Official Jasmine Documentation</a></p>
<p><a href="https://medium.com/software-qe/test-automation-pyramid-2021-version-c299cb224c80">Christianson, Lauren. “Test Automation Pyramid: 2021,” Medium, March 21, 2021</a></p>
<p><a href="https://www.guru99.com/node-js-testing-jasmine.html">Hartman, James. ”Jasmine Tutorial: Jasmine Framework, Unit Testing with Example,” Guru99, December 18, 2021.</a></p>
<p><a href="https://medium.com/@mocktarissa/introduction-to-unittesting-with-jasmine-part-i-a621853f9122">Issa, Mocktar. ”Introduction to UnitTesting with Jasmine. (Part I),” Medium, December 10, 2019.</a></p>
<p><a href="https://www.testim.io/blog/jasmine-js-a-from-scratch-tutorial-to-start-testing/">“Jasmine JS: Start Testing From-Scratch,” Testim, July 30, 2021.</a></p>
]]></content>
        </item>
        
        <item>
            <title>Pug.js</title>
            <link>https://haleyjung.github.io/posts/2021/12/pug.js/</link>
            <pubDate>Thu, 30 Dec 2021 16:24:23 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/12/pug.js/</guid>
            <description>What is Pug.js?  Pug.js is a HTML templating engine, which means you can write much simpler Pug code, which Pug compiler will compile into HTML code, that browser can understand. Pug.js, as from its name is a JavaScript library. Hence, we can run it inside browser or on node.js  What to do after the installation?   Tell express that our view engine is now PUG
 app.set(&amp;ldquo;view engine&amp;rdquo;, &amp;ldquo;pug&amp;rdquo;); create a views folder inside /.</description>
            <content type="html"><![CDATA[<h2 id="what-is-pugjs">What is Pug.js?</h2>
<ul>
<li>Pug.js is a HTML templating engine, which means you can write much simpler Pug code, which Pug compiler will compile into HTML code, that browser can understand.</li>
<li>Pug.js, as from its name is a JavaScript library. Hence, we can run it inside browser or on node.js</li>
</ul>
<h2 id="what-to-do-after-the-installation">What to do after the installation?</h2>
<ol>
<li>
<p>Tell express that our view engine is now PUG</p>
<ul>
<li><em>app.set(&ldquo;view engine&rdquo;, &ldquo;pug&rdquo;);</em></li>
<li>create a <em>views folder</em> inside /.src and create home.pug</li>
</ul>
</li>
<li>
<p>In videoControllers.js</p>
<ul>
<li>After (req, res), instead of using res.send(&quot;&hellip;&quot;), use res.render(&ldquo;view name&rdquo; / view = pug, view name = home.pug</li>
<li><em>export const trending = (req, res) =&gt; res.render(&ldquo;home&rdquo;);</em></li>
</ul>
</li>
<li>
<p>Update the views cwd to views folder inside src foldre</p>
<ul>
<li><em>app.set(&ldquo;views&rdquo;, process.cwd() + &ldquo;/src/views&rdquo;);</em></li>
</ul>
</li>
</ol>
<h2 id="setting">Setting</h2>
<h3 id="references">References</h3>
<ul>
<li>expressjs.com API REFERENCE</li>
<li>process.cwd() + /views'
<ul>
<li><strong>cwd</strong>: current working directory (based on which file is starting the server; i.e. calling nodeJS)
<ul>
<li>Here, it is package.json</li>
<li>Because the server starts here, cwd becomes the cwd, not the src folder</li>
</ul>
</li>
<li>This is where express will look to see the views</li>
<li>This means we need to create a views folder</li>
</ul>
</li>
</ul>
<h2 id="partials">Partials</h2>
<p>Pug is great, but it can get repetitive. Avoid that by creating partials</p>
<ol>
<li>In ./views, create ./partials</li>
<li>Create footer.pug in ./partials</li>
<li>In the main page pug, add the following
<ul>
<li>include partials/footer.pug</li>
</ul>
</li>
</ol>
<h2 id="inheritance-extends-and-block">Inheritance: Extends and Block</h2>
<h3 id="template-inheritance-block-and-extends-keywords">Template Inheritance: block and extends keywords</h3>
<ul>
<li>block: simply a &lsquo;block&rsquo; of Pug that a child tempalte may replace.
<ul>
<li>recursive process</li>
<li>It can provide default content (optional)</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// - layout.pug
</span><span style="color:#75715e"></span><span style="color:#a6e22e">html</span>
   <span style="color:#a6e22e">head</span>
      <span style="color:#a6e22e">title</span> <span style="color:#a6e22e">My</span> <span style="color:#a6e22e">Site</span> <span style="color:#f92672">-</span><span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#a6e22e">title</span>}
      <span style="color:#a6e22e">block</span> <span style="color:#a6e22e">scripts</span>
         <span style="color:#a6e22e">scripts</span>(<span style="color:#a6e22e">src</span> <span style="color:#e6db74">&#39;.jquery.js&#39;</span>)
      <span style="color:#a6e22e">body</span>
         <span style="color:#a6e22e">block</span> <span style="color:#a6e22e">content</span>
         <span style="color:#a6e22e">block</span> <span style="color:#a6e22e">foot</span>
            <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#a6e22e">footer</span>
               <span style="color:#a6e22e">p</span> <span style="color:#a6e22e">some</span> <span style="color:#a6e22e">footer</span> <span style="color:#a6e22e">content</span>
</code></pre></div><ul>
<li>extends: to extend a layout, create a new file and use the &lsquo;extends&rsquo; directive with a path to the parent template. Then, define one or more blocks to override the parent block conent.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// - page-a.pug
</span><span style="color:#75715e"></span><span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">layout</span>.<span style="color:#a6e22e">pug</span>

<span style="color:#a6e22e">block</span> <span style="color:#a6e22e">scripts</span>
   <span style="color:#a6e22e">script</span>(<span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;/jquery.js)
</span><span style="color:#e6db74">   script(src=&#39;</span><span style="color:#f92672">/</span><span style="color:#a6e22e">pets</span>.<span style="color:#a6e22e">js</span>)

<span style="color:#a6e22e">block</span> <span style="color:#a6e22e">content</span>
   <span style="color:#a6e22e">h1</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">title</span>
   <span style="color:#f92672">-</span> <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pets</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;cat&#39;</span>, <span style="color:#e6db74">&#39;dog&#39;</span>]
   <span style="color:#a6e22e">each</span> <span style="color:#a6e22e">petName</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">pets</span>
      <span style="color:#a6e22e">include</span> <span style="color:#a6e22e">pet</span>.<span style="color:#a6e22e">pug</span>
</code></pre></div><h3 id="what-to-do-next">What to do next?</h3>
<ol>
<li>Create layout.pug</li>
<li>Copy paste the basic html layout</li>
<li>Delete all basic html in other pug and add &mdash;&gt; extends layout.pug
<ul>
<li>home.pug, watch.pug, edit.pug will extend layout.pug</li>
</ul>
</li>
</ol>
<h2 id="variables">${variables}</h2>
<h3 id="how-to-create-variables">How to create variables</h3>
<ol>
<li>
<p>In the layout.pug, create a variable</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">head</span>
     <span style="color:#a6e22e">title</span> <span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#a6e22e">pageTitle</span>} <span style="color:#f92672">|</span> <span style="color:#a6e22e">MyTube</span>
</code></pre></div></li>
<li>
<p>Check which controller is rendering this. Here it&rsquo;s videoController.js</p>
</li>
<li>
<p>Render the variable</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">trending</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt;
   <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">render</span>(<span style="color:#e6db74">&#34;home&#34;</span>, {<span style="color:#a6e22e">pageTitle</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Home&#34;</span>});
</code></pre></div></li>
</ol>
<h2 id="conditionals-iteration-mixins">conditionals, iteration, mixins</h2>
<ul>
<li><strong>#{text}</strong> if we are adding additional text after this
<ul>
<li>e.g. #{text} | text</li>
</ul>
</li>
<li><strong>h1=text</strong> otherwise &ndash;&gt; this has created a variable</li>
</ul>
<h3 id="conditionals">Conditionals</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#960050;background-color:#1e0010">#</span><span style="color:#a6e22e">user</span>
   <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">description</span>
      <span style="color:#a6e22e">h2</span>.<span style="color:#a6e22e">green</span> <span style="color:#a6e22e">Description</span>
      <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">description</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">description</span>
   <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">authorized</span>
      <span style="color:#a6e22e">h2</span>.<span style="color:#a6e22e">blue</span> <span style="color:#a6e22e">Description</span>
      <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">description</span>.
         <span style="color:#a6e22e">User</span> <span style="color:#a6e22e">has</span> <span style="color:#a6e22e">no</span> <span style="color:#a6e22e">description</span>,
         <span style="color:#a6e22e">why</span> <span style="color:#a6e22e">not</span> <span style="color:#a6e22e">add</span> <span style="color:#a6e22e">one</span>...
   <span style="color:#66d9ef">else</span>
      <span style="color:#a6e22e">h2</span>.<span style="color:#a6e22e">red</span> <span style="color:#a6e22e">Description</span>
      <span style="color:#a6e22e">p</span>.<span style="color:#a6e22e">description</span> <span style="color:#a6e22e">User</span> <span style="color:#a6e22e">has</span> <span style="color:#a6e22e">no</span> <span style="color:#a6e22e">description</span>
</code></pre></div><h3 id="iteration-list-of-elements">Iteration (List of elements)</h3>
<ol>
<li>Create an array variable in the controller and render it</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">trending</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
	<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">videos</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">10</span>]; <span style="color:#f92672">---&gt;</span> <span style="color:#a6e22e">can</span> <span style="color:#a6e22e">be</span> <span style="color:#a6e22e">objects</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">array</span>
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">render</span>(<span style="color:#e6db74">&#34;home&#34;</span>, { <span style="color:#a6e22e">pageTitle</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Home&#34;</span>, <span style="color:#a6e22e">videos</span> });
};
</code></pre></div><ol start="2">
<li>On the page.pug I want this iteration to take place, use &lsquo;each&rsquo; to call this iteration</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">    <span style="color:#a6e22e">ul</span>
        <span style="color:#a6e22e">each</span> <span style="color:#a6e22e">video</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">videos</span>
            <span style="color:#a6e22e">li</span><span style="color:#f92672">=</span><span style="color:#a6e22e">video</span>
</code></pre></div><h3 id="mixins--partials">Mixins == Partials</h3>
<p>&mdash;&gt; Similar to partials, but mixins receive data</p>
<ol>
<li>
<p>Create a mixins folder ./views and video.pug</p>
</li>
<li>
<p>Then add the repeating section</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">mixin</span> <span style="color:#a6e22e">video</span>(<span style="color:#a6e22e">nameOfData</span>)
    <span style="color:#a6e22e">div</span>
        <span style="color:#a6e22e">h4</span>
            <span style="color:#a6e22e">a</span>(<span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">`/vidoes/#{video.id}`</span>)<span style="color:#f92672">=</span><span style="color:#a6e22e">video</span>.<span style="color:#a6e22e">title</span>
        <span style="color:#a6e22e">ul</span>
            <span style="color:#a6e22e">li</span> <span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#a6e22e">video</span>.<span style="color:#a6e22e">rating</span>}<span style="color:#f92672">/</span><span style="color:#ae81ff">5</span>
            <span style="color:#a6e22e">li</span> <span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#a6e22e">video</span>.<span style="color:#a6e22e">comments</span>} <span style="color:#a6e22e">comments</span>.
            <span style="color:#a6e22e">li</span> <span style="color:#a6e22e">Posted</span> <span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#a6e22e">video</span>.<span style="color:#a6e22e">createdAt</span>}
            <span style="color:#a6e22e">li</span> <span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#a6e22e">video</span>.<span style="color:#a6e22e">views</span>} <span style="color:#a6e22e">views</span>.
</code></pre></div><ol start="3">
<li>This mixins code can be reused on any pages like below!
<ul>
<li>Must &lsquo;include mixins/video&rsquo;</li>
<li>Add it by +mixinsPageName</li>
</ul>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">include</span> <span style="color:#a6e22e">mixins</span><span style="color:#f92672">/</span><span style="color:#a6e22e">video</span>
...
        <span style="color:#a6e22e">each</span> <span style="color:#a6e22e">nameIGive</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">nameOfData</span>
            <span style="color:#f92672">+</span><span style="color:#a6e22e">video</span>(<span style="color:#a6e22e">nameIGive</span>)
</code></pre></div><h2 id="references-1">References</h2>
<p><a href="https://medium.com/jspoint/pug-js-to-make-your-life-easier-with-html-templates-9c62273626e0">Hilwarale, Uday, &ldquo;Pug.js to make your life easier with HTML templates,&rdquo; Medium, March 22, 2018.</a></p>
<p><a href="https://pugjs.org/language/iteration.html">Pug Official Documentation: Iteration</a></p>
<p><a href="https://pugjs.org/language/inheritance.html">Pugs Official Documentation: Inheritance</a></p>
<p><a href="https://pugjs.org/language/includes.html">Pugs Official Documentation: Includes</a></p>
]]></content>
        </item>
        
        <item>
            <title>Server Standards</title>
            <link>https://haleyjung.github.io/posts/2021/12/server-standards/</link>
            <pubDate>Wed, 29 Dec 2021 14:40:44 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/12/server-standards/</guid>
            <description>How to set up a Server Install in Terminal  npm init  creates package.json   npm i express  creates package-lock.json and node_modules folder where express folder can be found package.json now includes express as dependencies *Create .gitignore and add /node_modules   npm i @babel/core @babel/node @babel/preset-env &amp;ndash;save-dev  babeljs.io adds babel as devDependencies   touch babel.config.json  copy-paste json code: {&amp;ldquo;presets&amp;rdquo;: [&amp;quot;@babel/preset-env&amp;quot;]} Now I can use babel by enabling presets   npm i nodemon &amp;ndash;save-dev  A package that watches the files and restarts when a change has been made so I won&amp;rsquo;t have to &amp;ldquo;npm run dev&amp;rdquo; every time   Update &amp;ldquo;scripts: {}&amp;rdquo; in package.</description>
            <content type="html"><![CDATA[<h2 id="how-to-set-up-a-server">How to set up a Server</h2>
<h3 id="install-in-terminal">Install in Terminal</h3>
<ol>
<li>npm init
<ul>
<li>creates package.json</li>
</ul>
</li>
<li>npm i express
<ul>
<li>creates package-lock.json and node_modules folder where <strong>express</strong> folder can be found</li>
<li>package.json now includes express as <strong>dependencies</strong></li>
<li>*Create .gitignore and add /node_modules</li>
</ul>
</li>
<li>npm i @babel/core @babel/node @babel/preset-env &ndash;save-dev
<ul>
<li>babeljs.io</li>
<li>adds babel as devDependencies</li>
</ul>
</li>
<li>touch babel.config.json
<ul>
<li>copy-paste json code: {&ldquo;presets&rdquo;: [&quot;@babel/preset-env&quot;]}</li>
<li>Now I can use babel by enabling presets</li>
</ul>
</li>
<li>npm i nodemon &ndash;save-dev
<ul>
<li>A package that watches the files and restarts when a change has been made so I won&rsquo;t have to &ldquo;npm run dev&rdquo; every time</li>
</ul>
</li>
<li>Update &ldquo;scripts: {}&rdquo; in package.json
<ul>
<li>&ldquo;dev&rdquo;: &ldquo;nodemon &ndash;exec babel-node src/server.js&rdquo;</li>
</ul>
</li>
<li>npm i morgan
<ul>
<li>HTTP request logger middleware for node.js</li>
</ul>
</li>
<li>npm i pug
<ul>
<li>A high performance HTML template engine</li>
<li>In server.js: app.set(&ldquo;view engine&rdquo;, &ldquo;pug&rdquo;)</li>
<li>create a views folder inside /.src</li>
<li>create home.pug</li>
<li>In server.js: app.set(&ldquo;views&rdquo;, process.cwd() + &ldquo;/src/views&rdquo;);</li>
</ul>
</li>
<li>link(rel=&ldquo;stylesheet&rdquo; href=&ldquo;<a href="https://unpkg.com/mvp.css%22">https://unpkg.com/mvp.css&quot;</a>)
<ul>
<li>Add to the layout.pug</li>
<li>Default stype for minimalist css style</li>
</ul>
</li>
</ol>
<p>NOTE: npm run dev OR Ctrl+C to kill the server</p>
<h2 id="preliminary-server-setup">Preliminary Server Setup</h2>
<h3 id="1-plan">1. PLAN</h3>
<ol>
<li>Plan a user flow with routers and controllers in a markdown file</li>
</ol>
<ul>
<li>Routing refers to <em>how an application&rsquo;s endpoints(URIs) respond to client requests.</em></li>
<li>Define routing using methods of the Express app object that correspond to HTTP Methods: app.get(), app.post() etc.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#960050;background-color:#1e0010">##</span> <span style="color:#a6e22e">Routers</span>

<span style="color:#960050;background-color:#1e0010">/ -&gt; Home &lt;br&gt;</span>
<span style="color:#960050;background-color:#1e0010">/join -&gt; Join &lt;br&gt;</span>
<span style="color:#960050;background-color:#1e0010">/login -&gt; Login &lt;br&gt;</span>
<span style="color:#960050;background-color:#1e0010">/search -&gt; Search &lt;br&gt;</span>

<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">nbsp</span>;

<span style="color:#e6db74">/users/</span><span style="color:#f92672">:</span><span style="color:#a6e22e">id</span> <span style="color:#f92672">-&gt;</span> <span style="color:#a6e22e">See</span> <span style="color:#a6e22e">User</span> <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">br</span><span style="color:#f92672">&gt;</span>
<span style="color:#960050;background-color:#1e0010">/users/logout -&gt; Logout &lt;br&gt;</span>
<span style="color:#960050;background-color:#1e0010">/users/edit -&gt; Edit My Profile &lt;br&gt;</span>
<span style="color:#960050;background-color:#1e0010">/users/delete -&gt; Delete My Profile &lt;br&gt;</span>

<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">nbsp</span>;

<span style="color:#e6db74">/videos/</span><span style="color:#f92672">:</span><span style="color:#a6e22e">id</span> <span style="color:#f92672">-&gt;</span> <span style="color:#a6e22e">See</span> <span style="color:#a6e22e">Video</span> <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">br</span><span style="color:#f92672">&gt;</span>
<span style="color:#e6db74">/videos/</span><span style="color:#f92672">:</span><span style="color:#a6e22e">id</span><span style="color:#f92672">/</span><span style="color:#a6e22e">edit</span> <span style="color:#f92672">-&gt;</span> <span style="color:#a6e22e">Edit</span> <span style="color:#a6e22e">Video</span> <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">br</span><span style="color:#f92672">&gt;</span>
<span style="color:#e6db74">/videos/</span><span style="color:#f92672">:</span><span style="color:#a6e22e">id</span><span style="color:#f92672">/</span><span style="color:#66d9ef">delete</span> <span style="color:#f92672">-&gt;</span> <span style="color:#a6e22e">Delete</span> <span style="color:#a6e22e">Video</span> <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">br</span><span style="color:#f92672">&gt;</span>
<span style="color:#960050;background-color:#1e0010">/videos/upload -&gt; Upload Video &lt;br&gt;</span>

<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">nbsp</span>;

<span style="color:#960050;background-color:#1e0010">/videos/comments -&gt; Comment on a video &lt;br&gt;</span>
<span style="color:#960050;background-color:#1e0010">/videos/comments/delete -&gt; Delete comment &lt;br&gt;</span>
</code></pre></div><h3 id="2-files">2. FILES</h3>
<ol>
<li>Create a <strong>src</strong> folder to store <strong>server.js</strong></li>
<li>Create a <strong>routers</strong> folder to store router js files:
<ul>
<li>globalRouter.js</li>
<li>userRouter.js</li>
<li>videoRouter.js</li>
</ul>
</li>
</ol>
<h3 id="3-test-server-in-serverjs">3. TEST SERVER in server.js</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">express</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;express&#34;</span>;

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">PORT</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">4000</span>;

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">express</span>();

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">handleListening</span> <span style="color:#f92672">=</span> () =&gt;
	<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`Server listening on port http://localhost:</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">PORT</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);

<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#a6e22e">PORT</span>, <span style="color:#a6e22e">handleListening</span>);
</code></pre></div><h3 id="4-import-routers--middlewaremorgan-in-serverjs">4. IMPORT ROUTERS &amp; MIDDLEWARE(MORGAN) in server.js</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">express</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;express&#34;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">morgan</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;morgan&#34;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">globalRouter</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;./routers/globalRouter&#34;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">videoRouter</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;./routers/videoRouter&#34;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">userRouter</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;./routers/userRouter&#34;</span>;

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">PORT</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">4000</span>;

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">express</span>();
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">logger</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">morgan</span>(<span style="color:#e6db74">&#34;dev&#34;</span>);

<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">logger</span>);
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#a6e22e">globalRouter</span>);
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#e6db74">&#34;/users&#34;</span>, <span style="color:#a6e22e">userRouter</span>);
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#e6db74">&#34;/videos&#34;</span>, <span style="color:#a6e22e">videoRouter</span>);
</code></pre></div><h3 id="5-setup-router-js-files">5. SETUP ROUTER JS FILES</h3>
<ul>
<li>Routers are beginning of URLs</li>
<li>They are like mini applications</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">express</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;express&#34;</span>;

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">fileName</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">express</span>.<span style="color:#a6e22e">Router</span>();

<span style="color:#75715e">// handleAction = a controller
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">handleAction</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Action&#34;</span>);

<span style="color:#a6e22e">fileName</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/action&#34;</span>, <span style="color:#a6e22e">handleAction</span>);

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#a6e22e">fileName</span>;
</code></pre></div><ul>
<li>Now I can access URLs such as &ldquo;localhost:4000/videos/watch&rdquo;</li>
</ul>
<h3 id="6-add-additional-routers-controllers-in-routers">6. ADD ADDITIONAL ROUTERS CONTROLLERS IN ROUTERS</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">handleAction</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Action&#34;</span>);

<span style="color:#a6e22e">fileName</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/action&#34;</span>, <span style="color:#a6e22e">handleAction</span>);
</code></pre></div><ul>
<li>BUT this list will grow and go out of hand!</li>
</ul>
<h3 id="7-separate-routers-and-controllers">7. SEPARATE ROUTERS AND CONTROLLERS</h3>
<ol>
<li>create a controllers folder</li>
<li>create controller js files
<ul>
<li>userController.js</li>
<li>videoController.js</li>
</ul>
</li>
<li>In routers files, delete all controllers: i.e. the const variables with (req, res)</li>
<li>First look at what routers are in globalRouter.js and add the controllers accordingly.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// videoController.js
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">trending</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Home Page Videos);
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">// userController.js
</span><span style="color:#e6db74">const join = (req, res) =&gt; res.send(&#34;</span><span style="color:#a6e22e">Join</span><span style="color:#960050;background-color:#1e0010">&#34;</span>);
</code></pre></div><h3 id="8-bring-separated-controllers-to-routers">8. BRING SEPARATED CONTROLLERS TO ROUTERS</h3>
<p><strong>EXPORT IN CONTROLLERS</strong></p>
<ol>
<li>Add export at the front of const
<ul>
<li>export const trending = (req, res) =&gt; res.send(&rdquo;../folderName/fileName&quot;);</li>
</ul>
</li>
</ol>
<p><strong>IMPORT IN ROUTERS</strong></p>
<ol>
<li>
<p>Determine which controller should be imported in each router</p>
<ul>
<li>
<p>[e.g.] In userRouter &mdash;&gt; import {edit, remove} from &ldquo;../controllers/userController&rdquo;;</p>
</li>
<li>
<p>[e.g.] In globalRouter &mdash;&gt; import {trending} from &ldquo;../controllers/videoController&rdquo;;</p>
</li>
<li>
<p>Not using {} means I&rsquo;m export default, which can only contain one thing. Since I&rsquo;me exporting muliple controllers, export it as an object.</p>
</li>
</ul>
</li>
<li>
<p>Update the router URLs to match the imported controllers</p>
<ul>
<li>&ldquo;globalRouter.get(&quot;/&rdquo;, handleHome)
<ul>
<li>handleHome to <em>trending</em></li>
</ul>
</li>
<li>&ldquo;globalRouter.get(&quot;/join&rdquo;, handleJoin)
<ul>
<li>handleJoin to <em>join</em></li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="9-parameters---for-urls-to-have-variables-inside">9. PARAMETERS - FOR URLs TO HAVE VARIABLES INSIDE</h3>
<ul>
<li>Express uses parameter (/:id) to assign individual id (a number variable) to videos</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">videoRouter</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/upload&#34;</span>, <span style="color:#a6e22e">upload</span>);
<span style="color:#a6e22e">videoRouter</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/:id&#34;</span>, <span style="color:#a6e22e">see</span>);
<span style="color:#a6e22e">videoRouter</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/:id/edit&#34;</span>, <span style="color:#a6e22e">edit</span>);
<span style="color:#a6e22e">videoRouter</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/:id/delete&#34;</span>, <span style="color:#a6e22e">deleteVideo</span>);
</code></pre></div><h3 id="10-advanced-route-paths">10. ADVANCED: ROUTE PATHS</h3>
<blockquote>
<p>Route paths, in combination wiht a request method, define the endpoints at which requests can be made. Route paths can be strings, string patterns, or <em>regular expressions</em>.</p>
</blockquote>
<h3 id="regular-expressions">REGULAR EXPRESSIONS</h3>
<h4 id="resources"><strong>Resources</strong></h4>
<p><a href="https://www.regexpal.com/">Practice Regular Expressions 1</a></p>
<p><a href="https://regexr.com/">Practice Regular Expressions 2</a></p>
<p><a href="https://expressjs.com/en/guide/routing.html">expressjs.com</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions">MDN</a></p>
<h4 id="what-are-regular-expressions"><strong>What are regular expressions?</strong></h4>
<ul>
<li>Regular expressions are a sequence of characters that are used for matching character combinations in strings for text matching/searching.</li>
<li>In JavaScript, regular expressions are search patterns (JavaScript objects) from sequences of characters.</li>
<li>RegExp makes searching and matching of strings easier and faster.</li>
</ul>
<h4 id="rules"><strong>Rules</strong></h4>
<ul>
<li>The characters ?, +, *, and () are subsets of their regular expression counterparts.</li>
<li>The hyphen (-) and the dot (.) are interpreted literally by string-based paths.</li>
<li>If you need to use the dollar character ($) in a path string, enclose it escaped within ([ and ]).</li>
<li>For example, the path string for requests at “/data/$book”, would be “/data/([$])book”.</li>
</ul>
<p><strong>Examples</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#ae81ff">1.</span> <span style="color:#a6e22e">This</span> <span style="color:#a6e22e">route</span> <span style="color:#a6e22e">path</span> <span style="color:#a6e22e">will</span> <span style="color:#a6e22e">match</span> <span style="color:#a6e22e">requests</span> <span style="color:#a6e22e">to</span> <span style="color:#f92672">/</span><span style="color:#a6e22e">about</span>.
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/about&#39;</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) {
  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#39;about&#39;</span>)
})

<span style="color:#ae81ff">2.</span> <span style="color:#a6e22e">This</span> <span style="color:#a6e22e">route</span> <span style="color:#a6e22e">path</span> <span style="color:#a6e22e">will</span> <span style="color:#a6e22e">match</span> <span style="color:#a6e22e">acd</span> <span style="color:#a6e22e">and</span> <span style="color:#a6e22e">abcd</span>.
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/ab?cd&#39;</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) {
  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#39;ab?cd&#39;</span>)
})

<span style="color:#ae81ff">3.</span> <span style="color:#a6e22e">This</span> <span style="color:#a6e22e">route</span> <span style="color:#a6e22e">path</span> <span style="color:#a6e22e">will</span> <span style="color:#a6e22e">match</span> <span style="color:#a6e22e">abcd</span>, <span style="color:#a6e22e">abbcd</span>, <span style="color:#a6e22e">abbbcd</span>, <span style="color:#a6e22e">and</span> <span style="color:#a6e22e">so</span> <span style="color:#a6e22e">on</span>.
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/ab+cd&#39;</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) {
  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#39;ab+cd&#39;</span>)
})

<span style="color:#ae81ff">4.</span> <span style="color:#a6e22e">This</span> <span style="color:#a6e22e">route</span> <span style="color:#a6e22e">path</span> <span style="color:#a6e22e">will</span> <span style="color:#a6e22e">match</span> <span style="color:#a6e22e">abcd</span>, <span style="color:#a6e22e">abxcd</span>, <span style="color:#a6e22e">abRANDOMcd</span>, <span style="color:#a6e22e">ab123cd</span>, <span style="color:#a6e22e">and</span> <span style="color:#a6e22e">so</span> <span style="color:#a6e22e">on</span>.
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/ab*cd&#39;</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) {
  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#39;ab*cd&#39;</span>)
})

<span style="color:#ae81ff">5.</span> <span style="color:#a6e22e">This</span> <span style="color:#a6e22e">route</span> <span style="color:#a6e22e">path</span> <span style="color:#a6e22e">will</span> <span style="color:#a6e22e">match</span> <span style="color:#f92672">/</span><span style="color:#a6e22e">abe</span> <span style="color:#a6e22e">and</span> <span style="color:#f92672">/</span><span style="color:#a6e22e">abcde</span>.
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/ab(cd)?e&#39;</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) {
  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#39;ab(cd)?e&#39;</span>)
})

<span style="color:#ae81ff">6.</span> <span style="color:#a6e22e">This</span> <span style="color:#a6e22e">route</span> <span style="color:#a6e22e">path</span> <span style="color:#a6e22e">will</span> <span style="color:#a6e22e">match</span> <span style="color:#a6e22e">anything</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">an</span> <span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">a</span><span style="color:#960050;background-color:#1e0010">”</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">it</span>.
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">/a/</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) {
  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#39;/a/&#39;</span>)
})

<span style="color:#ae81ff">7.</span> <span style="color:#a6e22e">This</span> <span style="color:#a6e22e">route</span> <span style="color:#a6e22e">path</span> <span style="color:#a6e22e">will</span> <span style="color:#a6e22e">match</span> <span style="color:#a6e22e">butterfly</span> <span style="color:#a6e22e">and</span> <span style="color:#a6e22e">dragonfly</span>, <span style="color:#a6e22e">but</span> <span style="color:#a6e22e">not</span> <span style="color:#a6e22e">butterflyman</span>, <span style="color:#a6e22e">dragonflyman</span>, <span style="color:#a6e22e">and</span> <span style="color:#a6e22e">so</span> <span style="color:#a6e22e">on</span>.
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">/.*fly$/</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) {
  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#39;/.*fly$/&#39;</span>)
})

</code></pre></div><ul>
<li>SO, if I want my videos to have <em>number</em> id only, I can add the regular expression like the following:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">videoRouter</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/upload&#34;</span>, <span style="color:#a6e22e">upload</span>);
<span style="color:#a6e22e">videoRouter</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/:id(\\d+)&#34;</span>, <span style="color:#a6e22e">see</span>);
<span style="color:#a6e22e">videoRouter</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/:id(\\d+)/edit&#34;</span>, <span style="color:#a6e22e">edit</span>);
<span style="color:#a6e22e">videoRouter</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/:id(\\d+)/delete&#34;</span>, <span style="color:#a6e22e">deleteVideo</span>);
</code></pre></div><h2 id="additional-notes">Additional Notes</h2>
<h3 id="how-to-ensure-the-copyrighted-year-gets-automatically-updated">How to ensure the copyrighted year gets automatically updated?</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#f92672">&amp;</span><span style="color:#a6e22e">copy</span>; <span style="color:#960050;background-color:#1e0010">#</span>{<span style="color:#66d9ef">new</span> Date().<span style="color:#a6e22e">getFullYear</span>()}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Functional Programming</title>
            <link>https://haleyjung.github.io/posts/2021/12/functional-programming/</link>
            <pubDate>Mon, 20 Dec 2021 15:12:08 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/12/functional-programming/</guid>
            <description>Paradigm &amp;amp; Principles JavaScript can be written in either a declarative and imperative style
Declarative (Functional Programming)  Focuses on what to execute / what is being done Abstracts control flow (how) Focuses on data flow Code is composed of expressions: a piece of code that evaluates to some value  Imperative (Object Oriented Programming)  Defines control flow Specific steps to achieve a result Code is composed of statements: a piece of code that performs some action  Paradigm: MODEL  Nowadays functional programming is more popular Some programming languages are explicitly functional All code written in these languges must follow functional principles (e.</description>
            <content type="html"><![CDATA[<h2 id="paradigm--principles">Paradigm &amp; Principles</h2>
<p>JavaScript can be written in either a declarative and imperative style</p>
<h3 id="declarative-functional-programming">Declarative (Functional Programming)</h3>
<ul>
<li>Focuses on what to execute / what is being done</li>
<li>Abstracts control flow (how)</li>
<li>Focuses on data flow</li>
<li>Code is composed of <em>expressions</em>: a piece of code that evaluates to some value</li>
</ul>
<h3 id="imperative-object-oriented-programming">Imperative (Object Oriented Programming)</h3>
<ul>
<li>Defines control flow</li>
<li>Specific steps to achieve a result</li>
<li>Code is composed of <em>statements</em>: a piece of code that performs some action</li>
</ul>
<h3 id="paradigm-model">Paradigm: MODEL</h3>
<ul>
<li>Nowadays functional programming is more popular</li>
<li>Some programming languages are explicitly functional</li>
<li>All code written in these languges must follow functional principles (e.g. Cloure, Golang, JS, Scala, Haskell)</li>
<li>Better to stick with one paradigm otherwise it becomes difficult to understand the entire code</li>
</ul>
<h2 id="pure-vs-impure-functions">Pure vs. Impure Functions</h2>
<p>A pure function is a function without any side effects.</p>
<p>An impure function is a function that contains one or more side effects.</p>
<h3 id="pure-functions">Pure Functions</h3>
<ul>
<li>Foundations of functional programming</li>
<li>Given the same inputs, always returns the same output
<ul>
<li>same arguments =&gt; same return value</li>
<li>Consistent results</li>
</ul>
</li>
<li>Have referential transparency: can replace function call with its return value without changing the meaning of the program (can be reused)</li>
<li>No side-effects (no ERROR)</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">add</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">x</span>,<span style="color:#a6e22e">y</span>) =&gt; <span style="color:#a6e22e">x</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">y</span>;
<span style="color:#a6e22e">add</span>(<span style="color:#a6e22e">x</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>, <span style="color:#a6e22e">y</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">==&gt;</span> <span style="color:#ae81ff">4</span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">substract</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">x</span>,<span style="color:#a6e22e">y</span>) =&gt; <span style="color:#a6e22e">x</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">y</span>;
</code></pre></div><h3 id="impure-functions">Impure Functions</h3>
<ul>
<li>BAD PRACTICE</li>
<li>The function mutates the original state</li>
<li>Depends on the existence of &lsquo;x&rsquo; variable, so this causes side effect (ReferenceERR if x is not defined)</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">24</span>;
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">impureAdd</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">y</span> =&gt; <span style="color:#a6e22e">x</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">y</span>;

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">impureDouble</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">y</span> =&gt; <span style="color:#a6e22e">x</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">y</span>;
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">impureDouble</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">x</span> =&gt; {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;doubling&#39;</span>, <span style="color:#a6e22e">x</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>;
}
</code></pre></div><table>
<thead>
<tr>
<th>Pure Functions</th>
<th>Impure Functions</th>
</tr>
</thead>
<tbody>
<tr>
<td>Has no side effects</td>
<td>May have side effects</td>
</tr>
<tr>
<td>Returns the same result if same arguments are passed in no matter how many times it runs</td>
<td>May return different result if the same arguments are passed in on multiple runs</td>
</tr>
<tr>
<td>Always returns something</td>
<td>May take effect without returning anything</td>
</tr>
<tr>
<td>Can be tested easily</td>
<td>May be more difficult to test due to its potential side effects</td>
</tr>
</tbody>
</table>
<p><strong>References</strong>
<a href="https://www.educative.io/edpresso/pure-function-vs-impure-function">Sofela, Oluwatobi, &ldquo;Pure functino vs. impure function&rdquo;, Educative.io</a>
<a href="https://dev.to/sanspanic/pure-vs-impure-functions-50aj">Spanik, Sandra, &ldquo;Pure vs Impure Functions,&rdquo; DEV, May 20, 2021</a></p>
<h2 id="fuctional-programming-core-principles">Fuctional Programming: Core Principles</h2>
<h3 id="avoid-side-effects-ie-mutating-original-var">Avoid side-effects (i.e. mutating original var)</h3>
<ul>
<li>Functions don&rsquo;t happen synchronously (i.e. line by line; in real time)</li>
<li>Side effects occur when a function modifies a value outside its local environment (lexical scope)</li>
<li>The function has some observable effect besides its return value (intended or unintended)</li>
<li>e.g. Modifying any external variable or object property / Triggering any external process</li>
<li>FP avoids side effects because it makes the effects of a program easier to <em>understand, readable, debug, and test</em></li>
<li>Knowledge of a function&rsquo;s context and history are not required: only its arguments and internal logic</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">xArr</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">multipleX</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">xArr</span>, <span style="color:#a6e22e">multipler</span>) <span style="color:#f92672">-</span> <span style="color:#f92672">&gt;</span> {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">copyArr</span> <span style="color:#f92672">=</span> [...<span style="color:#a6e22e">xArr</span>];
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">copyArr</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">+=</span><span style="color:#ae81ff">1</span>) {
        <span style="color:#a6e22e">copyArr</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">copyArr</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">+</span> <span style="color:#a6e22e">multiplier</span>;
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">copyArr</span>;
}

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;Original: &#39;</span>, <span style="color:#a6e22e">xArr</span>)
<span style="color:#f92672">---&gt;</span> <span style="color:#a6e22e">Original</span><span style="color:#f92672">:</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">multiplyX</span>(<span style="color:#a6e22e">xArr</span>, <span style="color:#a6e22e">multiplier</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>));
<span style="color:#f92672">---&gt;</span> [<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">6</span>]

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;DOES THIS CHANGE&#34;</span>, <span style="color:#a6e22e">xArr</span>);
<span style="color:#f92672">---&gt;</span> <span style="color:#a6e22e">This</span> <span style="color:#a6e22e">is</span> <span style="color:#a6e22e">to</span> <span style="color:#a6e22e">check</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">the</span> <span style="color:#a6e22e">ode</span> <span style="color:#a6e22e">impementation</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">avoiding</span> <span style="color:#a6e22e">side</span> <span style="color:#a6e22e">effect</span> <span style="color:#a6e22e">works</span>. <span style="color:#a6e22e">The</span> <span style="color:#a6e22e">output</span> <span style="color:#a6e22e">is</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>], <span style="color:#a6e22e">which</span> <span style="color:#a6e22e">means</span> <span style="color:#a6e22e">the</span> <span style="color:#a6e22e">original</span> <span style="color:#a6e22e">array</span> <span style="color:#a6e22e">didn</span><span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">t</span> <span style="color:#a6e22e">mutate</span>, <span style="color:#a6e22e">and</span> <span style="color:#a6e22e">the</span> <span style="color:#a6e22e">side</span> <span style="color:#a6e22e">effect</span> <span style="color:#a6e22e">was</span> <span style="color:#a6e22e">avoided</span>.
</code></pre></div><blockquote>
<p><em>SPREAD ES6 NOTATION TO CREATE A COPY: [&hellip;xArr]</em> &gt;
**You should always copy an array when you bring it into a function. So then you can cut it up from there. Additional note, JavaScript is single-threaded. **</p>
</blockquote>
<h3 id="avoid-shared-state">Avoid shared state</h3>
<ul>
<li>Shared state is any variable, object, or property that exsits in a shared scope</li>
<li>Includes global and closure scopes</li>
<li>Avoiding shared state has a number of benefits</li>
<li>Function calls are completely independent
<ul>
<li>Dramatically simplifies changes &amp; refactoring</li>
</ul>
</li>
<li>The order and timing of function calls doesn&rsquo;t change their result
<ul>
<li>Avoids timing dependencies and race conditions</li>
</ul>
</li>
<li>Prevents ripple effects of modifying part of the code</li>
<li>For asynchronous JavaScript that allows multiple function calls, we need to worry about the race conditions</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">temperature</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">70</span>;
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">increaseTempByFive</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">temp</span> =&gt; <span style="color:#a6e22e">temp</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span>;

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">decreaseTempByFive</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">temp</span> =&gt; <span style="color:#a6e22e">temp</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>;

<span style="color:#a6e22e">temperature</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">increaseTempByFive</span>(<span style="color:#a6e22e">temperature</span>);

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;First Call&#39;</span>, <span style="color:#a6e22e">temperature</span>);
<span style="color:#f92672">---&gt;</span> <span style="color:#a6e22e">First</span> <span style="color:#a6e22e">Call</span> <span style="color:#ae81ff">75</span>

<span style="color:#75715e">//What happens if I add setTimeOut?
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">setTimeOut</span>(<span style="color:#a6e22e">handler</span><span style="color:#f92672">:</span> () =&gt; {
    <span style="color:#a6e22e">temperature</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">increaseTempByFive</span>(<span style="color:#a6e22e">temperature</span>);
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;Second Call&#39;</span>, <span style="color:#a6e22e">temperature</span>);
}, <span style="color:#a6e22e">timeout</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2000</span>);
<span style="color:#f92672">---&gt;</span> <span style="color:#a6e22e">Second</span> <span style="color:#a6e22e">Call</span> <span style="color:#ae81ff">80</span> (<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">the</span> <span style="color:#a6e22e">Third</span> <span style="color:#a6e22e">Code</span> <span style="color:#a6e22e">below</span> <span style="color:#a6e22e">doesn</span><span style="color:#e6db74">&#39;t exist*)
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">setTimeOut(handler: () =&gt; {
</span><span style="color:#e6db74">    temperature = decreaseTempByFive(temperature);
</span><span style="color:#e6db74">    console.log(&#39;</span><span style="color:#a6e22e">Third</span> <span style="color:#a6e22e">Call</span><span style="color:#e6db74">&#39;, temperature);
</span><span style="color:#e6db74">}, timeout: 1000);
</span><span style="color:#e6db74">---&gt; The issue of shared state: the function calls won&#39;</span><span style="color:#a6e22e">t</span> <span style="color:#a6e22e">be</span> <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">this</span> <span style="color:#a6e22e">order</span> <span style="color:#a6e22e">because</span> <span style="color:#a6e22e">the</span> <span style="color:#a6e22e">timeout</span> <span style="color:#a6e22e">is</span> <span style="color:#ae81ff">1</span> <span style="color:#a6e22e">sec</span> <span style="color:#a6e22e">instead</span> <span style="color:#66d9ef">of</span> <span style="color:#ae81ff">2</span>; <span style="color:#a6e22e">the</span> <span style="color:#a6e22e">state</span> <span style="color:#a6e22e">itself</span> <span style="color:#a6e22e">isn</span><span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">t</span> <span style="color:#a6e22e">updating</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">real</span> <span style="color:#a6e22e">time</span>.
<span style="color:#f92672">---&gt;</span> <span style="color:#a6e22e">Third</span> <span style="color:#a6e22e">Call</span> <span style="color:#a6e22e">will</span> <span style="color:#a6e22e">be</span> <span style="color:#a6e22e">executed</span> <span style="color:#a6e22e">before</span> <span style="color:#a6e22e">Second</span> <span style="color:#a6e22e">Call</span>
<span style="color:#a6e22e">and</span> <span style="color:#a6e22e">will</span> <span style="color:#a6e22e">be</span> <span style="color:#a6e22e">Third</span> <span style="color:#a6e22e">Call</span> <span style="color:#ae81ff">73</span>, <span style="color:#a6e22e">Second</span> <span style="color:#a6e22e">Call</span> <span style="color:#ae81ff">78</span>
</code></pre></div><h3 id="avoid-mutating-state-immutability">Avoid mutating state (Immutability)</h3>
<ul>
<li>A mutable object is an object whose properties (state) can be modified after it is created</li>
<li>An immutable object is an object whose properties cannot be changed after it is created
<ul>
<li>Create copies of objects or new objects if they need to be modified</li>
<li>Return the new object and leave the original unmodified</li>
</ul>
</li>
<li>In JS, objects are inherently mutable
<ul>
<li>It&rsquo;s up to engineers to enforce the principle of immutability when writing code in a functional programming style</li>
</ul>
</li>
<li><strong>IMPORTANT</strong>
Mutating state directly can lead to <em>lossy data flow</em>
<ul>
<li>Harder to track changes to state/history</li>
<li>Harder to debug issues with state</li>
<li>Can create unexpected side effects</li>
</ul>
</li>
<li>Enforcing immutability helps curtail these issues
<ul>
<li>Helps ensure that the operations that one function is performing doesn&rsquo;t interfere with another</li>
</ul>
</li>
</ul>
<p><strong>Are there ways of doing variable assignment (alternatives to var) that might help us avoid mutations?</strong></p>
<ul>
<li><em>Object.freeze</em> allows us to freeze the object and prevents us from updating or chagning the original copy, BUT it only acts upon the object&rsquo;s key unless specified.</li>
<li>const doesn&rsquo;t prevent us reassigning the pre defined values or properties</li>
</ul>
<h3 id="use-first-class--higher-order-functions">Use first-class &amp; higher-order functions</h3>
<h4 id="first-class-functions">First Class Functions</h4>
<ul>
<li>A programming language feature, allowing functions to be:
<ul>
<li>Assigned to variables</li>
<li>Passed as arguments to other functions</li>
<li>Returned from other functions</li>
<li>Stored in data structures</li>
</ul>
</li>
<li>They are a necessity for functional programming</li>
<li>JS supports first class functions</li>
<li>In JS, <em>all functions are first class functions</em></li>
</ul>
<h4 id="higher-order-functions">Higher Order Functions</h4>
<ul>
<li>A function that takes another function as an argument or returns another function or does both</li>
<li>Often used to
<ul>
<li>Abstract or isolate functionality</li>
<li>Create utiltiy functions taht are relatively generic and can operate on a variety of data types</li>
<li>Make code mroe semantic and easiser to read</li>
</ul>
</li>
<li>Examples
<ul>
<li>Callback functions</li>
<li>Event listeners</li>
<li>Promises</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">main</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">func</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">func2</span>, <span style="color:#a6e22e">func3</span>) =&gt; {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">func1</span>(<span style="color:#ae81ff">22</span>, <span style="color:#ae81ff">10</span>));
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">func2</span>(<span style="color:#ae81ff">32</span>, <span style="color:#ae81ff">10</span>));
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">func3</span>());
  <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;THIS WORKS!&#39;</span>;
}

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">main</span>(<span style="color:#a6e22e">add</span>, <span style="color:#a6e22e">substract</span>, <span style="color:#a6e22e">name</span>))
</code></pre></div><h2 id="function-declaration-vs-function-expression">Function Declaration vs. Function Expression</h2>
<p><strong>Function Declaration</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sum</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span>;
}
</code></pre></div><p><strong>Function Expression</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">subtract</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">b</span>;
}

<span style="color:#75715e">// invocation
</span><span style="color:#75715e"></span><span style="color:#a6e22e">sum</span> (<span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">4</span>); <span style="color:#75715e">// =&gt; 10
</span><span style="color:#75715e"></span><span style="color:#a6e22e">substract</span>(<span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">4</span>); <span style="color:#75715e">// =&gt; 2
</span></code></pre></div><h2 id="benefits--downsides-of-functional-programming">Benefits &amp; Downsides of Functional Programming</h2>
<p><strong>Benefits</strong></p>
<ul>
<li>More concise</li>
<li>More predictable</li>
<li>More semantic</li>
<li>Easier to test</li>
</ul>
<p><strong>Downsides</strong></p>
<ul>
<li>Can seem more dense</li>
<li>Lots of terminology/academic lingo</li>
<li>High learning curve</li>
</ul>
<h2 id="using-functional-programming">Using Functional Programming</h2>
<h3 id="native-array-methods">Native Array Methods</h3>
<ul>
<li>One of the quickest ways to start using functional programming principles in JS is through the use of native array methods
<ul>
<li>Built-in methods (functions) that perform various operations on arrays</li>
<li>Some of which follow functional principles</li>
</ul>
</li>
<li>All of these methods are chained (through dot notation) onto array objects</li>
<li>These are alternatives to traditional loops.</li>
<li>They are more powerful, semantic and readable</li>
</ul>
<h3 id="arrayprototypeforeach">Array.prototype.forEach()</h3>
<ul>
<li>The forEach() method executes a provided function once for each array element.</li>
<li>Same as a for loop. It&rsquo;s been embedded in .forEach()</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">array1</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;b&#39;</span>, <span style="color:#e6db74">&#39;c&#39;</span>];

<span style="color:#75715e">// old way; BAD PRACTICE
</span><span style="color:#75715e"></span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">array1</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">array1</span>[<span style="color:#a6e22e">i</span>];
}

<span style="color:#a6e22e">array1</span>.<span style="color:#a6e22e">forEach</span>(<span style="color:#a6e22e">element</span> =&gt; <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">element</span>));

<span style="color:#75715e">// expected output: &#34;a&#34;
</span><span style="color:#75715e">// expected output: &#34;b&#34;
</span><span style="color:#75715e">// expected output: &#34;c&#34;
</span></code></pre></div><p>Syntax:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// Arrow function
</span><span style="color:#75715e"></span><span style="color:#a6e22e">forEach</span>((<span style="color:#a6e22e">element</span>) =&gt; { ... } )
<span style="color:#a6e22e">forEach</span>((<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">index</span>) =&gt; { ... } )
<span style="color:#a6e22e">forEach</span>((<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">index</span>, <span style="color:#a6e22e">array</span>) =&gt; { ... } )

<span style="color:#75715e">// Callback function
</span><span style="color:#75715e"></span><span style="color:#a6e22e">forEach</span>(<span style="color:#a6e22e">callbackFn</span>)
<span style="color:#a6e22e">forEach</span>(<span style="color:#a6e22e">callbackFn</span>, <span style="color:#a6e22e">thisArg</span>)

<span style="color:#75715e">// Inline callback function
</span><span style="color:#75715e"></span><span style="color:#a6e22e">forEach</span>(<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">callbackFn</span>(<span style="color:#a6e22e">element</span>) { ... })
<span style="color:#a6e22e">forEach</span>(<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">callbackFn</span>(<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">index</span>) { ... })
<span style="color:#a6e22e">forEach</span>(<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">callbackFn</span>(<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">index</span>, <span style="color:#a6e22e">array</span>){ ... })
<span style="color:#a6e22e">forEach</span>(<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">callbackFn</span>(<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">index</span>, <span style="color:#a6e22e">array</span>) { ... }, <span style="color:#a6e22e">thisArg</span>)
</code></pre></div><h3 id="arrayprototypemap">Array.prototype.map()</h3>
<ul>
<li>
<p>The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.</p>
</li>
<li>
<p>Same as iterating over an array with a for loop, and mutating the input with certain condition</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">array1</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">16</span>];

<span style="color:#75715e">// Old way; BAD PRACTICE
</span><span style="color:#75715e"></span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">array1</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">array1</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>;
}

<span style="color:#75715e">// pass a function to map
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">map1</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">array1</span>.<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">x</span> =&gt; <span style="color:#a6e22e">x</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>);

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">map1</span>);
<span style="color:#75715e">// expected output: Array [2, 8, 18, 32]
</span></code></pre></div><p>Syntax:</p>
<ul>
<li>Requires an array to &lsquo;map over&rsquo; and a callback function to apply to each element</li>
<li>Same structure as .forEach()</li>
<li>This callback function takes 3 possible parameters:
<ul>
<li>Required: the current element in the iteration</li>
<li>Optional: the current index in the iteration</li>
<li>Optional: the input array that&rsquo;s being mapped over</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// Arrow function
</span><span style="color:#75715e"></span><span style="color:#a6e22e">map</span>((<span style="color:#a6e22e">element</span>) =&gt; { ... })
<span style="color:#a6e22e">map</span>((<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">index</span>) =&gt; { ... })
<span style="color:#a6e22e">map</span>((<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">index</span>, <span style="color:#a6e22e">array</span>) =&gt; { ... })

<span style="color:#75715e">// Callback function
</span><span style="color:#75715e"></span><span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">callbackFn</span>)
<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">callbackFn</span>, <span style="color:#a6e22e">thisArg</span>)

<span style="color:#75715e">// Inline callback function
</span><span style="color:#75715e"></span><span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">callbackFn</span>(<span style="color:#a6e22e">element</span>) { ... })
<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">callbackFn</span>(<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">index</span>) { ... })
<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">callbackFn</span>(<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">index</span>, <span style="color:#a6e22e">array</span>){ ... })
<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">callbackFn</span>(<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">index</span>, <span style="color:#a6e22e">array</span>) { ... }, <span style="color:#a6e22e">thisArg</span>)
</code></pre></div><h3 id="arrayprototypefilter">Array.prototype.filter()</h3>
<ul>
<li>The filter() method creates a new array with all elements that pass the test implemented by the provided function.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">words</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;spray&#39;</span>, <span style="color:#e6db74">&#39;limit&#39;</span>, <span style="color:#e6db74">&#39;elite&#39;</span>, <span style="color:#e6db74">&#39;exuberant&#39;</span>, <span style="color:#e6db74">&#39;destruction&#39;</span>, <span style="color:#e6db74">&#39;present&#39;</span>];

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">words</span>.<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">word</span> =&gt; <span style="color:#a6e22e">word</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">6</span>);

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">result</span>);
<span style="color:#75715e">// expected output: Array [&#34;exuberant&#34;, &#34;destruction&#34;, &#34;present&#34;]
</span><span style="color:#75715e"></span>
</code></pre></div><p>Syntax:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// Arrow function
</span><span style="color:#75715e"></span><span style="color:#a6e22e">filter</span>((<span style="color:#a6e22e">element</span>) =&gt; { ... } )
<span style="color:#a6e22e">filter</span>((<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">index</span>) =&gt; { ... } )
<span style="color:#a6e22e">filter</span>((<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">index</span>, <span style="color:#a6e22e">array</span>) =&gt; { ... } )

<span style="color:#75715e">// Callback function
</span><span style="color:#75715e"></span><span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">callbackFn</span>)
<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">callbackFn</span>, <span style="color:#a6e22e">thisArg</span>)

<span style="color:#75715e">// Inline callback function
</span><span style="color:#75715e"></span><span style="color:#a6e22e">filter</span>(<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">callbackFn</span>(<span style="color:#a6e22e">element</span>) { ... })
<span style="color:#a6e22e">filter</span>(<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">callbackFn</span>(<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">index</span>) { ... })
<span style="color:#a6e22e">filter</span>(<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">callbackFn</span>(<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">index</span>, <span style="color:#a6e22e">array</span>){ ... })
<span style="color:#a6e22e">filter</span>(<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">callbackFn</span>(<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">index</span>, <span style="color:#a6e22e">array</span>) { ... }, <span style="color:#a6e22e">thisArg</span>)
</code></pre></div><h3 id="arrayprototypereduce">Array.prototype.reduce()</h3>
<ul>
<li>
<p>The reduce() method executes a user-supplied “reducer” callback function on each element of the array, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.</p>
</li>
<li>
<p>Perhaps the easiest-to-understand case for reduce() is to return the sum of all the elements in an array.</p>
</li>
<li>
<p>The reducer walks through the array element-by-element, at each step adding the current array value to the result from the previous step (this result is the running sum of all the previous steps) — until there are no more elements to add.</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">array1</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>];
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">reducer</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">previousValue</span>, <span style="color:#a6e22e">currentValue</span>) =&gt; <span style="color:#a6e22e">previousValue</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">currentValue</span>;

<span style="color:#75715e">// 1 + 2 + 3 + 4
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">array1</span>.<span style="color:#a6e22e">reduce</span>(<span style="color:#a6e22e">reducer</span>));
<span style="color:#75715e">// expected output: 10
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// 5 + 1 + 2 + 3 + 4
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">array1</span>.<span style="color:#a6e22e">reduce</span>(<span style="color:#a6e22e">reducer</span>, <span style="color:#ae81ff">5</span>));
<span style="color:#75715e">// expected output: 15
</span></code></pre></div><h2 id="problem-solving-tactics-data-types--structures">Problem Solving Tactics: Data Types &amp; Structures</h2>
<h3 id="common-data-input-typesdata-structure">Common Data Input Types/Data Structure</h3>
<ul>
<li>Lists</li>
<li>Subsets</li>
<li>Trees</li>
<li>Graphs</li>
<li>Points</li>
<li>Polygons</li>
<li>Strings</li>
</ul>
<h3 id="lists">Lists</h3>
<ul>
<li>Ordered, sequential or non-sequential items
<ul>
<li>Ordered, or arranged items in a list</li>
<li>e.g. [1, 2, 3, 4] and [4, 3, 2, 1] are both permutations that are not the same</li>
</ul>
</li>
</ul>
<h3 id="subsets">Subsets</h3>
<ul>
<li>Collections of items with no order and no duplicates that is part of a larger set
<ul>
<li>e.g. {1, 2} and {3, 4} are subsets of the larger set {1, 2, 3, 4}</li>
</ul>
</li>
</ul>
<h3 id="graphs">Graphs</h3>
<ul>
<li>Data structure that represent multiple connections and relationships between objects</li>
<li>Graphs can be directed, undirected, cyclical, and acyclical</li>
</ul>
<h2 id="hoisting">Hoisting</h2>
<blockquote>
<p>Hoisting is an internal memory management technique used by JS engines. When defining a variable name, we are able to consider two options for structuring our code.</p>
</blockquote>
<ol>
<li>Define now, assign now</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myName</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Haley&#39;</span>;
<span style="color:#a6e22e">myName</span>;
</code></pre></div><ol start="2">
<li>Define now, assign later</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myName</span>;
<span style="color:#a6e22e">myName</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Haley&#39;</span>;
<span style="color:#a6e22e">myName</span>;
</code></pre></div><blockquote>
<p>What happens if we reference a variable before it&rsquo;s initialized?</p>
</blockquote>
<ol>
<li>Define now, assign now</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">myName</span>; <span style="color:#75715e">// =&gt; ???
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myName</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Haley&#39;</span>;
<span style="color:#a6e22e">myName</span>;
</code></pre></div><ol start="2">
<li>Define now, assign later</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">myName</span>; <span style="color:#75715e">// =&gt; ???
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myName</span>;
<span style="color:#a6e22e">myName</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Haley&#39;</span>;
<span style="color:#a6e22e">myName</span>;
</code></pre></div><blockquote>
<p>Referencing a variable prior to its initialization results in <em>undefined</em>. Undefined means there is a reserved space, even if there is no data assigned to it. On the other hand, referenceError means nothing has ever been reserved for it.</p>
</blockquote>
<ol>
<li>Define now, assign now</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">myName</span>; <span style="color:#75715e">// =&gt; undefined
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myName</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Haley&#39;</span>;
<span style="color:#a6e22e">myName</span>;
</code></pre></div><ol start="2">
<li>Define now, assign later</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">myName</span>; <span style="color:#75715e">// =&gt; undefined
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myName</span>;
<span style="color:#a6e22e">myName</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Haley&#39;</span>;
<span style="color:#a6e22e">myName</span>;
</code></pre></div><p><strong>More examples:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myName</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Haley&#39;</span>;
<span style="color:#a6e22e">myName</span>; <span style="color:#75715e">// =&gt; &#39;Haley&#39; === variable myName has been initialized
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">add</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>); <span style="color:#75715e">// =&gt; Error: add is not a function === has not been initialized
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">add</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span>; <span style="color:#75715e">// =&gt; initialize &#39;add&#39; and update its value from undefined to the function body
</span><span style="color:#75715e"></span>}

<span style="color:#a6e22e">add</span>(<span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">4</span>); <span style="color:#75715e">// =&gt; 10
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">substract</span>(<span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">4</span>); <span style="color:#75715e">// =&gt; 2 === Why does this work? Because variable declarations let and const create variables immune to &#39;early&#39; referencing.
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">substract</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">b</span>;
} <span style="color:#75715e">// =&gt; invokes substract(6, 4)
</span></code></pre></div><p>To note:</p>
<ul>
<li>If &lsquo;var&rsquo; for &lsquo;var add = func&hellip;&rsquo; is changed to &lsquo;let&rsquo;, we will get &lsquo;Error: no access before initialization&rsquo; for the invocation fo add(10, 5) above.</li>
<li>All variable names (including function expressions) are hoisted to the top of their scope and given values of undefined.</li>
<li>Function declarations are hosited to the top of their scope, along with their bodies.</li>
<li>Using let or const instead of var can remove the possibility of unexpectedly yielding undefined in your program.</li>
</ul>
<h2 id="scoping">Scoping</h2>
<ul>
<li>Scoping exists to follow a principle known as the Principle of Least Privilege. PoLP states that you should expose the minimum amount of information necessary in your program to reduce collisons.</li>
<li>Scopign is a standard feature found across many different programming languages.</li>
<li>In JS, scoping is lexical and follows a set of rules.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Hugo</title>
            <link>https://haleyjung.github.io/posts/2021/12/hugo/</link>
            <pubDate>Sun, 12 Dec 2021 15:32:37 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/12/hugo/</guid>
            <description>What is Hugo? It&amp;rsquo;s one of the static site generators alongside jekyll and hexo.
How to add a new post $ hugo new posts/name.md Localhost preview $ hugo server -D Git push $ hugo -t theme-name $ cd public $ git add . $ git commit -m &amp;#34;commit message&amp;#34; $ git push origin main $ cd .. $ git add . $ git commit -m &amp;#34;commit message&amp;#34; $ git push origin main Error bash: hugo: command not found &amp;amp; bash: brew: command not found January 15, 2022: I suddenly received this message in the Terminal when hugo was working just fine yesterday.</description>
            <content type="html"><![CDATA[<h2 id="what-is-hugo">What is Hugo?</h2>
<p>It&rsquo;s one of the static site generators alongside jekyll and hexo.</p>
<h2 id="how-to-add-a-new-post">How to add a new post</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-h" data-lang="h"><span style="color:#960050;background-color:#1e0010">$</span> hugo new posts<span style="color:#f92672">/</span>name.md
</code></pre></div><h2 id="localhost-preview">Localhost preview</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-h" data-lang="h"><span style="color:#960050;background-color:#1e0010">$</span> hugo server <span style="color:#f92672">-</span>D
</code></pre></div><h2 id="git-push">Git push</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-h" data-lang="h"><span style="color:#960050;background-color:#1e0010">$</span> hugo <span style="color:#f92672">-</span>t theme<span style="color:#f92672">-</span>name
<span style="color:#960050;background-color:#1e0010">$</span> cd public
<span style="color:#960050;background-color:#1e0010">$</span> git add .
<span style="color:#960050;background-color:#1e0010">$</span> git commit <span style="color:#f92672">-</span>m <span style="color:#e6db74">&#34;commit message&#34;</span>
<span style="color:#960050;background-color:#1e0010">$</span> git push origin main
<span style="color:#960050;background-color:#1e0010">$</span> cd ..
<span style="color:#960050;background-color:#1e0010">$</span> git add .
<span style="color:#960050;background-color:#1e0010">$</span> git commit <span style="color:#f92672">-</span>m <span style="color:#e6db74">&#34;commit message&#34;</span>
<span style="color:#960050;background-color:#1e0010">$</span> git push origin main
</code></pre></div><h2 id="error">Error</h2>
<h3 id="bash-hugo-command-not-found--bash-brew-command-not-found"><code>bash: hugo: command not found</code> &amp; <code>bash: brew: command not found</code></h3>
<p>January 15, 2022: I suddenly received this message in the Terminal when hugo was working just fine yesterday. I tried installing Hugo again, but brew was also not working: <code>bash: brew: command not found</code>. The brew command was indeed located in the standard locations, so the issue was not about configuring the brew environment on my Mac.</p>
<p>After doing some Google search, it turns out to be a rather common error happening to Apple M1 Pro, but the actual cause of this still seems to be in debate.</p>
<p>This is the solution that worked:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-h" data-lang="h">echo <span style="color:#960050;background-color:#1e0010">&#39;</span>eval <span style="color:#e6db74">&#34;$(/opt/homebrew/bin/brew shellenv)&#34;</span><span style="color:#960050;background-color:#1e0010">&#39;</span> <span style="color:#f92672">&gt;&gt;</span> <span style="color:#f92672">/</span>Users<span style="color:#f92672">/</span>haleyjung<span style="color:#f92672">/</span>.zprofile
eval <span style="color:#e6db74">&#34;$(/opt/homebrew/bin/brew shellenv)&#34;</span>
</code></pre></div><p>The first command adds:</p>
<ul>
<li>an expanded PATH variable that includes the directories where brew and commands installed with brew are located</li>
<li>several shell variables used by brew</li>
</ul>
<p>to the .zprofile initialization file.</p>
<p>The second command adds those same variables to the current shell, so that you can start using brew without re-reading .zprofile.</p>
<p>But, I need to do this every time I launch hugo. I can I solve this?</p>
]]></content>
        </item>
        
        <item>
            <title>Higher Order Functions</title>
            <link>https://haleyjung.github.io/posts/2021/12/higher-order-functions/</link>
            <pubDate>Fri, 10 Dec 2021 20:32:49 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/12/higher-order-functions/</guid>
            <description>JavaScript will always pass PRIMITIVE types &amp;lsquo;by value&amp;rsquo; JavaScript will always pass NON-PRIMITIVE types &amp;lsquo;by reference&amp;rsquo;  First Class Functions (Function Literal) In JavaScript functions are first-class, meaning anything that can be done to other types can be done to functions. This means that the language supports constructing new functions during the execution of a program, storing them in data structures, passing them as arguments to other functions, and returning them as the values of other functions.</description>
            <content type="html"><![CDATA[<ul>
<li>JavaScript will always pass PRIMITIVE types &lsquo;by value&rsquo;</li>
<li>JavaScript will always pass NON-PRIMITIVE types &lsquo;by reference&rsquo;</li>
</ul>
<h2 id="first-class-functions-function-literal">First Class Functions (Function Literal)</h2>
<p>In JavaScript functions are first-class, meaning anything that can be done to other types can be done to functions. This means that the language supports constructing new functions during the execution of a program, storing them in data structures, passing them as arguments to other functions, and returning them as the values of other functions.</p>
<h2 id="define-higher-order-functions">Define Higher Order Functions</h2>
<ul>
<li>Higher order function takes another function as an argument or returns another function or does both.</li>
<li>It is often used to:
<ul>
<li>Abstract or isolate functionality</li>
<li>Create utiltiy functions taht are relatively generic and can operate on a variety of data types</li>
<li>Make code more semantic and easiser to read</li>
</ul>
</li>
<li>Examples:
<ul>
<li>Callback functions</li>
<li>Event listeners</li>
<li>Promises</li>
</ul>
</li>
</ul>
<h2 id="parameterization">Parameterization</h2>
<ul>
<li>To make the function more dynamic, express a parameter with texts rather than numbers.</li>
</ul>
<h2 id="benefits-of-higher-order-functions">Benefits of Higher Order Functions</h2>
<ol>
<li>Make it easier to plug-in different functions into the system</li>
<li>Eaiser to organize the codes in terms of action where each process is isolated within a dedicated function</li>
</ol>
<h2 id="callback-function">Callback function</h2>
<p>A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.</p>
<h2 id="references">References</h2>
<p><a href="https://eloquentjavascript.net/05_higher_order.html">Eloquent Javascript</a>
<a href="https://javascript.plainenglish.io/javascript-reviewing-primitive-and-non-primitive-data-types-5bc4ca68c3de">Louie, Benny. &ldquo;JavaScript: Reviewing Primitive and Non-Primitive Data Types,&rdquo; Medium, Jan 16, 2020.</a></p>
]]></content>
        </item>
        
        <item>
            <title>Types of Testing</title>
            <link>https://haleyjung.github.io/posts/2021/12/types-of-testing/</link>
            <pubDate>Thu, 09 Dec 2021 00:08:35 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/12/types-of-testing/</guid>
            <description>Selected Types of Testing A/B Testing (Split Testing) A/B Testing, also known as split testing, refers to a randomized experimentation process wherein two or more versions of a variable (web page, page element, etc.) are shown to different segments of website visitors at the same time to determine which version leaves the maximum impact and drive business metrics.
Accessibility Testing Accessibility testing is the practice of ensuring your mobile and web apps are working and usable for users without and with disabilities such as vision impairment, hearing disabilities, and other physical or cognitive conditions.</description>
            <content type="html"><![CDATA[<h2 id="selected-types-of-testing">Selected Types of Testing</h2>
<h3 id="ab-testing-split-testing">A/B Testing (Split Testing)</h3>
<p>A/B Testing, also known as split testing, refers to a randomized experimentation process wherein two or more versions of a variable (web page, page element, etc.) are shown to different segments of website visitors at the same time to determine which version leaves the maximum impact and drive business metrics.</p>
<h3 id="accessibility-testing">Accessibility Testing</h3>
<p>Accessibility testing is the practice of ensuring your mobile and web apps are working and usable for users without and with disabilities such as vision impairment, hearing disabilities, and other physical or cognitive conditions.</p>
<h3 id="end-to-end-testing">End to End Testing</h3>
<p>End to end testing is a technique that tests the application’s workflow from beginning to end to make sure everything functions as expected.</p>
<h3 id="functional-testing">Functional Testing</h3>
<p>Functional testing checks an application, website, or system to ensure it’s doing exactly what it’s supposed to be doing.</p>
<h3 id="integrations-testing">Integrations Testing</h3>
<p>Integration testing ensures that an entire, integrated system meets a set of requirements. It is performed in an integrated hardware and software environment to ensure that the entire system functions properly.</p>
<h3 id="non-functional-testing">Non Functional Testing</h3>
<p>Non functional testing verifies the readiness of a system according to nonfunctional parameters (performance, accessibility, UX, etc.)  which are never addressed by functional testing.</p>
<h3 id="performance-testing">Performance Testing</h3>
<p>Performance testing examines the speed, stability, reliability, scalability, and resource usage of a software application under a specified workload.</p>
<h3 id="regression-testing">Regression Testing</h3>
<p>Regression testing is performed to determine if code modifications break an application or consume resources.</p>
<h3 id="unit-testing">Unit Testing</h3>
<p>Unit testing is the process of checking small pieces of code to ensure that the individual parts of a program work properly on their own, speeding up testing strategies and reducing wasted tests.</p>
<h3 id="white-box-testing">White Box Testing</h3>
<p>White box testing involves testing the product&rsquo;s underlying structure, architecture, and code to validate input-output flow and enhance design, usability, and security.</p>
<h2 id="ways-to-test">Ways to Test</h2>
<h3 id="manual-testing">Manual Testing</h3>
<ul>
<li>The most hands-on type of testing.</li>
<li>It is often employed by every team at some point, but concerning the fast-paced software development lifecycle, manual testing is tough to scale.</li>
</ul>
<h3 id="automated-testing">Automated Testing</h3>
<ul>
<li>Automated testing uses test scripts and specialized tools to automate the process of software testing.</li>
</ul>
<h3 id="continuous-testing">Continuous Testing</h3>
<ul>
<li>Continuous testing applies the principles of automated testing in a scaled, continuous manner to achieve the most reliable test coverage for an enterprise.</li>
</ul>
<h2 id="references">References</h2>
<p><a href="https://vwo.com/ab-testing/">&ldquo;A/B Testing Guide&rdquo;, VWO, Wingify</a>
<a href="https://www.perfecto.io/resources/types-of-testing">&ldquo;The Complete Guide: Different Types of Testing in Software&rdquo;, Perfecto</a></p>
]]></content>
        </item>
        
        <item>
            <title>Debugging &amp; Common Errors</title>
            <link>https://haleyjung.github.io/posts/2021/12/debugging-common-errors/</link>
            <pubDate>Wed, 08 Dec 2021 14:19:57 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/12/debugging-common-errors/</guid>
            <description>Steps to Debugging 1. Problem Identification  Identify the immediate goal and what needs to be done to achieve it in this moment Investigate how the current state of code differs from the outcome I expect. Understand stack traces (&amp;ldquo;a report of the active stack frames at a certain point in time during the execution of a program&amp;rdquo;) from the error messages:  Failing tests Errors in console Unresponsive page Undesirable behavior   Questions I can ask myself to identify why there is an error:  Are there any syntax errors?</description>
            <content type="html"><![CDATA[<h2 id="steps-to-debugging">Steps to Debugging</h2>
<h3 id="1-problem-identification">1. Problem Identification</h3>
<ul>
<li>Identify the immediate goal and what needs to be done to achieve it in this moment</li>
<li>Investigate how the current state of code differs from the outcome I expect. Understand stack traces (&ldquo;a report of the active stack frames at a certain point in time during the execution of a program&rdquo;) from the error messages:
<ul>
<li>Failing tests</li>
<li>Errors in console</li>
<li>Unresponsive page</li>
<li>Undesirable behavior</li>
</ul>
</li>
<li>Questions I can ask myself to identify why there is an error:
<ul>
<li>Are there any syntax errors?</li>
<li>Am I passing the correct arguments to my function?</li>
<li>Am I referencing the correct values within my function?</li>
<li>Are my function parameters properly named and referenced?</li>
<li>Am I returning the correct value?</li>
</ul>
</li>
</ul>
<h3 id="2-problem-investigation">2. Problem Investigation</h3>
<ul>
<li>The step to understand why the issue is occuring and what needs to change to fix it.</li>
<li>Common methods:
<ul>
<li>Printing using console.log() statements</li>
<li>Stepping through code using the Chrome DevTools debugger: DevTools enables me to set breakpoints and step through code in a way that I can see my code execute line-by-line.</li>
</ul>
</li>
<li>Reproduce the bug before you start changing code</li>
</ul>
<h3 id="3-problem-resolution">3. Problem Resolution</h3>
<ul>
<li>Making the required changes to resolve the bugs and arrive at a working solution.</li>
<li>Write unit tests that reproduces the bugs</li>
<li>Possible changes:
<ul>
<li>Fixing typos (syntax errors)</li>
<li>Implementing missing components of the solution</li>
<li>Refactoring my solution: &ldquo;the process of restructuring existing computer code-chanigng the factoring-without changing its external behavior.&rdquo;</li>
</ul>
</li>
</ul>
<h3 id="4-confirmation-of-problem-resolution">4. Confirmation of Problem Resolution</h3>
<ul>
<li>After identifying, investigation, and resolving the issues with the code, it&rsquo;s time to verify that the problem has been fixed. This can be done by:
<ul>
<li>Repeating the action</li>
<li>Observing passing tests</li>
<li>Noticing the absence of errors</li>
</ul>
</li>
</ul>
<h2 id="errors-and-error-propagation">Errors and Error Propagation</h2>
<p>Errors can come from outside the program.</p>
<h3 id="cases">Cases</h3>
<ul>
<li>(Malformed inputs [2, 3, &lsquo;Hello&rsquo;, null, undefined, &lsquo;/']);</li>
<li>Network Failure</li>
<li>Authentication Failures</li>
</ul>
<h3 id="example-errors">Example Errors</h3>
<ul>
<li>500: Internal Server Error</li>
<li>501: Not implemented</li>
<li>502: Bad Gateway</li>
<li>503: Service Unavailable</li>
<li>504: Gateway Timeout</li>
<li>505: HTTP Version Not Supported</li>
<li>506: Variant Also Negotiates (RFC 2295)</li>
<li>507: Insufficent Storage (WebDAV; RFC 4918)</li>
<li>508: Loop Detected (WebDAV, RFC 5842)</li>
<li>510: Not Extended (RFC 2774)</li>
<li>511: Network Authentication Required (RFC 6585)</li>
</ul>
<h2 id="common-bugs">Common Bugs</h2>
<h3 id="1-typeerror-cannot-read-property-property-of-undefined">1. TypeError: Cannot read property &lsquo;property&rsquo; of undefined</h3>
<ul>
<li>Occurs when you try to access a property or a method in an undefined object</li>
<li>Fix: Preinitialize values during object construction or initialization</li>
</ul>
<h3 id="2-typeerror-cannot-read-property-null-of-null">2. TypeError: Cannot read property &lsquo;null of null</h3>
<ul>
<li>Occurs when you call a property or method on a null object</li>
<li>Fix: Preinitialize values during object construction or initialization</li>
</ul>
<h3 id="3-typeerror-assignment-to-constant-variable">3. TypeError: Assignment to constant variable</h3>
<ul>
<li>Const variable cannot be reassigned. Error happens when you are trying to reassign a const variable.</li>
<li>Fix: Use let instead of const when you want to mutate the variable later on</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">sumNum</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">nums</span>) =&gt; {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">output</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">num</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">nums</span>) {
        <span style="color:#a6e22e">output</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">num</span>;
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">output</span>;
}
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">output</span>;)
</code></pre></div><h3 id="4-referenceerror-cannot-access-variable-before-initialization">4. ReferenceError: Cannot access &lsquo;variable&rsquo; before initialization</h3>
<ul>
<li>Occurs when you are trying to access a variable before it was declared and initialized (esp. when using APIs)</li>
<li>Fix: apply the rules of scoping/hoisting. Try to access variables after they are declared and initalized prior to trying to use them.</li>
</ul>
<h3 id="5-referenceerror-output-variable-is-not-defined">5. ReferenceError: output &lsquo;variable&rsquo; is not defined</h3>
<ul>
<li>Occurs when you are accessing a variable that you do not have access to due to scoping</li>
<li>Fix: apply the rules of scoping. Variable declared in a function are not accessible outside of the function</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">sumNum</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">nums</span>) =&gt; {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">output</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">num</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">nums</span>) {
        <span style="color:#a6e22e">output</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">num</span>;
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">output</span>;
}
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">output</span>;)
</code></pre></div><h3 id="6-uncaught-rangeerror-maximum-call-stack-size-exceeded">6. Uncaught RangeError: Maximum call stack size exceeded</h3>
<ul>
<li>Occurs when you incorrectly define the existing logic for the base case or missing the base case. Improper usage of recursion</li>
<li>Fix: apply the rules of scoping. Variables declared in a function are not accessible outside of the function.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">power</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">base</span>, <span style="color:#a6e22e">exponent</span>) =&gt; {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">base</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">power</span>(<span style="color:#a6e22e">base</span>, <span style="color:#a6e22e">exponent</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
}
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">power</span>(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>));

<span style="color:#f92672">----&gt;</span> <span style="color:#a6e22e">RangeError</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">Maximum</span> <span style="color:#a6e22e">call</span> <span style="color:#a6e22e">stack</span> <span style="color:#a6e22e">size</span> <span style="color:#a6e22e">exceeded</span>
</code></pre></div><h3 id="7-infinite-loops">7. Infinite Loops</h3>
<ul>
<li>Occurs when your loop exiting condition is always true no matter what type of step you take.</li>
<li>Fix: apply the rules of scoping. Variables declared in a function are not accessible outside of the function</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">0</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>) {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;Yay&#39;</span>);
}

<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>;
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">y</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">x</span>;
<span style="color:#66d9ef">while</span> (<span style="color:#a6e22e">x</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">y</span>) {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;Whoohoo&#39;</span>);
    <span style="color:#a6e22e">x</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>;
}
</code></pre></div><h3 id="8-logical-fallacy">8. Logical Fallacy</h3>
<ul>
<li>Occurs hen you make an argument based on reasoning that&rsquo;s just plain wrong.</li>
</ul>
<h3 id="9-syntax-error">9. Syntax Error</h3>
<ul>
<li>Occurs when the code does not conform to the syntax of the programming language</li>
</ul>
<h3 id="10-memory-leak">10. Memory Leak</h3>
<ul>
<li>A condition caused by a program that does not free up the extra memory it allocates. This gradually deteriorates the system performance.</li>
</ul>
<h2 id="other-keywords">Other keywords</h2>
<ul>
<li>A: Added - this is a new file that has been added to the repository</li>
<li>M: Modified - an existing file has been changed</li>
<li>D: Deleted - a file has been deleted</li>
<li>U: Untracked - the file is new or has been changed but has not been added to the repository yet</li>
<li>C: Conflict - there is a conflict in the file</li>
<li>R: Renamed - the file has been renamed</li>
<li>S: Submodule - in repository exists another subrepository</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Cache</title>
            <link>https://haleyjung.github.io/posts/2021/12/cache/</link>
            <pubDate>Sat, 04 Dec 2021 22:03:44 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/12/cache/</guid>
            <description>Cache (‘cash’) A reserved space location that collects temporary data that makes a device, browser, or app run faster and more efficiently After opening an app or website for the first time, a cache stashes files, images, and other pertinent data on the device. For every subsequent visit, the cached data will be quickly retrieved instead of locally redownloading the data every single time.
3 main areas of cache Devices and software The CPU, central processing unit, which is the core component responsible for processing information from the software in the desktop computer, laptop, smartphone or tablet, has its own cache.</description>
            <content type="html"><![CDATA[<h2 id="cache-cash">Cache (‘cash’)</h2>
<p>A reserved space location that collects temporary data that makes a device, browser, or app run faster and more efficiently
After opening an app or website for the first time, a cache stashes files, images, and other pertinent data on the device. For every subsequent visit, the cached data will be quickly retrieved instead of locally redownloading the data every single time.</p>
<h2 id="3-main-areas-of-cache">3 main areas of cache</h2>
<h3 id="devices-and-software">Devices and software</h3>
<p>The CPU, central processing unit, which is the core component responsible for processing information from the software in the desktop computer, laptop, smartphone or tablet, has its own cache.</p>
<p>A CPU cache is a small block of memory that’s designed to help the CPU easily retrieve frequently used information. It stores data that your device&rsquo;s main memory uses to execute instructions far more quickly than if it had to load every bit of information only when it was requested.</p>
<h3 id="web-browers">Web Browers</h3>
<p>A browser cache stores files needed by your browser to display the web sites it visits. This includes elements like the HTML file that describe the site, along with CSS style sheets, Javascripts, cookies, and images.</p>
<p>For example, when you visit Amazon, it downloads all the images associated with product pages you visit, the HTML and other script files needed to render the pages, and personalization information, such as your login information, and the contents of your shopping cart.</p>
<p>That&rsquo;s why if you clear your browser cache, retail sites will require you to log back in and rejigger your settings.</p>
<h3 id="apps">Apps</h3>
<p>Like browsers, apps save files and data they deem important so they can quickly reload the information as needed. Every app is different, though, and so the kind of data it caches will vary, but might include images, video thumbnails, search history, and other user preferences.</p>
<h3 id="benefits">Benefits</h3>
<p>Faster performance
Saved data, allowing ‘offline’ works for some apps</p>
<h3 id="disadvantages">Disadvantages</h3>
<p>Can take up a lot of storage space and limi the free space on the device
A corrupted cache can cause the app to behave badly
Can prevent apps from loading the latest version of a web page or other data</p>
<h2 id="cache-invalidation">Cache invalidation</h2>
<p>A process in a computer system whereby entries in a cache are replaced or removed.
It can be used to push new content to a client. This functions as an alternative to other methods of displaying new contents to connected clients. Invalidation is carried out by changing the application data, which in turn marks the information received by the client as out-of-date. After the cache is invalidated, if the client requests the cache, they are delivered a new version.</p>
<h3 id="3-methods-to-invalidate-a-cache">3 Methods to Invalidate a Cache</h3>
<p>Not all caching proxies support these methods.</p>
<h4 id="purge">Purge</h4>
<p>Removes content from caching proxy immediately. When the client requests the data again, it is fetched from the application and stored in the caching proxy. This method removes all variants of the cached content.</p>
<h4 id="refresh">Refresh</h4>
<p>Fetches requested content from the application, even if cached content is available. The content previously stored in the cache is replaced with a new version from the application. This method affects only one variant of the cached content.</p>
<h4 id="ban">Ban</h4>
<p>A reference to the cached content is added to a blacklist (or ban list). Client requests are then checked against this blacklist, and if a request matches, new content is fetched from the application, returned to the client, and added to the cache.
This method, unlike purge, does not immediately remove cached content from the caching proxy. Instead, the cached content is updated after a client requests that specific information.</p>
]]></content>
        </item>
        
        <item>
            <title>Naming Convention</title>
            <link>https://haleyjung.github.io/posts/2021/12/naming-convention/</link>
            <pubDate>Wed, 01 Dec 2021 21:45:06 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/12/naming-convention/</guid>
            <description>Define Naming conventions are systems of rules to use when naming variables, constants, methods, and other components of codes. With consistent application, it makes code easier to read, understand, and search.
Principal Terms  class: in object-oriented programming, a category of related objects that share common variables and methods. constant: in computer programming, a value that does not change, or an identifier assigned to represent such a value. method: in object-oriented programming, a procedure or function specific to objects of a particular class.</description>
            <content type="html"><![CDATA[<h2 id="define">Define</h2>
<p>Naming conventions are systems of rules to use when naming variables, constants, methods, and other components of codes. With consistent application, it makes code easier to read, understand, and search.</p>
<h2 id="principal-terms">Principal Terms</h2>
<ul>
<li>class: in object-oriented programming, a category of related objects that share common variables and methods.</li>
<li>constant: in computer programming, a value that does not change, or an identifier assigned to represent such a value.</li>
<li>method: in object-oriented programming, a procedure or function specific to objects of a particular class.</li>
<li>package: in object-oriented programming, a namespace, or set of symbols, that is used to organize related classes and interfaces in a logical manner.</li>
<li>table: a data structure that organizes information according to predefined rules, most often in rows and columns.</li>
<li>variable: in computer programming, a symbolic name that refers to data stored in a specific location in a computer&rsquo;s memory, the value of which can be changed.</li>
</ul>
<h2 id="considerations">Considerations</h2>
<p>When designing a naming system, consider the following:</p>
<ul>
<li>Will names be restricted to a fixed length or a minimum or maximum length?</li>
<li>What information will each name contain?</li>
<li>Is it logical? Clear, easy to remember and use, or is it redundant?</li>
<li>If abbreviations are used, are they used consistently?</li>
</ul>
<h2 id="types-of-identifier-naming-convention">Types of Identifier Naming Convention</h2>
<ul>
<li>hungarian case</li>
<li>camel case</li>
<li>pascal case</li>
<li>snake_case</li>
</ul>
<h2 id="hungarian-notation">Hungarian notation</h2>
<p>Hungarian notation, also known as Apps Hungarian, was invented by Charles Simonyi, a Hungarian-American software architect. It was widely implemented at Microsoft when Simonyi was leading the applications group to build the first versions of Microsoft Office.</p>
<p>This naming convention adds a prefix to the identifier name, which can apply to variable names, types, constants, parameters, functions and classes. While its unified manner enables an instant understanding of the variable type, it is argued that Apps Hungarian not the most efficient practice for user defined types in modern functional or objected-oriented language, as those need the information about the <em>kind</em> of value encoded in the datatype or class rather than into the variable name.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-j" data-lang="j">intNum<span style="color:#f92672">;</span> 	<span style="color:#f92672">//</span> int variable<span style="color:#f92672">;</span> intNum or iNum
strName<span style="color:#f92672">;</span>   <span style="color:#f92672">//</span> string variable<span style="color:#f92672">;</span> strName or sName
booNext<span style="color:#f92672">;</span>	<span style="color:#f92672">//</span> boolean variable<span style="color:#f92672">;</span> boolNext or bNext
<span style="color:#f92672">}</span>
</code></pre></div><p><strong>Hungarian Notation Prefix Codes</strong></p>
<table>
<thead>
<tr>
<th>Prefix Code</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>ch</td>
<td>Character</td>
</tr>
<tr>
<td>s</td>
<td>String</td>
</tr>
<tr>
<td>w</td>
<td>Word</td>
</tr>
<tr>
<td>l</td>
<td>Long</td>
</tr>
<tr>
<td>n</td>
<td>Number type (either int or short)</td>
</tr>
<tr>
<td>i</td>
<td>Integer</td>
</tr>
<tr>
<td>fn</td>
<td>Function pointer</td>
</tr>
<tr>
<td>b</td>
<td>BYTE</td>
</tr>
<tr>
<td>st</td>
<td>Pointer to a string</td>
</tr>
<tr>
<td>sz</td>
<td>Pointer to a 0 byte terminated string</td>
</tr>
<tr>
<td>lp</td>
<td>Long pointer</td>
</tr>
<tr>
<td>p</td>
<td>Pointer</td>
</tr>
<tr>
<td>d</td>
<td>Difference between instances</td>
</tr>
<tr>
<td>c</td>
<td>Count of instances</td>
</tr>
<tr>
<td>f</td>
<td>Boolean flag</td>
</tr>
</tbody>
</table>
<p><strong>Resources</strong></p>
<p><a href="https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-6.0/aa260976(v=vs.60)?redirectedfrom=MSDN">Simonyi, Charles, &ldquo;Hungarian Notation,&rdquo; Microsoft, November 1999</a></p>
<p><a href="http://www.byteshift.de/msg/hungarian-notation-doug-klunder">Klunder, Doug, &ldquo;Hungarian Naming Conventions,&rdquo; January 1988, Revised September 1991</a></p>
<h2 id="camelcase">camelCase</h2>
<p>Camel case capitalizes the first letter of each word, except for the first word.</p>
<p>A verb-noun combination can be used to express the purpose of the method, such as getDate() or determineDiscount().</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-j" data-lang="j">myNumber<span style="color:#f92672">;</span> 	    <span style="color:#f92672">//</span> int variable
myName<span style="color:#f92672">;</span>	    <span style="color:#f92672">//</span> string variable
isNext<span style="color:#f92672">;</span> 		<span style="color:#f92672">//</span> boolean variable
</code></pre></div><h2 id="pascalcase">PascalCase</h2>
<p>Pascal case is similar to camel case. The difference is that pascal case capitalizes the first letter of the first word as well. This is often used for naming classes or methods.</p>
<p>In Java, classes, interfaces and enums should be written in Pascal case while local variables declared within the body of the program should be written in lower camel case.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-j" data-lang="j">MyNumber<span style="color:#f92672">;</span> 	    <span style="color:#f92672">//</span> int variable
MyName<span style="color:#f92672">;</span>	    <span style="color:#f92672">//</span> string variable
IsNext<span style="color:#f92672">;</span> 		<span style="color:#f92672">//</span> boolean variable
</code></pre></div><h2 id="snake_case">Snake_case</h2>
<p>Snake case uses underscore in between each word.</p>
<p>In Java and C++, snake case is used for constants and static variables.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-j" data-lang="j">my_number<span style="color:#f92672">;</span> 	<span style="color:#f92672">//</span> int variable
my_name<span style="color:#f92672">;</span>	   <span style="color:#f92672">//</span> string variable
is_next<span style="color:#f92672">;</span> 	   <span style="color:#f92672">//</span> boolean variable
</code></pre></div><h2 id="kebab-case">Kebab-case</h2>
<p>Kebab case uses a dash to separate words. Its usage is discouraged as a dash can be misread as a subtraction operation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-j" data-lang="j">my_number<span style="color:#f92672">;</span> 	<span style="color:#f92672">//</span> int variable
my<span style="color:#f92672">-</span>name<span style="color:#f92672">;</span>	   <span style="color:#f92672">//</span> string variable
is<span style="color:#f92672">-</span>next<span style="color:#f92672">;</span> 	   <span style="color:#f92672">//</span> boolean variable
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Recommendation Engine: Netflix&#39;s Recommendation Algorithms</title>
            <link>https://haleyjung.github.io/posts/2021/11/recommendation-engine-netflixs-recommendation-algorithms/</link>
            <pubDate>Fri, 26 Nov 2021 14:06:25 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/11/recommendation-engine-netflixs-recommendation-algorithms/</guid>
            <description>Netflix&amp;rsquo;s Recommendation Algorithms Overview  Recommendation algorithms are at the core of the Netflix product. They provide our members with personalized suggestions to reduce the amount of time and frustration to find something great content to watch. Because of the importance of our recommendations, we continually seek to improve them by advancing the state-of-the-art in the field. We do this by using the data about what content our members watch and enjoy along with how they interact with our service to get better at figuring out what the next great movie or TV show for them will be.</description>
            <content type="html"><![CDATA[<h2 id="netflixs-recommendation-algorithms">Netflix&rsquo;s Recommendation Algorithms</h2>
<h3 id="overview">Overview</h3>
<blockquote>
<p>Recommendation algorithms are at the core of the Netflix product. They provide our members with personalized suggestions to reduce the amount of time and frustration to find something great content to watch. Because of the importance of our recommendations, we continually seek to improve them by advancing the state-of-the-art in the field. We do this by using the data about what content our members watch and enjoy along with how they interact with our service to get better at figuring out what the next great movie or TV show for them will be. We go beyond validating our ideas on historical data to understand how people actually respond to changes in our recommendation system by running online A/B tests and measuring long-term satisfaction metrics. These experiments also provide us with new insights to further improve our research and product. This cycle of experimentation has led us to move beyond rating prediction, made famous by the Netflix prize, and into personalized ranking, page generation, search, image selection, messaging, and much more.</p>
</blockquote>
<h3 id="human-approach">Human Approach</h3>
<blockquote>
<p>Dealing with human tastes and preferences is an extremely challenging problem. In many cases a member may come to our site not knowing exactly what they’re in the mood for. Each person is nuanced in what brings them joy and how that varies based on what context they are in. Plus, people change over time, so we need to help anticipate or enable those changes. We also need to supplement our algorithmic approaches with insights we gain from consumer research and curated metadata to incorporate more of a human element in our systems.</p>
</blockquote>
<h2 id="personalization">Personalization</h2>
<p>Netflix puts great emphasis on personalization to help its users find content to watch and enjoy to maximize user satisfaction and retention.</p>
<h3 id="what-does-netflix-personalize">What does Netflix personalize?</h3>
<ul>
<li>Ordering of vidoes in each row</li>
<li>Selection and placement of rows</li>
<li>Search query and result recommendation</li>
<li>Frame recommendation for artists</li>
<li>Personalized artwork selection</li>
<li>Marketing message personalization</li>
</ul>
<h3 id="challenges-of-personalization">Challenges of Personalization</h3>
<ul>
<li>Each user has a vairety of interests, and sometimes profiles are shared</li>
<li>Help users find what they want when they are not sure what they want</li>
<li>Large datasets but small data per user,</li>
<li>Cold-start problems</li>
<li>Non-stationary, context-dependent, mood-dependent, etc.</li>
<li>More than just accuracy: Diversity, novelty, freshness, fairness, and more.</li>
</ul>
<h3 id="approaches">Approaches</h3>
<ul>
<li>Casuality
<ul>
<li>Correaltion to Causation</li>
</ul>
</li>
<li>Bandits</li>
<li>Reinforcement Learning</li>
<li>Objectives</li>
<li>Fairness</li>
<li>Experience Personalization</li>
</ul>
<h2 id="evidence-selection-algorithm">Evidence Selection Algorithm</h2>
<p>(ACM, 13:5, 2.7) Netflix uses recommender system on most screens beyond the homepage. To help users determine if a video is right for them, Neflix uses several algorithms. One of them is <em>evidence selection</em> algorithm. Netflix defines evidence as all the information it shows on the page, including the predicted star rating, the synopsis, facts displayed about the video, such as awards, casts, and other metadata, and images used to support the recommendations in the rows and elsewhere in the UI. Evidence selection algorithms evaluate all the possible evidence items that we can display for every recommendation, to select the few that we think will be most helpful to the member viewing the recommendation. For example, evidence algorithms decide whether to show that a certain movie won an Oscar or instead show the member that the movie is similar to another video recently watched by that member; they also decide which image out of several versions use to best support a given recommendation.</p>
<h2 id="references">References</h2>
<p>&ldquo;The Netflix Recommender System: Algorithms, Business Value, and Innovation&rdquo;, ACM Transactions on Management Information Systems, Vol. 6, No. 4, Article 13, December 2015.</p>
<p>&ldquo;Recommendations: Figuring out how to bring unique joy to each member,&rdquo; Research Areas, Netflix Research, research.netflix.com, accessed Nov 25, 2021.</p>
]]></content>
        </item>
        
        <item>
            <title>Recommendation Engine: Measurements and Challenges</title>
            <link>https://haleyjung.github.io/posts/2021/11/recommendation-engine-measurements-and-challenges/</link>
            <pubDate>Fri, 26 Nov 2021 13:38:29 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/11/recommendation-engine-measurements-and-challenges/</guid>
            <description>In this post, I&amp;rsquo;ll dive further into the measurements and challenges of a recommendation engine. This post uses references from:
F.O. Isinkaye et al., &amp;ldquo;Recommendation systems: Principles, methods and evaluation,&amp;rdquo; Egyptian Informatics Journal, Cairo University, 13 March 2015.
&amp;ldquo;The Netflix Recommender System: Algorithms, Business Value, and Innovation&amp;rdquo;, ACM Transactions on Management Information Systems, Vol. 6, No. 4, Article 13, December 2015.
To note, I&amp;rsquo;ll be continuously adding more of the latest articles as references.</description>
            <content type="html"><![CDATA[<p>In this post, I&rsquo;ll dive further into the measurements and challenges of a recommendation engine. This post uses references from:</p>
<p>F.O. Isinkaye et al., &ldquo;Recommendation systems: Principles, methods and evaluation,&rdquo; Egyptian Informatics Journal, Cairo University, 13 March 2015.</p>
<p>&ldquo;The Netflix Recommender System: Algorithms, Business Value, and Innovation&rdquo;, ACM Transactions on Management Information Systems, Vol. 6, No. 4, Article 13, December 2015.</p>
<p>To note, I&rsquo;ll be continuously adding more of the latest articles as references.</p>
<h2 id="challenges">Challenges</h2>
<h3 id="1-sparsity-of-data">1. Sparsity of data</h3>
<p>This is the problem that occurs as a result of lack of enough information: for instance, when only a few of the total number of items available in a database are rated by users. This always leads to a sparse user-item matrix, inability to locate successful neighbors and finally, the generation of weak recommendations. Also, data sparsity always leads to coverage problems, which is the percentage of items in the system that recommendations can be made for. (Isinkaye, 4.2.3.2. Data sparsity problem, pg. 267 - 268)</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h3 id="2-imperfect-labeling">2. Imperfect labeling</h3>
<p>Synonymy is the tendency of very similar items to have different names or entries. Most recommender systems find it difficult to make distinction between closely related items such as the difference between e.g. baby wear and baby cloth. Collaborative Filtering system usually find no match between the two terms to be able to compute their similarity. Different methods, such as automatic term expansion, the construction of a thesaurus, and Singular Value Decomposition (SVD), especially Latent Semantic Indexing are capable of solving the synonymy problem. The shortcoming of these methods is that some added terms may have differnt meanings from what is intended, which sometimes leads to rapid degradation of recommendation performance. (Isinkaye, 4.2.3.4. Synonymy, pg. 268)</p>
<h3 id="3-scalability-of-products-and-clients">3. Scalability of products and clients</h3>
<p>This is another problem associated with recommendation algorithms because computation normally grows linearly with the number of users and items. A recommendation technique that is efficient when the number of dataset is limited may be unable to generate satisfactory number of recommendations when the volume of dataset is increased. Thus, it is crucial to apply recommendation techniques which are capable of scaling up in a successful manner as the number of dataset in a database increases. Methods used for solving scalability problem and speeding up recommendation generation are based on Dimensionality reduction techniques, such as Singular Value Decomposition (SVD) method, which has the ability to produce reliable and efficient recommendations. (Isinkaye, 4.2.3.3. Scalability, pg. 268)</p>
<p>&ldquo;The <em>page generation</em> algorithm uses the output of all the algorithms already described to construct every single page of recommendations, taking into account the relevance of each row to the member as well as the diversity of the page. A typical member has tens of thousands of rows that could go on one&rsquo;s homepage, making it challenging to manage the computations required to evaluate them. For this reason, before 2015, we used a rule-based approach that would define what type of row (e.g. genre row, BYW row, Popular row) would go in each vertical position of the page. This page layout was used to construct all homepages for all members. Today, we have a fully personalized and mathematical algorithm that can select and order rows from a large pool of candidates to create an ordering optimized for relevance and diversity. Our current algorithm does not use a template, thus is freer to optimize the experience, for example, choosing not to have any BYW row for a given homepage and devoting half of the page to BYW rows for another homepage. A recent blogpost [Alvino and Basilico 2015] on this algorithm discusses it in more detail.&rdquo; (13:5, 2.6 Page Generation: Row Selection and Ranking)</p>
<h2 id="success-measurements">Success Measurements</h2>
<p>The quality of a recommendation algorithm can be evaluated using different types of measurement which can be accuracy or coverage. The type of metrics used depends on the type of filtering technique.</p>
<h3 id="1-accuracy">1. Accuracy</h3>
<p>The fraction of correct recommendation out of the total possible recommendations.</p>
<p>Metrics for measuring the accuracy of recommendation filtering systems are divided into <strong>statistical</strong> and <strong>decision suport</strong> accuracy metrics. The suitability of each metric depends on the features of the dataset and the type of tasks that the recommender system will do.</p>
<h4 id="statistical-accuracy-metrics">Statistical accuracy metrics</h4>
<p>Statistical accuracy metrics evaluate the accuracy of a filtering technique by comparing the predicted ratings directly with the actual user rating. Mean Absolute Error (MAE), Root Mean Square Error (RMSE) and Correlation are usually used as statistical accuracy metrics.</p>
<p><strong>Mean Absolute Error (MAE)</strong></p>
<p>MAE is the most popular and commonly used; it is a measure of deviation of recommendation from user&rsquo;s specific value. The lower the MAE, the more accurately the recommendation engine predicts user ratings. It can be computed like the following:</p>
<blockquote>
<p>MAE = (1/N) * Σ_u,i|p_u,i – r_u,i|</p>
</blockquote>
<p>where:</p>
<p>Σ: A Greek symbol that means “sum”</p>
<p>p_u,i: The predicted rating for user &lsquo;u&rsquo; on item &lsquo;i&rsquo;</p>
<p>r_u,i: The actual rating</p>
<p>N: The total number of ratings on the item set</p>
<p><strong>Root Mean Square Error (RMSE)</strong></p>
<p>RMSE puts more emphasis on larger absolute error. The lower the RMSE is, the better the recommendation accuracy.</p>
<blockquote>
<p>RMSE = sqrt((1/n) * (Σ_u,i * (p_u,i – r_u,i)^2))</p>
</blockquote>
<h4 id="decision-support-accuracy-metrics">Decision support accuracy metrics</h4>
<p>Commonly used ones are Reversal rate, Weighted errors, Receiver Operating Characteristics (ROC) and Precision Recall Curve (PRC), Preciison, Recall and <em>F</em>-measure.</p>
<p>These metrics help users in selecting items that are of very high quality out of the available set of items. The metrics veiw prediction procedure as a binary operation which distinguishes good items from those items that are not good.</p>
<p><strong>Receiver Operating Characteristics (ROC)</strong></p>
<p>ROC curves are very successful when performing comprehensive assessments of the performance of some specific algorithms.</p>
<p><strong>Precision &amp; Recall</strong></p>
<p>Precision is the fraction of recommended items that is actually relevant to the user, which recall can be defined as the fraction of relevant items that are also part of the set of recommended items. They are computed as:</p>
<p>Precision = Correctly recommended items / Total recommended items</p>
<p>Recall = Correctly recommended items / Total useful recommended items</p>
<p><strong><em>F</em>-measure</strong></p>
<p><em>F</em>-measure defined below helps to simplify precision and recall into a single metric. The resulting value makes comparision between algorithms and across data sets very simple and straightforward.</p>
<p><em>F</em>-measure = 2PR/(P+R)</p>
<h3 id="2-coverage">2. Coverage</h3>
<p>This has to do with the fraction of items and users that a recommender system can provide predictions. Prediction may be practically impossible to make if no users or few users rated an item. Coverage can be reduced by defining small neighborhood sizes for user or items.</p>
<h2 id="self-sustaining-environment">Self-Sustaining Environment</h2>
<p>This leads to the critical question of &ldquo;How can we create a self-sustaining and ever-improving environment for the recommendation engine?&rdquo; More on this soon!</p>
<p> </p>
]]></content>
        </item>
        
        <item>
            <title>Recommendation Engine: The Introduction</title>
            <link>https://haleyjung.github.io/posts/2021/11/recommendation-engine-the-introduction/</link>
            <pubDate>Thu, 25 Nov 2021 16:56:37 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/11/recommendation-engine-the-introduction/</guid>
            <description>I&amp;rsquo;m at the airport right now, summarizing what I read on the plane about recommendation engine algorithm, as I wait for my next flight. Last night, I opened the Netflix app to download shows I will watch on the plane. I then saw a new feature in the &amp;lsquo;Downloads&amp;rsquo; section that will download a personalized selection of movies and shows for me so that there is always a show for me to watch with or without internet connection!</description>
            <content type="html"><![CDATA[<p>I&rsquo;m at the airport right now, summarizing what I read on the plane about recommendation engine algorithm, as I wait for my next flight. Last night, I opened the Netflix app to download shows I will watch on the plane. I then saw a new feature in the &lsquo;Downloads&rsquo; section that will download a personalized selection of movies and shows for me so that there is always a show <em>for me</em> to watch with or without internet connection! This felt like a whole new level of recommendation system that I needed to know. So unlike this feature&rsquo;s intention, I ended up downloading several articles and thesis on the topic of recommendation engine instead.</p>
<h2 id="what-is-it">What is it?</h2>
<p>Recommendation engine is a system that <em>recommends</em> products, services, or information to users based on analysis of user data.</p>
<p> </p>
<h3 id="types-of-user-data">Types of user data</h3>
<p>There are several types of data that can be used, such as user&rsquo;s history and behavior. They are often categorized as <strong>explicit interactions</strong> and <strong>implicit interactions</strong>.</p>
<ul>
<li>
<p><strong>Explicit interactions</strong> consist of past activity, ratings and reviews you wrote, information provided in your profile, such as gender, age, and investment objectives (for finance apps).</p>
</li>
<li>
<p><strong>Implicit interactions</strong> are the device you use for access, link click rates, location and dates.</p>
</li>
</ul>
<p> </p>
<h3 id="types-of-filtering-systems">Types of filtering systems</h3>
<p>The analysis can be based on a single user, or mutliple users, depending on the type of filtering system.</p>
<h4 id="1-content-based-filtering">1. Content-based filtering</h4>
<p>This filtering is based on a <em>single</em> user&rsquo;s past and current interactions and preferences. There are several limitations to this system due to privacy and regulatory issues, which is defined as <em>cold start problem</em>. If the user&rsquo;s information is insufficient, the recommendation accuracy will be significantly low.</p>
<p>A widely used form of content-based filtering is <strong>case-based recommendation</strong>, which evaluates similarities of an item a user has liked or purchased to recommend other &lsquo;similar&rsquo; products. This also has limitations, especially because the database of products that can be compared and recommended must exist within the specific domain, and the evaluation will very much depend on the accuracy and level of categorization, i.e. metadata or tags, across the platform.</p>
<h4 id="2-collaborative-filtering">2. Collaborative filtering</h4>
<p>Taking a step further from content-based filtering, collaborative filtering is able to develop a more accurate recommendation for a user by evaluating the data of multiple users who have similar purchasing history and/or behaviorial patterns. Yet this also has limitations of increased variability, less interpretable results, especially in the absence of previously collected data.</p>
<h4 id="3-knowledge-based-system">3. Knowledge-based system</h4>
<p>This system is based on domain expertise and knowledge to evaluate and meet users' needs. It has a set of defined rules that preset context for each recommendation. Unlike the previous two, this does not suffer the cold-start problem. It is therefore more expensive and suitable for companies with complex domains with infrequent purchasing rates.</p>
<h2 id="why-is-it-needed">Why is it needed?</h2>
<p>We are fed with an overwhelming amount of information on a daily basis. Recommendation engine helps us to navigate the sea of data in the digital world with greater efficiency. This is of course a very broad statement as there is a dual side to recommendation engine due to its invasiveness and also limitations. I&rsquo;ll explore this topic further later on, as the goal of this post is to cover the foundation of recommendation engine.</p>
<p>Going back to the increased efficiency, recommendation engine aims to provide a more personalized user experience and solution. For instance, you&rsquo;ve finished watching your favorite series and you still have time to kill. You start browsing an endless list of new series. Some of them seem interesting, but how do you know which one is <em>the</em> one? You&rsquo;ll probably lean towards choosing one from the list of &lsquo;Trending Now,&rsquo; &lsquo;Top 10 in the U.S.,&rsquo; or &lsquo;Shows You May Like&rsquo; - the recommendation engine. Then, you choose one, because though it didn&rsquo;t appeal to you initially, it&rsquo;s in every recommendation lists! You watch it to the end, and it&rsquo;s one of the best shows you&rsquo;ve seen in a while. This: increased user satisfaction. You&rsquo;ll most likely watch another show from the recommended lists later on, and if this cycle continues on, it leads to a high user retention rate. This lets us know that recommendation engine can also bring higher revenues for companies.</p>
<h2 id="upcoming-posts">Upcoming posts</h2>
<p>In the next posts, I plan to dive further into challenges, measurements and a case study on Netflix&rsquo;s recommendation engine.</p>
<p> </p>
]]></content>
        </item>
        
        <item>
            <title>Missing Contributions on Github</title>
            <link>https://haleyjung.github.io/posts/2021/11/missing-contributions-on-github/</link>
            <pubDate>Wed, 24 Nov 2021 00:03:33 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/11/missing-contributions-on-github/</guid>
            <description>Why are my contributions missing? After multiple commits on my GitHub for this static site, I noticed that the contributions were not lightening green on my profile. The GitHub page was successfully updated with the latest commit, so at first I thought it was a time lag. GitHub Docs also indicates that &amp;ldquo;you may need to wait for up to 24 hours to see the contribution appear on your contribution graph.</description>
            <content type="html"><![CDATA[<h2 id="why-are-my-contributions-missing">Why are my contributions missing?</h2>
<p>After multiple commits on my GitHub for this static site, I noticed that the contributions were not lightening green on my profile. The GitHub page was successfully updated with the latest commit, so at first I thought it was a time lag. <a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/managing-contribution-graphs-on-your-profile/why-are-my-contributions-not-showing-up-on-my-profile">GitHub Docs</a> also indicates that &ldquo;you may need to wait for up to 24 hours to see the contribution appear on your contribution graph.&rdquo; The issue remained the same after 24 hours, so I went ahead to check the following:</p>
<h3 id="1-is-your-local-git-commit-email--your-account">1. Is your local Git commit email === your account?</h3>
<p>To check the email address used for a commit, I opened the latest commit on my GitHub and added <strong>.patch</strong> to the end of the commit URL.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">https://github.com/haleyjung/haleyjung.github.io/commit/abcdefg.patch
</code></pre></div><p>When the link opens, carefully check the first four lines of the page. It should have a format like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">From abcedfg Mon Sep 17 00:00:00 2001
From: Profile Name &lt;<span style="color:#f92672">email</span> <span style="color:#a6e22e">address</span>&gt;
Date: Tue, 23 Nov 2021 18:42:53 -0500
Subject: [PATCH] commit message
</code></pre></div><p>The email address in the &lsquo;From:&rsquo; field is the one that was used for the commit, which is what was set in the local git config settings. This was my issue! The email was set as a generic email address <a href="mailto:name@computer.local">name@computer.local</a>. Such email cannot be added to GitHub accounts, and when this is used for commits, the commits will not be linked to the GitHub profile and hence the contribution graph will not reflect them.</p>
<p>Now that I&rsquo;ve figured out what the issue is, it&rsquo;s time to configure my &lsquo;user.email&rsquo; in the command line.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#960050;background-color:#1e0010">$</span> git config <span style="color:#f92672">--</span>global user.email <span style="color:#e6db74">&#34;email@example.com&#34;</span>
</code></pre></div><p>Then to confirm that I have accurately set the email address in Git:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#960050;background-color:#1e0010">$</span> git config <span style="color:#f92672">--</span>global user.email
</code></pre></div><p>I can also check all the settings using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">git config <span style="color:#f92672">--</span>list <span style="color:#f92672">--</span>show<span style="color:#f92672">-</span>origin
</code></pre></div><p>Since the email address was the same as my GitHub account&rsquo;s email, I didn&rsquo;t have to add it to my account again. But if it&rsquo;s different, make sure to add it to the GitHub account, under Settings &gt; Emails.</p>
<p> </p>
<h3 id="2-to-which-branch-did-you-make-your-commit">2. To which branch did you make your commit?</h3>
<p>I was making commits to the default &lsquo;main&rsquo; branch, so this was not the problem.</p>
<p>To note, commits must be made in the <strong>default</strong> or <strong>gh-pages</strong> branch to be counted.</p>
<p>If I want to count the commits made in a non-default or non-gh-pages branch:</p>
<ul>
<li>Open a pull request to merge my changes into the default branch or the gh-pages branch</li>
<li>Change the default branch of the repository</li>
</ul>
<p>I should only do this if I want the new branch to become the base for all future pull requests and commits.</p>
<p> </p>
<h3 id="3-was-your-commit-made-in-a-fork">3. Was your commit made in a fork?</h3>
<p>This was not the case for me. However, these are the steps one should follow to make a fork count towards my contributions.</p>
<ul>
<li>Open a pull request to merge my changes into the parent repository</li>
<li>Contact GitHub Support to detach and turn the fork into a standalone repository.</li>
</ul>
<p>More about forks in another post!</p>
<p> </p>
]]></content>
        </item>
        
        <item>
            <title>Submodules</title>
            <link>https://haleyjung.github.io/posts/2021/11/submodules/</link>
            <pubDate>Tue, 23 Nov 2021 16:40:02 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/11/submodules/</guid>
            <description>What is a submodule? A git submodule is a record within a host git repository that points to a specific commit in another external repository. Submodules are very static and only track specific commits. Submodules do not track git refs or branches and are not automatically updated when the host repository is updated.
  It keeps a git repository as a subdirectory of another git repository.
  It serves as a reference to another repo at a particular snapshot of time.</description>
            <content type="html"><![CDATA[<h2 id="what-is-a-submodule">What is a submodule?</h2>
<p>A git submodule is a record within a host git repository that points to a specific commit in another external repository. Submodules are very static and only track specific commits. Submodules do not track git refs or branches and are not automatically updated when the host repository is updated.</p>
<ol>
<li>
<p>It keeps a git repository as a subdirectory of another git repository.</p>
</li>
<li>
<p>It serves as a reference to another repo at a particular snapshot of time.</p>
</li>
<li>
<p>It enables a git repo to incorporate and track version history of external code.</p>
</li>
</ol>
<p>A git submodule is a record within a host git repository that points to a specific commit in another external repository. Submodules are very static and only track specific commits. Submodules do not track git refs or branches and are not automatically updated when the host repository is updated. When adding a submodule to a repository a new .gitmodules file will be created. The .gitmodules file contains meta data about the mapping between the submodule project&rsquo;s URL and local directory. If the host repository has multiple submodules, the .gitmodules file will have an entry  for each submodule.</p>
<h2 id="when-should-i-use-submodules">When should I use submodules?</h2>
<p>If you need to maintain a strict version management over your external dependencies,  it can make sense to use git submodules. The following are a few best use cases for git submodules.</p>
<ul>
<li> When an external component or subproject is changing too fast or upcoming changes will break the API, you can lock the code to a specific commit for your own safety.</li>
<li> When you have a component that isn’t updated very often and you want to track it as a vendor dependency.</li>
<li> When you are delegating a piece of the project to a third party and you want to integrate their work at a specific time or release. Again this works when updates are not too frequent.</li>
</ul>
<h2 id="references">References</h2>
<p><a href="https://www.atlassian.com/git/tutorials/git-submodule">&ldquo;Git Submodule&rdquo;, Bitbucket</a></p>
]]></content>
        </item>
        
        <item>
            <title>Absolute vs Relative Path</title>
            <link>https://haleyjung.github.io/posts/2021/11/absolute-vs-relative-path/</link>
            <pubDate>Mon, 22 Nov 2021 11:00:33 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/11/absolute-vs-relative-path/</guid>
            <description>What is a path? A path is a string of characters that identify a specific location of a file or folder on computer. In another word, it represents the directory and file relationship in the operating system. The characters seperated with a slash in URLs represent a path. From this we can also grasp that a path is essential for constructing Uniform Resource Locators (URLs). A path is either absolute or relative.</description>
            <content type="html"><![CDATA[<h2 id="what-is-a-path">What is a path?</h2>
<p>A path is a string of characters that identify a specific location of a file or folder on computer. In another word, it represents the directory and file relationship in the operating system. The characters seperated with a slash in URLs represent a path. From this we can also grasp that a path is essential for constructing Uniform Resource Locators (URLs). A path is either <strong>absolute</strong> or <strong>relative</strong>.</p>
<h2 id="absolute-path">Absolute Path</h2>
<p>An absolute path, or full path, specifies the location of a file or folder regardless of the current working directory. It always contains the complete location, including the root directory. If you want to create a link to another website that belongs to an external domain, you would use an absolute URL.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&#39;/home/static/img/sample.img&#39;
</code></pre></div><h2 id="relative-path">Relative Path</h2>
<p>A relative path, or non-absolute path, refers to the location of a file or folder relative to the current working directory, or to the location of the current webpage. Instead of specifying the full path, it uses &lsquo;../&rsquo;, which refers to the parent folder of the current working file. It is often more efficient to use relative URLs than absolute URLs to reference links that are located on the same domain.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&#39;../img/sample.img&#39;
</code></pre></div><h2 id="representation-of-paths-by-operating-systems">Representation of paths by operating systems</h2>
<h3 id="unix-and-mac-os-paths">Unix and Mac OS Paths</h3>
<table>
<thead>
<tr>
<th>Delimiter</th>
<th>Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>/</td>
<td>Root directory &amp; directory separator; A path starting with / is an absolute path.</td>
</tr>
<tr>
<td>.</td>
<td>The current directory</td>
</tr>
<tr>
<td>..</td>
<td>The parent of the directory indicated by the preceding path</td>
</tr>
<tr>
<td>~</td>
<td>Home directory</td>
</tr>
</tbody>
</table>
<h3 id="microsoft-windows-powershell-path">Microsoft Windows (PowerShell) Path</h3>
<table>
<thead>
<tr>
<th>Delimiter</th>
<th>Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>[drive letter:]/ or [drive name:]\ or \[server name]\ or [PSSnapIn name][PSProvider name:][:PSDrive root]</td>
<td>Root directory</td>
</tr>
<tr>
<td>/ or \</td>
<td>Directory separator</td>
</tr>
<tr>
<td>.</td>
<td>The current directory</td>
</tr>
<tr>
<td>..</td>
<td>The parent of the directory indicated by the preceding path</td>
</tr>
<tr>
<td>~</td>
<td>Home directory</td>
</tr>
</tbody>
</table>
]]></content>
        </item>
        
        <item>
            <title>Hello World</title>
            <link>https://haleyjung.github.io/posts/2021/11/hello-world/</link>
            <pubDate>Mon, 22 Nov 2021 10:01:55 -0500</pubDate>
            
            <guid>https://haleyjung.github.io/posts/2021/11/hello-world/</guid>
            <description>I can no longer remember how many times I&amp;rsquo;ve created this very same file due to various errors and deployment failures.
But, I love debugging! Coming from a field where subjectivity defines the output, I&amp;rsquo;m in love with coding that always has some form of solution.
With that, this shall be my first &amp;lsquo;final&amp;rsquo; post.</description>
            <content type="html"><![CDATA[<p>I can no longer remember how many times I&rsquo;ve created this very same file due to various errors and deployment failures.</p>
<p>But, I love debugging! Coming from a field where subjectivity defines the output, I&rsquo;m in love with coding that always has some form of solution.</p>
<p>With that, this shall be my first &lsquo;final&rsquo; post.</p>
]]></content>
        </item>
        
    </channel>
</rss>
