<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learned</title>
    <link>https://haleyjung.github.io/</link>
    <description>Recent content on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 10 Feb 2022 11:35:01 -0500</lastBuildDate><atom:link href="https://haleyjung.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode: Two Sums - easy</title>
      <link>https://haleyjung.github.io/posts/2022/02/leetcode-two-sums-easy/</link>
      <pubDate>Thu, 10 Feb 2022 11:35:01 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/leetcode-two-sums-easy/</guid>
      <description>Prompt Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.
Example: Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</description>
    </item>
    
    <item>
      <title>JavaScript Revision 3</title>
      <link>https://haleyjung.github.io/posts/2022/02/javascript-revision-3/</link>
      <pubDate>Thu, 10 Feb 2022 08:07:05 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/javascript-revision-3/</guid>
      <description>1. Fundamental Concept Value
 JavaScript has the scalar primitive types that are passed by value: Number, String, Boolean, undefined, null, and Symbol Values are stored in variables, a named unit of data  Reference
 JavaScript has 3 data types that are passed by reference: Array, Function, and Objcet These are collectively known as Objects.    2. Higher Order Functions / Callback Functions Higher Order Function
 A function that accepts functions as parameters and/or returns a function.</description>
    </item>
    
    <item>
      <title>JavaScript Revision 2</title>
      <link>https://haleyjung.github.io/posts/2022/02/javascript-revision-2/</link>
      <pubDate>Thu, 10 Feb 2022 00:01:54 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/javascript-revision-2/</guid>
      <description>Term Definition     Execution context Holds information about the environment within which the current code is being executed; Calling a function creates a new execution context.   Call Stack Where execution contexts get stacked on top of each other to keep track of where we are in the program’s execution.   Scope The regions in the code where we can refer to a variable by name without getting access errors; Defining a function creates a new lexical scope.</description>
    </item>
    
    <item>
      <title>JavaScript Revision 1</title>
      <link>https://haleyjung.github.io/posts/2022/02/javascript-revision-1/</link>
      <pubDate>Wed, 09 Feb 2022 22:17:53 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/javascript-revision-1/</guid>
      <description>Term Definition     Value JavaScript has the scalar primitive types that are passed by value: Number, String, Boolean, undefined, null, and Symbol   Reference JavaScript has 3 data types that are passed by reference: Array, Function, and Objcet   Variable A named unit of data where values can be stored and referred to by that name   Function The primary method through which we manipulate data in JavaScript.</description>
    </item>
    
    <item>
      <title>High Level Overview (2)</title>
      <link>https://haleyjung.github.io/posts/2022/02/high-level-overview-2/</link>
      <pubDate>Tue, 08 Feb 2022 00:02:45 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/high-level-overview-2/</guid>
      <description>The Engine and Runtime The JavaScript engine always contains a call stack and a heap.
Call Stack JavaScript code runs in the call stack.
The call stack is where execution contexts get stacked on top of each other to keep track of where we are in the program&amp;rsquo;s execution. The execution context on top of the stack is the one that&amp;rsquo;s currently running. When it&amp;rsquo;s finished running, it will be removed from the stack, and execution will go back to the previous execution context.</description>
    </item>
    
    <item>
      <title>High Level Overview (1)</title>
      <link>https://haleyjung.github.io/posts/2022/02/high-level-overview-1/</link>
      <pubDate>Mon, 07 Feb 2022 17:21:33 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/high-level-overview-1/</guid>
      <description>High-level languages, such as JavaScript and Python, have abstractions so that we don&amp;rsquo;t need to manage resources (i.e. memory/CPU) like we do for low level languages like C.
Garbage Collection One of the powerful tools in JavaScript that takes away the memory management from developers is garbage collection. It&amp;rsquo;s an algorithm inside the JavaScript engine that automatically removes old and unused objects from the computer memory.
Interpreted / Just-in-time Compiled Language The JavaScript code we write is a human-readable abstraction over machine code, which needs to be compiled/interpreted to machine code that is understood by the computer&amp;rsquo;s processor (only zeros and ones!</description>
    </item>
    
    <item>
      <title>SQL</title>
      <link>https://haleyjung.github.io/posts/2022/02/sql/</link>
      <pubDate>Sun, 06 Feb 2022 12:20:12 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/sql/</guid>
      <description>What is it?  SQL: Structured Query Language Lets us access and manipulate databases, such as:  executing queries against a database retrieving data from a database inserting a record in a database updating records in a database deleting records from a database creating new databases creating new tables in a database creating stored procedures in a database creating views in a database setting permissions on tables, procedures, and views    Major Commands  These are not case sensitive   SELECT - extracts data from a database FROM - specifies the parent database WHERE - filters records according to the given condition  &amp;lt;&amp;gt; or !</description>
    </item>
    
    <item>
      <title>Semantic Versioning</title>
      <link>https://haleyjung.github.io/posts/2022/02/semantic-versioning/</link>
      <pubDate>Sat, 05 Feb 2022 10:48:06 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/semantic-versioning/</guid>
      <description>Semantic Versioning (SemVer) A versioning system for software releases, such as new plugins, addons, libraries, and extensions.
It consists of 3 components in the format of X.Y.Z
X: Major Version  When the major version number is increased, the minor and patch version numbers are reset to zero. Increasing the major number breaks the existing API.  Y: Minor Version  Minor version indicates the release of new functionality in the system (when implementing new features in a backwards-incompatible way).</description>
    </item>
    
    <item>
      <title>Systems</title>
      <link>https://haleyjung.github.io/posts/2022/02/systems/</link>
      <pubDate>Fri, 04 Feb 2022 00:31:44 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/systems/</guid>
      <description>Webpage Rendering  HTML is received from the server and processed into the DOM. The styles are loaded and parsed into the CSSOM. The render tree is created using the DOM and CSSOM. The browser creates a layout for each render tree element with its individual coordinates using the flow method, which requires just one pass to layout all the elements, compared to the tables method that requires more than one pass.</description>
    </item>
    
    <item>
      <title>Client-Side Validation</title>
      <link>https://haleyjung.github.io/posts/2022/02/client-side-validation/</link>
      <pubDate>Thu, 03 Feb 2022 13:50:26 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/client-side-validation/</guid>
      <description>What is client-side validation? It refers to providing feedbacks to users so that they can give us the correct information.
e.g. &amp;ldquo;your password must be at least 8 characters&amp;rdquo; or &amp;ldquo;this field is required.&amp;rdquo;
HTML5 Form Validation Form validaiton is a large part of project-specific, dependent on business logic.
Input Types &amp;lt;form&amp;gt; &amp;lt;label&amp;gt;Name (required)&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Email (required)&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;email&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Age (required, must be older than 13)&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;age&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Number of siblings&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;siblings&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Number of rooms in your house&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;rooms&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Blog url&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;blog&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Twitter Username&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;twitter&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; HTML5 Constraint API HTML5 constraint validation API helps developers avoid use of JavaScript for simple validations.</description>
    </item>
    
  </channel>
</rss>
