<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learned</title>
    <link>https://haleyjung.github.io/</link>
    <description>Recent content on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 12 Jan 2022 10:26:29 -0500</lastBuildDate><atom:link href="https://haleyjung.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Problem Solving Skills</title>
      <link>https://haleyjung.github.io/posts/2022/01/problem-solving-skills/</link>
      <pubDate>Wed, 12 Jan 2022 10:26:29 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/problem-solving-skills/</guid>
      <description>IOCE: Input, Output, Constraints, Edge Cases  After understanding what the prompt is, list the input, output, constraints, and edge cases before planning the solution.  Strategy(s): How can I get from my input to my output?  A moment of being extra verbal and thinking out loud to brainstorm strategies After brainstorming the first strategy (write quick notes about it to remember), I can also come up with a second strategy, then identify trade-off.</description>
    </item>
    
    <item>
      <title>Testing &amp; Debugging</title>
      <link>https://haleyjung.github.io/posts/2022/01/testing-debugging/</link>
      <pubDate>Wed, 12 Jan 2022 00:08:35 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/testing-debugging/</guid>
      <description>Types of Testing  Unit testing Integrations Testing End to End Testing AB Testing  Debugging Algorithm Debugging: Process in which we identify and resolve problems and misbehaviors
 Reproduce the bug before you start changing code Understand stack traces from error messages Write unit tests that reproduces the bug Recognize and know your error codes Research using Google Pair program with others/Whiteboard Repeat the process  Error Types TypeError: Cannot read property &amp;lsquo;property&amp;rsquo; of undefined  Occurs when you try to access a property or a method in an undefined object Fix: preinitialize values during object construction or initialization, if possible.</description>
    </item>
    
    <item>
      <title>ESlint</title>
      <link>https://haleyjung.github.io/posts/2022/01/eslint/</link>
      <pubDate>Tue, 11 Jan 2022 23:21:14 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/eslint/</guid>
      <description>What is ESlint? &amp;ldquo;ESLint is a static code analysis tool for identifying problematic patterns found in JavaScript code. It was created by Nicholas C. Zakas in 2013. Rules in ESLint are configurable, and customized rules can be defined and loaded. ESLint covers both code quality and coding style issues.&amp;rdquo;
ESLint is written using Node.js to provide a fast runtime standard using a customizable set of rules like below.
module.exports = { parserOptions: { ecmaVersion: 5 }, rules: { /* Indentation */ &amp;#39;no-mixed-spaces-and-tabs&amp;#39;: 2, &amp;#39;indent-legacy&amp;#39;: [2, 2], /* Variable names */ &amp;#39;camelcase&amp;#39;: 2, /* Language constructs */ &amp;#39;curly&amp;#39;: 2, &amp;#39;eqeqeq&amp;#39;: [2, &amp;#39;smart&amp;#39;], &amp;#39;func-style&amp;#39;: [2, &amp;#39;expression&amp;#39;], /* Semicolons */ &amp;#39;semi&amp;#39;: 2, &amp;#39;no-extra-semi&amp;#39;: 2, /* Padding &amp;amp; additional whitespace (perferred but optional) */ &amp;#39;brace-style&amp;#39;: [2, &amp;#39;1tbs&amp;#39;, { &amp;#39;allowSingleLine&amp;#39;: true }], &amp;#39;semi-spacing&amp;#39;: 1, &amp;#39;key-spacing&amp;#39;: 1, &amp;#39;block-spacing&amp;#39;: 1, &amp;#39;comma-spacing&amp;#39;: 1, &amp;#39;no-multi-spaces&amp;#39;: 1, &amp;#39;space-before-blocks&amp;#39;: 1, &amp;#39;keyword-spacing&amp;#39;: [1, { &amp;#39;before&amp;#39;: true, &amp;#39;after&amp;#39;: true }], &amp;#39;space-infix-ops&amp;#39;: 1, /* Variable declaration */ &amp;#39;one-var&amp;#39;: [1, { &amp;#39;uninitialized&amp;#39;: &amp;#39;always&amp;#39;, &amp;#39;initialized&amp;#39;: &amp;#39;never&amp;#39; }], /* Minuta */ &amp;#39;comma-style&amp;#39;: [2, &amp;#39;last&amp;#39;], &amp;#39;quotes&amp;#39;: [1, &amp;#39;single&amp;#39;], &amp;#39;max-len&amp;#39;: [1, { &amp;#39;code&amp;#39;: 100 }], } }; Why should we use ESLint?</description>
    </item>
    
    <item>
      <title>Mocha &amp; Chai</title>
      <link>https://haleyjung.github.io/posts/2022/01/mocha-chai/</link>
      <pubDate>Mon, 10 Jan 2022 12:16:25 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/mocha-chai/</guid>
      <description>What are Mocha and Chai? They are JavaScript frameworks that are commonly used together for unit testing.
Mocha is a testing framework that provides functions that are executed according in a specific order, and that logs their results to the terminal window.
When you read tests written in Mocha, you’ll see regular use of the keywords describe and it. These keywords, provided by Mocha, provide structure to the tests by batching them into test suites and test cases.</description>
    </item>
    
    <item>
      <title>Jasmine</title>
      <link>https://haleyjung.github.io/posts/2022/01/jasmine/</link>
      <pubDate>Sat, 08 Jan 2022 14:38:40 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/jasmine/</guid>
      <description>What is Jasmine? Jasmine is an open-source testing framework for JavaScript. With this tool we are able to describe the code we are testing and make assertions about our code. In the early 2000s, JsUnit was a framework for testing JavaScript applications. It was upgraded and released as Jasmine in 2010 by Pivotal Labs.
It is a Behavior Driven Development testing framework: i.e. Regardless of which JavaScript framework I use (e.</description>
    </item>
    
    <item>
      <title>Functional Programming</title>
      <link>https://haleyjung.github.io/posts/2021/12/functional-programming/</link>
      <pubDate>Mon, 20 Dec 2021 15:12:08 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2021/12/functional-programming/</guid>
      <description>Paradigm &amp;amp; Principles JavaScript can be written in either a declarative and imperative style
Declarative (Functional Programming)  Focuses on what to execute / what is being done Abstracts control flow (how) Focuses on data flow Code is composed of expressions: a piece of code that evaluates to some value  Imperative (Object Oriented Programming)  Defines control flow Specific steps to achieve a result Code is composed of statements: a piece of code that performs some action  Paradigm: MODEL  Nowadays functional programming is more popular Some programming languages are explicitly functional All code written in these languges must follow functional principles (e.</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://haleyjung.github.io/posts/2021/12/hugo/</link>
      <pubDate>Sun, 12 Dec 2021 15:32:37 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2021/12/hugo/</guid>
      <description>What is Hugo? It&amp;rsquo;s one of the static site generators alongside jekyll and hexo.
How to add a new post $ hugo new posts/name.md Localhost preview $ hugo server -D Git push $ hugo -t theme-namehu $ cd public $ git add . $ git commit -m &amp;#34;commit message&amp;#34; $ git push origin main $ cd .. $ git add . $ git commit -m &amp;#34;commit message&amp;#34; $ git push origin main </description>
    </item>
    
    <item>
      <title>Higher Order Functions</title>
      <link>https://haleyjung.github.io/posts/2021/12/higher-order-functions/</link>
      <pubDate>Fri, 10 Dec 2021 20:32:49 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2021/12/higher-order-functions/</guid>
      <description>First Class Functions (Function Literal) In JavaScript functions are first-class, meaning anything that can be done to other types can be done to functions. This means that the language supports constructing new functions during the execution of a program, storing them in data structures, passing them as arguments to other functions, and returning them as the values of other functions.
Define Higher Order Functions  Higher order function takes another function as an argument or returns another function or does both It is often used to:c  Abstract or isolate functionality Create utiltiy functions taht are relatively generic and can operate on a variety of data types Make code more semantic and easiser to read   Examples:  Callback functions Event listeners Promises    </description>
    </item>
    
    <item>
      <title>Cache</title>
      <link>https://haleyjung.github.io/posts/2021/12/cache/</link>
      <pubDate>Sat, 04 Dec 2021 22:03:44 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2021/12/cache/</guid>
      <description>Cache (‘cash’) A reserved space location that collects temporary data that makes a device, browser, or app run faster and more efficiently After opening an app or website for the first time, a cache stashes files, images, and other pertinent data on the device. For every subsequent visit, the cached data will be quickly retrieved instead of locally redownloading the data every single time.
3 main areas of cache Devices and software The CPU, central processing unit, which is the core component responsible for processing information from the software in the desktop computer, laptop, smartphone or tablet, has its own cache.</description>
    </item>
    
    <item>
      <title>Naming Convention</title>
      <link>https://haleyjung.github.io/posts/2021/12/naming-convention/</link>
      <pubDate>Wed, 01 Dec 2021 21:45:06 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2021/12/naming-convention/</guid>
      <description>Define Naming conventions are systems of rules to use when naming variables, constants, methods, and other components of codes. With consistent application, it makes code easier to read, understand, and search.
Principal Terms  class: in object-oriented programming, a category of related objects that share common variables and methods. constant: in computer programming, a value that does not change, or an identifier assigned to represent such a value. method: in object-oriented programming, a procedure or function specific to objects of a particular class.</description>
    </item>
    
  </channel>
</rss>
