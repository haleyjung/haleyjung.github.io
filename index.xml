<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learned</title>
    <link>https://haleyjung.github.io/</link>
    <description>Recent content on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 17 Mar 2022 23:01:31 -0400</lastBuildDate><atom:link href="https://haleyjung.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Databases (1)</title>
      <link>https://haleyjung.github.io/posts/2022/03/understanding-databases-1/</link>
      <pubDate>Thu, 17 Mar 2022 23:01:31 -0400</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/understanding-databases-1/</guid>
      <description>Volatile vs Non-Volatile Data Storage     Volatile Non-Volatile     Data Data is not retained after power off Data is retained through power cycle   Speed/Cost Fast but expensive Slow and inexpensive   Example RAM (memory) Hard Drive or SSD    Data Persistence     Volatile     Define The capability of retaining program state beyond a program&amp;rsquo;s current life cycle   How Achieved by saving program state in a non-volatile storage medium   Requirement A conversion from in-memory program state to and from a serializable data format    Data Serialization     Saving Restoring     Process Program &amp;ndash;&amp;gt; State (volatile memory) &amp;ndash;&amp;gt; JSON.</description>
    </item>
    
    <item>
      <title>res.WriteHead() vs res.StatusCode</title>
      <link>https://haleyjung.github.io/posts/2022/03/res.writehead-vs-res.statuscode/</link>
      <pubDate>Tue, 15 Mar 2022 13:23:32 -0400</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/res.writehead-vs-res.statuscode/</guid>
      <description>response.status(...) assigns a status code that will be used in the future. The headers are not sent until the response body is sent.
Calling res.status() and setting res.statusCode just set the property for later use.
Calling res.writeHead() sets the res.statusCode property and will then cause the headers to be flushed immediately, rather than their normal behavior of being queued to be sent later. But, from the statusCode point of view, there is no difference.</description>
    </item>
    
    <item>
      <title>HTTP Methods &amp; REST</title>
      <link>https://haleyjung.github.io/posts/2022/03/http-methods-rest/</link>
      <pubDate>Mon, 14 Mar 2022 12:54:52 -0400</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/http-methods-rest/</guid>
      <description>REST: REpresentational State Transfer  An architectural style for distributed hypermedia system Has its guiding principles and constraints Its client-server design pattern enforces the separation of concerns  &amp;ldquo;By separating the user interface concerns (client) from the data storage concerns (server), we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components.&amp;rdquo; i.e. Determines how clients interact with URLs   HTTP verb and URL combination results in a specific meaning  e.</description>
    </item>
    
    <item>
      <title>Pure Function</title>
      <link>https://haleyjung.github.io/posts/2022/03/pure-function/</link>
      <pubDate>Sun, 13 Mar 2022 23:22:06 -0400</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/pure-function/</guid>
      <description>What is pure function? Pure function is a function that returns the same output when the same arguments are passed.
Characteristics  Predictable output for the same inputs Readability to understand its purpose Resuable at any place without altering its behavior Testable as an independent unit No side effect  Examples Pure function function Greeting(name) { return `Hello ${name}`; } This Greeting function always get Hello &amp;lt;name&amp;gt; for the name input, so it&amp;rsquo;s a pure function.</description>
    </item>
    
    <item>
      <title>Web APIs: Event.target</title>
      <link>https://haleyjung.github.io/posts/2022/03/web-apis-event.target/</link>
      <pubDate>Sat, 12 Mar 2022 07:43:47 -0400</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/web-apis-event.target/</guid>
      <description>Event  The Event interface represents an event in the DOM. It&amp;rsquo;s triggered by the user action such as:  clicking a button tapping keyboard generated by APIs to represent the progress of an async task   It contains properties and methods common to all events  Event.target  target is a read-only property of the Event interface A reference to the object to which the event was originally dispatched Can be used to implement event delegation  Event Properties &amp;amp; Methods Full list here</description>
    </item>
    
    <item>
      <title>Understanding Redux</title>
      <link>https://haleyjung.github.io/posts/2022/03/understanding-redux/</link>
      <pubDate>Wed, 09 Mar 2022 00:40:48 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/understanding-redux/</guid>
      <description>Redux: Predictable State Container for JavaScript apps
 I&amp;rsquo;ve just finished a two-day sprint using React, and will be moving onto using Redux with React. So here are some fundamentals of Redux before the next sprint.
What is it?  Predictable State Container for JavaScript apps A JS library for managing global application state  Has packages including: React-Redux, Redux Toolkit, and Redux DevTools Extension   Uses a one-way data flow app structure Reduces server calls: only made when state change requires the server call  Key Points  Predictable  Helps applications to behave consistently Runs in different environments: client, server, native   Centralized  States can be used from any components (instead of lifting state to parent components) const rootReducer = Redux.</description>
    </item>
    
    <item>
      <title>Notes from a ReactJS Sprint</title>
      <link>https://haleyjung.github.io/posts/2022/03/notes-from-a-reactjs-sprint/</link>
      <pubDate>Tue, 08 Mar 2022 01:10:37 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/notes-from-a-reactjs-sprint/</guid>
      <description>Setting up Babel to watch all changes and compile automatically  In package.json’s scripts, create “start” and add the following including watch:  npx babel . --out-dir=compiled --presets=@babel/preset-react --ignore=node_modules,compiled --source-maps=inline --watch npx: allows local dependencies to run as commands babel: hey npx, search for and run the Babel command-line utility .: hey Babel, transpile all JS files in the current working directory --out-dir: hey again Babel, put the transpiled files into the compiled/ folder --presets hey hey Babel, make this kind of transformations.</description>
    </item>
    
    <item>
      <title>Backtracking Algorithm: N Queen</title>
      <link>https://haleyjung.github.io/posts/2022/03/backtracking-algorithm-n-queen/</link>
      <pubDate>Wed, 02 Mar 2022 00:16:04 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/backtracking-algorithm-n-queen/</guid>
      <description>Prompt The eight queens puzzle is the problem of placing eight chess queens on an 8×8 chessboard so that no two queens threaten each other. Thus, a solution requires that no two queens share the same row, column, or diagonal. The eight queens puzzle is an example of the more general n queens problem of placing n non-attacking queens on an n×n chessboard, for which solutions exist for all natural numbers n with the exception of n=2 and n=3.</description>
    </item>
    
    <item>
      <title>Backtracking Algorithm: Knight&#39;s Tour</title>
      <link>https://haleyjung.github.io/posts/2022/03/backtracking-algorithm-knights-tour/</link>
      <pubDate>Tue, 01 Mar 2022 22:40:46 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/backtracking-algorithm-knights-tour/</guid>
      <description>What is a backtracking algorithm? An algorithmic-technique for solving problems recursively by trying to build a solution incrementally one piece at a time, removing solutions that fail to satisfy the constraints of the problem at any point of time (the time elapsed till reachign any level of the search tree).
It works incrementally.
Think of SudoKu!  To solve SudoKu, we fill digits one by one. When the current digit we added doesn&amp;rsquo;t lead to a solution, we remove it = backtrack We try another digit.</description>
    </item>
    
    <item>
      <title>Time Complexity</title>
      <link>https://haleyjung.github.io/posts/2022/02/time-complexity/</link>
      <pubDate>Sun, 27 Feb 2022 16:52:02 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/time-complexity/</guid>
      <description>Big O Notation  A mathematical notation that shows how efficient an algorithm is in the worst-case scenario relative to its input size. It captures how much time or space an algorithm would require approximately as the input size grows: time complexity &amp;amp; space complexity f(n) = O(inputSize)  What is Time Complexity?  Does NOT represent the actual time required to execute a code The computational time (CPU time) it will take to execute an algorithm, determined by the input size and the solution of the algorithm.</description>
    </item>
    
  </channel>
</rss>
