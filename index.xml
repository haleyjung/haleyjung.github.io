<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learned</title>
    <link>https://haleyjung.github.io/</link>
    <description>Recent content on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 24 Feb 2022 07:06:01 -0500</lastBuildDate><atom:link href="https://haleyjung.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode: Shifting Letters - medium</title>
      <link>https://haleyjung.github.io/posts/2022/02/leetcode-shifting-letters-medium/</link>
      <pubDate>Thu, 24 Feb 2022 07:06:01 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/leetcode-shifting-letters-medium/</guid>
      <description>Prompt You are given a string s of lowercase English letters and an integer array shifts of the same length.
Call the shift() of a letter, the next letter in the alphabet, (wrapping around so that &amp;lsquo;z&amp;rsquo; becomes &amp;lsquo;a&amp;rsquo;).
For example, shift(&#39;a&#39;) = &#39;b&#39;, shift(&#39;t&#39;) = &#39;u&#39;, and shift(&#39;z&#39;) = &#39;a&#39;. Now for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times.</description>
    </item>
    
    <item>
      <title>Underscore Review</title>
      <link>https://haleyjung.github.io/posts/2022/02/underscore-review/</link>
      <pubDate>Wed, 23 Feb 2022 23:09:10 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/underscore-review/</guid>
      <description>_.identity = function(val) { return val; }; // first: return the first element if n is undefined  // if n is defined, return an array of the first n elements of the array _.first = function(array, n) { return n === undefined ? array[0] : array.slice(0, n); }; // last: return the last element if n is undefined  // if n is defined, return an array of the last n elements of the array _.</description>
    </item>
    
    <item>
      <title>Writing My Own `StringifyJSON`</title>
      <link>https://haleyjung.github.io/posts/2022/02/writing-my-own-stringifyjson/</link>
      <pubDate>Wed, 23 Feb 2022 00:27:45 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/writing-my-own-stringifyjson/</guid>
      <description>Goal I&amp;rsquo;m going to write out the JSON.stringify() method, which converts a JavaScript object or value to a JSON string.
 Boolean, Number, and String objects are converted to the corresponding primitive values during stringification.  String will be wrapped in extra quotation marks   undefined, Function, and Symbol are not valid JSON values. If they are found in an array, they will be changed to null. The numbers Infinity and NaN, as well as the value null, are all considered null.</description>
    </item>
    
    <item>
      <title>Writing My Own `getElementsByClassName()`</title>
      <link>https://haleyjung.github.io/posts/2022/02/writing-my-own-getelementsbyclassname/</link>
      <pubDate>Tue, 22 Feb 2022 00:23:20 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/writing-my-own-getelementsbyclassname/</guid>
      <description>Goal I&amp;rsquo;m going to write out the getElementsByClassName() method, using JavaScript. When it&amp;rsquo;s called on the document object, it returns an array-like object of all child elements which have all of the given class name(s).
Pseudocodes // Declare an empty array to store the result // Declare a function expression `hasClassName` // with a function parameter as `node` // to check which node has the same class name as `className` // Call the function expression `hasClassName` // and pass `document.</description>
    </item>
    
    <item>
      <title>Instantiation Patterns</title>
      <link>https://haleyjung.github.io/posts/2022/02/instantiation-patterns/</link>
      <pubDate>Mon, 21 Feb 2022 23:46:14 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/instantiation-patterns/</guid>
      <description>What is an instantiation pattern in JavaScript? It&amp;rsquo;s a way to create an object using functions.
5 Types of Instantiation Patterns 1. Functional Instantiation  Create a function Create an empty object inside the function  Properties and methods can be created here They will be accessible every time the function is called   Return the object  Pros
 Easy to understand Private properties (contained within the closure scope)  Cons</description>
    </item>
    
    <item>
      <title>MVC: Model-View-Controller</title>
      <link>https://haleyjung.github.io/posts/2022/02/mvc-model-view-controller/</link>
      <pubDate>Sun, 20 Feb 2022 08:04:41 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/mvc-model-view-controller/</guid>
      <description>What is MVC?  Model: business data / View: user interface / Controller: a component traditionally managing logic, user-input and coordinating both the models and views.
  An architectural design pattern MVC encourages improved application organization through a separation of conerns.  History: Smalltalk-80&amp;rsquo;s MVC in the 1970s  Designed by Trygve Reenskaug during his time working on Smalltalk-80 (1979) where it was initially called Model-View-Controller-Editor. Before, it was heavily used for structuring desktop and sever-side applications, but recently it&amp;rsquo;s being applied to JavaScript.</description>
    </item>
    
    <item>
      <title>Patterns</title>
      <link>https://haleyjung.github.io/posts/2022/02/patterns/</link>
      <pubDate>Sat, 19 Feb 2022 18:57:18 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/patterns/</guid>
      <description>What is a design pattern? A design pattern names, abstracts, and identifies the key aspects of a common design structure that make it useful for creating a reusable object-oriented design.
A design pattern identifies the participatign class and their instances, their roles and collaborations, and the distribution of responsibilities.
Categorizing Patterns Creational Design Patterns  Focuses on handling object creation mechanisms By controlling the creation process, it aims to solve the problem of the basic approach to object creation adding complexity in a project   Constructor, Factory, Abstract, Prototype, Singleton, and Builder are some of the creational design patterns.</description>
    </item>
    
    <item>
      <title>Recursion Prompts</title>
      <link>https://haleyjung.github.io/posts/2022/02/recursion-prompts/</link>
      <pubDate>Thu, 17 Feb 2022 00:05:21 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/recursion-prompts/</guid>
      <description>In Progres&amp;hellip;
// Solve the following prompts using recursion.  // 1. Calculate the factorial of a number. The factorial of a non-negative integer n, // denoted by n!, is the product of all positive integers less than or equal to n. // Example: 5! = 5 x 4 x 3 x 2 x 1 = 120 // factorial(5); // 120 var factorial = function(n) { if (isNaN(n) || n &amp;lt; 0) { return null; } if (n === 0 || n === 1) { return 1; } return n * factorial(n-1); }; // 2.</description>
    </item>
    
    <item>
      <title>The Event Loop</title>
      <link>https://haleyjung.github.io/posts/2022/02/the-event-loop/</link>
      <pubDate>Wed, 16 Feb 2022 09:01:36 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/the-event-loop/</guid>
      <description>JavaScript Runtime &amp;amp; Web API console.log(&amp;#34;Start script&amp;#34;); setTimeout(() =&amp;gt; { task(&amp;#34;Download a file&amp;#34;); }, 1000); console.log(&amp;#34;Done&amp;#34;); /* output: Start script Done Download a file */  setTimeout(), fetch requests, and DOM events (such as clicking a button) are parts of the Web APIs of the web browser. These operations can be performed concurrently and asynchronously.
  When setTimeout() function is called, the JavaScript engine places it on the call stack &amp;amp; the Web API creates a timer that expires in 1 second.</description>
    </item>
    
    <item>
      <title>Promises</title>
      <link>https://haleyjung.github.io/posts/2022/02/promises/</link>
      <pubDate>Tue, 15 Feb 2022 00:03:42 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/promises/</guid>
      <description>Promise  A function operates asynchronously via an event loop An async function uses Promise to return the result   Promise is an object that returns a value in the future. It represents the an eventual completion or failures of an asynchronous operation. If a function cannot return a value or throw an exception without blocking, it can return a promise instead. Use promise whenever we are using async or blocking code.</description>
    </item>
    
  </channel>
</rss>
