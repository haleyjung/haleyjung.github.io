<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learned</title>
    <link>https://haleyjung.github.io/</link>
    <description>Recent content on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 09 Mar 2022 00:40:48 -0500</lastBuildDate><atom:link href="https://haleyjung.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Redux</title>
      <link>https://haleyjung.github.io/posts/2022/03/understanding-redux/</link>
      <pubDate>Wed, 09 Mar 2022 00:40:48 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/understanding-redux/</guid>
      <description>Redux: Predictable State Container for JavaScript apps
 I&amp;rsquo;ve just finished a two-day sprint using React, and will be moving onto using Redux with React. So here are some fundamentals of Redux before the next sprint.
What is it?  Predictable State Container for JavaScript apps A JS library for managing global application state  Has packages including: React-Redux, Redux Toolkit, and Redux DevTools Extension   Uses a one-way data flow app structure Reduces server calls: only made when state change requires the server call  Key Points  Predictable  Helps applications to behave consistently Runs in different environments: client, server, native   Centralized  States can be used from any components (instead of lifting state to parent components) const rootReducer = Redux.</description>
    </item>
    
    <item>
      <title>Notes from a ReactJS Sprint</title>
      <link>https://haleyjung.github.io/posts/2022/03/notes-from-a-reactjs-sprint/</link>
      <pubDate>Tue, 08 Mar 2022 01:10:37 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/notes-from-a-reactjs-sprint/</guid>
      <description>Setting up Babel to watch all changes and compile automatically  In package.json’s scripts, create “start” and add the following including watch:  npx babel . --out-dir=compiled --presets=@babel/preset-react --ignore=node_modules,compiled --source-maps=inline --watch npx: allows local dependencies to run as commands babel: hey npx, search for and run the Babel command-line utility .: hey Babel, transpile all JS files in the current working directory --out-dir: hey again Babel, put the transpiled files into the compiled/ folder --presets hey hey Babel, make this kind of transformations.</description>
    </item>
    
    <item>
      <title>Backtracking Algorithm: N Queen</title>
      <link>https://haleyjung.github.io/posts/2022/03/backtracking-algorithm-n-queen/</link>
      <pubDate>Wed, 02 Mar 2022 00:16:04 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/backtracking-algorithm-n-queen/</guid>
      <description>Prompt The eight queens puzzle is the problem of placing eight chess queens on an 8×8 chessboard so that no two queens threaten each other. Thus, a solution requires that no two queens share the same row, column, or diagonal. The eight queens puzzle is an example of the more general n queens problem of placing n non-attacking queens on an n×n chessboard, for which solutions exist for all natural numbers n with the exception of n=2 and n=3.</description>
    </item>
    
    <item>
      <title>Backtracking Algorithm: Knight&#39;s Tour</title>
      <link>https://haleyjung.github.io/posts/2022/03/backtracking-algorithm-knights-tour/</link>
      <pubDate>Tue, 01 Mar 2022 22:40:46 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/backtracking-algorithm-knights-tour/</guid>
      <description>What is a backtracking algorithm? An algorithmic-technique for solving problems recursively by trying to build a solution incrementally one piece at a time, removing solutions that fail to satisfy the constraints of the problem at any point of time (the time elapsed till reachign any level of the search tree).
It works incrementally.
Think of SudoKu!  To solve SudoKu, we fill digits one by one. When the current digit we added doesn&amp;rsquo;t lead to a solution, we remove it = backtrack We try another digit.</description>
    </item>
    
    <item>
      <title>Time Complexity</title>
      <link>https://haleyjung.github.io/posts/2022/02/time-complexity/</link>
      <pubDate>Sun, 27 Feb 2022 16:52:02 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/time-complexity/</guid>
      <description>Big O Notation  A mathematical notation that shows how efficient an algorithm is in the worst-case scenario relative to its input size. It captures how much time or space an algorithm would require approximately as the input size grows: time complexity &amp;amp; space complexity f(n) = O(inputSize)  What is Time Complexity?  Does NOT represent the actual time required to execute a code The computational time (CPU time) it will take to execute an algorithm, determined by the input size and the solution of the algorithm.</description>
    </item>
    
    <item>
      <title>Understanding Currying</title>
      <link>https://haleyjung.github.io/posts/2022/02/understanding-currying/</link>
      <pubDate>Fri, 25 Feb 2022 00:01:03 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/understanding-currying/</guid>
      <description>What is Currying?  a transformation of functions that translates a function from callable as f(a, b, c) into callable as f(a)(b)(c). It transforms a function, and does not call it.  Example Code function curry(f) { // curry(f) does the currying transform  return function(a) { return function(b) { return f(a, b); }; }; } // usage function sum(a, b) { return a + b; } let curriedSum = curry(sum); alert( curriedSum(1)(2)); // 3 References &amp;ldquo;Currying&amp;rdquo;, JavaScript.</description>
    </item>
    
    <item>
      <title>For Loop with SetTimeout()</title>
      <link>https://haleyjung.github.io/posts/2022/02/for-loop-with-settimeout/</link>
      <pubDate>Thu, 24 Feb 2022 23:40:53 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/for-loop-with-settimeout/</guid>
      <description>Prompt 1 // Prompt 1 var array = [1, 2, 3, 4, 5] for(var i = 0; i &amp;lt; array.length; i++) { setTimeout(() =&amp;gt; { console.log(array[i]) }, 1000); } console.log(array[i]); // 5  For loop executes first  the for loop only exits until the set condition breaks.   After it&amp;rsquo;s finished, setTimeout() is executed  setTimeout() usually takes a callback function as its argument   setTimeout() has access to i in the for loop, thanks to closure arrayp[i] is therefore the last element of array when the console.</description>
    </item>
    
    <item>
      <title>Prototypes Review: Object.create()</title>
      <link>https://haleyjung.github.io/posts/2022/02/prototypes-review-object.create/</link>
      <pubDate>Thu, 24 Feb 2022 21:47:06 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/prototypes-review-object.create/</guid>
      <description>Case 1 var obj1 = { x: 10 }; var obj2 = Object.create(obj1); var obj3 = Object.create(obj1); obj1.x = 15; var result = obj2.x + obj3.x; console.log(result); // 15 + 15 = 30  obj1.x = 15; updates obj2.x and obj3.x to 15 from 10 Hence the result will be 15 + 15 = 30  Case 2 var obj1 = { x: 10 }; var obj2 = Object.create(obj1); obj2.x += 10; obj1.</description>
    </item>
    
    <item>
      <title>LeetCode: Shifting Letters - medium</title>
      <link>https://haleyjung.github.io/posts/2022/02/leetcode-shifting-letters-medium/</link>
      <pubDate>Thu, 24 Feb 2022 07:06:01 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/leetcode-shifting-letters-medium/</guid>
      <description>Prompt You are given a string s of lowercase English letters and an integer array shifts of the same length.
Call the shift() of a letter, the next letter in the alphabet, (wrapping around so that &amp;lsquo;z&amp;rsquo; becomes &amp;lsquo;a&amp;rsquo;).
For example, shift(&#39;a&#39;) = &#39;b&#39;, shift(&#39;t&#39;) = &#39;u&#39;, and shift(&#39;z&#39;) = &#39;a&#39;. Now for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times.</description>
    </item>
    
    <item>
      <title>Underscore Review</title>
      <link>https://haleyjung.github.io/posts/2022/02/underscore-review/</link>
      <pubDate>Wed, 23 Feb 2022 23:09:10 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/underscore-review/</guid>
      <description>_.identity = function(val) { return val; }; // first: return the first element if n is undefined  // if n is defined, return an array of the first n elements of the array _.first = function(array, n) { return n === undefined ? array[0] : array.slice(0, n); }; // last: return the last element if n is undefined  // if n is defined, return an array of the last n elements of the array _.</description>
    </item>
    
  </channel>
</rss>
