<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learned</title>
    <link>https://haleyjung.github.io/</link>
    <description>Recent content on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 05 Feb 2022 10:48:06 -0500</lastBuildDate><atom:link href="https://haleyjung.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Semantic Versioning</title>
      <link>https://haleyjung.github.io/posts/2022/02/semantic-versioning/</link>
      <pubDate>Sat, 05 Feb 2022 10:48:06 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/semantic-versioning/</guid>
      <description>Semantic Versioning (SemVer) A versioning system for software releases, such as new plugins, addons, libraries, and extensions.
It consists of 3 components in the format of X.Y.Z
X: Major Version  When the major version number is increased, the minor and patch version numbers are reset to zero. Increasing the major number breaks the existing API.  Y: Minor Version  Minor version indicates the release of new functionality in the system (when implementing new features in a backwards-incompatible way).</description>
    </item>
    
    <item>
      <title>Systems</title>
      <link>https://haleyjung.github.io/posts/2022/02/systems/</link>
      <pubDate>Fri, 04 Feb 2022 00:31:44 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/systems/</guid>
      <description>Webpage Rendering  HTML is received from the server and processed into the DOM. The styles are loaded and parsed into the CSSOM. The render tree is created using the DOM and CSSOM. The browser creates a layout for each render tree element with its individual coordinates using the flow method, which requires just one pass to layout all the elements, compared to the tables method that requires more than one pass.</description>
    </item>
    
    <item>
      <title>Client-Side Validation</title>
      <link>https://haleyjung.github.io/posts/2022/02/client-side-validation/</link>
      <pubDate>Thu, 03 Feb 2022 13:50:26 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/client-side-validation/</guid>
      <description>What is client-side validation? It refers to providing feedbacks to users so that they can give us the correct information.
e.g. &amp;ldquo;your password must be at least 8 characters&amp;rdquo; or &amp;ldquo;this field is required.&amp;rdquo;
HTML5 Form Validation Form validaiton is a large part of project-specific, dependent on business logic.
Input Types &amp;lt;form&amp;gt; &amp;lt;label&amp;gt;Name (required)&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Email (required)&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;email&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Age (required, must be older than 13)&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;age&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Number of siblings&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;siblings&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Number of rooms in your house&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;rooms&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Blog url&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;blog&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Twitter Username&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;twitter&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; HTML5 Constraint API HTML5 constraint validation API helps developers avoid use of JavaScript for simple validations.</description>
    </item>
    
    <item>
      <title>Local Storage</title>
      <link>https://haleyjung.github.io/posts/2022/02/local-storage/</link>
      <pubDate>Wed, 02 Feb 2022 01:45:40 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/local-storage/</guid>
      <description>Definition of Local Storage  a browser API that allows a web application to persist its state inside a user&amp;rsquo;s web browser can be used to persist information retrieved from sources like user events, HTTP responses, and calculated results only persists strings has no expiration time until explicitly cleared improves a web application&amp;rsquo;s user experience more data can be stored in localStorage than in cookies  Data model: the software representation of information Data persistence: store data in the application so that when a user comes back to the site, they can pick up from where they left off</description>
    </item>
    
    <item>
      <title>Node.js: Content Types</title>
      <link>https://haleyjung.github.io/posts/2022/02/node.js-content-types/</link>
      <pubDate>Tue, 01 Feb 2022 01:30:17 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/node.js-content-types/</guid>
      <description>JSON: JavaScript Object Notation JSON, or JavaScript Object Notation, is a minimal, readable format for structuring data. It is used primarily to transmit data between a server and web application, as an alternative to XML.
JSON can be parsed by a standard JavaScript function, and is parsed into a ready-to-use JavaScript object. It is thus faster and easier than XML.
To read from JSON, we need to first use fs to read in the file as text(strings) and then `JOSN.</description>
    </item>
    
    <item>
      <title>Node / Node.JS</title>
      <link>https://haleyjung.github.io/posts/2022/01/node-/-node.js/</link>
      <pubDate>Mon, 31 Jan 2022 10:35:53 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/node-/-node.js/</guid>
      <description>What is Node? Nodes in the DOM are elements from the HTML page, which are organized in a hiearchical tree-like structure consisting of parents and children. Elements such as &amp;lt;p&amp;gt;, &amp;lt;div&amp;gt;, &amp;lt;section&amp;gt; are considered as &amp;ldquo;element&amp;rdquo; nodes while comments are &amp;ldquo;comment&amp;rdquo; nodes, &amp;ldquo;text&amp;rdquo; objects and line-breaks are &amp;ldquo;text&amp;rdquo; nodes. Every HTML element is a node, but not every node is an HTML element.
The topmost node is the root node of the DOM tree, Document, which has two children: &amp;lt;!</description>
    </item>
    
    <item>
      <title>Recursion</title>
      <link>https://haleyjung.github.io/posts/2022/01/recursion/</link>
      <pubDate>Sun, 30 Jan 2022 01:12:59 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/recursion/</guid>
      <description>Definition Recursion is a technique for solving problems wherein a function makes calls to itself. By doing so, it can complete a small amount of the processing, and delegate the rest of the problem to the recursive calls.
Recursive function always come with a function inside. With 2 minimum cases inside: a base case, and a recursive case. The base case is the situation or condition where we don&amp;rsquo;t need to recursively invoke the function and is safe to assume that that function can end easily.</description>
    </item>
    
    <item>
      <title>Twitter Clone</title>
      <link>https://haleyjung.github.io/posts/2022/01/twitter-clone/</link>
      <pubDate>Sat, 29 Jan 2022 23:31:33 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/twitter-clone/</guid>
      <description>Cloning Twitter using jQuery &amp;amp; NodeJS Goal The goal of the Twitter clone project was to create a single page that generates live user feeds. I used jQuery to create HTML elements and functions to make them dynamic.
Wireframe I began with drawing various wireframes to organize the structure of the overall layout and individual components. The first wireframe was a rough design to indicate the overall layout that was going to be created using CSS Grid.</description>
    </item>
    
    <item>
      <title>CSS Grid Layout</title>
      <link>https://haleyjung.github.io/posts/2022/01/css-grid-layout/</link>
      <pubDate>Fri, 28 Jan 2022 22:52:16 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/css-grid-layout/</guid>
      <description>CSS Grid Layout is great for creating a responsive web page layout.
We can also define an area by giving it a name and then specify the location of that area in the value of the grid-template-areas property, such as:
 header footer sidebar content  The grid-area property can be assigned to a class:
.header { grid-area: hd; } .footer { grid-area: ft; } .content { grid-area: main; } .</description>
    </item>
    
    <item>
      <title>Prototype &amp; Class Patterns</title>
      <link>https://haleyjung.github.io/posts/2022/01/prototype-class-patterns/</link>
      <pubDate>Thu, 27 Jan 2022 07:29:36 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/prototype-class-patterns/</guid>
      <description>Prototype Chains  A mechanism for making objects that resemble other objects. Makes one object behave as if it has the same properties of another object by delegating its failed property lookups to that other object at lookup time. Prototype chains make it possible for many child objects to all reflect the properties of one parent object. We can use a prototype object to store all the shared methods and make all our instance objects delegrate to that prototype object, rather than copying all the methods references over.</description>
    </item>
    
  </channel>
</rss>
