<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learned</title>
    <link>https://haleyjung.github.io/</link>
    <description>Recent content on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 25 Jan 2022 12:07:56 -0500</lastBuildDate><atom:link href="https://haleyjung.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript: this</title>
      <link>https://haleyjung.github.io/posts/2022/01/javascript-this/</link>
      <pubDate>Tue, 25 Jan 2022 12:07:56 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/javascript-this/</guid>
      <description>What is this?  An identifier for values Designed to support object oriented programming  Binding When a method or constructor function is invoked, this binds to a likely-focal object, so that we can easily access that object.
this is not bound to&amp;hellip; var fn = function (a, b) { log(this); // what is this NOT bound to? };   The function object: {f}
  An instance of the function it appears within: {}</description>
    </item>
    
    <item>
      <title>IIFE &amp; Scopes</title>
      <link>https://haleyjung.github.io/posts/2022/01/iife-scopes/</link>
      <pubDate>Sat, 22 Jan 2022 11:10:24 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/iife-scopes/</guid>
      <description>Function Expression vs. Function Declaration The function name can be omitted in function expressions to create anonymous functions while function declarations (statements) require names.
A function expression can be used as an IIFE (Immediately Invoked Function Expression).
//Function Expression let variableName = function() { statements; }; // -&amp;gt; ends with a semicolon because it&amp;#39;s an assignment statement; not part of the function syntax  //Function Declaration function name([param[, param,[..., param]]]) { statements; } Definition of IIFE IIFE, also known as Self-Executing Anonymous Function, is a JavaScript function that runs as soon as it is defined.</description>
    </item>
    
    <item>
      <title>Function Call vs Function Invocation</title>
      <link>https://haleyjung.github.io/posts/2022/01/function-call-vs-function-invocation/</link>
      <pubDate>Fri, 21 Jan 2022 10:44:05 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/function-call-vs-function-invocation/</guid>
      <description>Function Call  Directly telling the function to run. The combined process of fully applying the function then invoking it, usually with the added semantic that the code will wait for a return value.  Function Invocation  i.e. Function got executed. Indirectly refers to the calling statement. The process required to schedule the function with its fully bound arguments for execution. Includes pushing arguments onto the stack and transferring the PC to the new address, placing messages/objects/functions/thunks on a queue for later execution or various other RPC systems.</description>
    </item>
    
    <item>
      <title>DOM</title>
      <link>https://haleyjung.github.io/posts/2022/01/dom/</link>
      <pubDate>Thu, 20 Jan 2022 10:50:59 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/dom/</guid>
      <description>Definition  DOM: Document Object Model An object-based representation of the source HTML document An interface to web pages; an API to the page  Functions  Allows browsers to determine what to render in the viewport Allows JavaScript to manipulate the page&amp;rsquo;s content, structure, and styles  DOM vs. HTML DOM is not HTML. It is an interface to valid HTML documents. They differ from one another for a number of reasons:</description>
    </item>
    
    <item>
      <title>Primitive and Non-Primitive Data Types</title>
      <link>https://haleyjung.github.io/posts/2022/01/primitive-and-non-primitive-data-types/</link>
      <pubDate>Wed, 19 Jan 2022 12:53:10 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/primitive-and-non-primitive-data-types/</guid>
      <description>Definitions Data Type There is a variety of data types, such as number, boolean, string, null, undefined, etc.
Primitive Data Type  Numbers Strings Booleans undefined null  Primitives are stored by value.
Every time a new variable is declared using a primitive data type, a new address in memory is created for that value.
let a = 1; let b = a;  a has value of 1, which is a Number, a Primitive data type.</description>
    </item>
    
    <item>
      <title>CDN: Content Delivery Networks</title>
      <link>https://haleyjung.github.io/posts/2022/01/cdn-content-delivery-networks/</link>
      <pubDate>Tue, 18 Jan 2022 11:27:23 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/cdn-content-delivery-networks/</guid>
      <description>Definition  CDN is a group of geographically distributed servers that speed up the delivery of web content by caching contents in proxy servers near to the user&amp;rsquo;s physical location. Leads to a faster and high performance of activities such as watching a movie, downloading a software, checking a bank balance, posting on social media, and making a transaction.  Purpose  Users experience a consistent, faster, and high performance web application.</description>
    </item>
    
    <item>
      <title>Scopes &amp; Closures</title>
      <link>https://haleyjung.github.io/posts/2022/01/scopes-closures/</link>
      <pubDate>Mon, 17 Jan 2022 18:36:49 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/scopes-closures/</guid>
      <description>Lexical Scopes The part of a program where a binding between a variable and value is valid (variables are only available under certain circumstances with different languages having different access rules).
 Describes the regions in my code where I can refer to a variable by name without getting access errors. Defining a function creates a new lexical scope It is a collection of key-value pairs, but is not an object - except the global context object.</description>
    </item>
    
    <item>
      <title>APIs &amp; jQuery</title>
      <link>https://haleyjung.github.io/posts/2022/01/apis-jquery/</link>
      <pubDate>Sat, 15 Jan 2022 12:40:33 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/apis-jquery/</guid>
      <description>APIs  Manipulate (create new or update existing) HTML elements on the page Create event-based user interactivity Embed rich media in documents with HTML &amp;lt;audio&amp;gt; and &amp;lt;video&amp;gt; elements Fetch data from a server Create visualizations by:  Creating SVG (Scalable Vector Graphics) Drawing on HTML canvas elements Rendering high-performance interactive 2D and 3D graphics with WebGL    Define jQuery  A JavaScript library that improves the native DOM API Portable across browsers Has a concise syntax Makes manipulating and adding interactivity to HTML documents easier  Using jQuery Method 1: Download the jQuery library and install it locally in the HTML code</description>
    </item>
    
    <item>
      <title>Chrome DevTools: Debugging JavaScript</title>
      <link>https://haleyjung.github.io/posts/2022/01/chrome-devtools-debugging-javascript/</link>
      <pubDate>Thu, 13 Jan 2022 09:33:30 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/chrome-devtools-debugging-javascript/</guid>
      <description>Step 1: Reproduce the bug Finding a series of actions that consistently reproduces a bug is always the first step to debugging.
Step 2: Get familiar with the Sources panel UI After opening the DevTools by pressing Command+Option+J on Mac, click the Sources tab. This is where we debug JavaScript. It has 3 main parts:
(1) Top left: File Navigator pane
This is where we can see and inspect every files that the page requests.</description>
    </item>
    
    <item>
      <title>Approach to Problem Solving</title>
      <link>https://haleyjung.github.io/posts/2022/01/approach-to-problem-solving/</link>
      <pubDate>Wed, 12 Jan 2022 10:26:29 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/approach-to-problem-solving/</guid>
      <description>IOCE: Input, Output, Constraints, Edge Cases  Identifying the input(s), output(s), constrains, and edge cases is important as we need to know what the inputs and expected outputs are for a problem, which also reflects my understanding of the prompt.  Strategy(s): How can I get from my input to my output?  A moment to be extra verbal and thinking out loud to brainstorm strategies After brainstorming the first strategy (write quick notes about it to remember), I can also come up with a second strategy, then identify trade-off.</description>
    </item>
    
  </channel>
</rss>
