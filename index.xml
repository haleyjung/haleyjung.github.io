<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learned</title>
    <link>https://haleyjung.github.io/</link>
    <description>Recent content on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 01 Mar 2022 22:40:46 -0500</lastBuildDate><atom:link href="https://haleyjung.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Backtracking Algorithm</title>
      <link>https://haleyjung.github.io/posts/2022/03/backtracking-algorithm/</link>
      <pubDate>Tue, 01 Mar 2022 22:40:46 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/backtracking-algorithm/</guid>
      <description>What is a backtracking algorithm? An algorithmic-technique for solving problems recursively by trying to build a solution incrementally one piece at a time, removing solutions that fail to satisfy the constraints of the problem at any point of time (the time elapsed till reachign any level of the search tree).
It works incrementally.
Think of SudoKu!  To solve SudoKu, we fill digits one by one. When the current digit we added doesn&amp;rsquo;t lead to a solution, we remove it = backtrack We try another digit.</description>
    </item>
    
    <item>
      <title>Time Complexity</title>
      <link>https://haleyjung.github.io/posts/2022/02/time-complexity/</link>
      <pubDate>Sun, 27 Feb 2022 16:52:02 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/time-complexity/</guid>
      <description>Big O Notation  A mathematical notation that shows how efficient an algorithm is in the worst-case scenario relative to its input size. It captures how much time or space an algorithm would require approximately as the input size grows: time complexity &amp;amp; space complexity f(n) = O(inputSize)  What is Time Complexity?  Does NOT represent the actual time required to execute a code The computational time (CPU time) it will take to execute an algorithm, determined by the input size and the solution of the algorithm.</description>
    </item>
    
    <item>
      <title>Understanding Currying</title>
      <link>https://haleyjung.github.io/posts/2022/02/understanding-currying/</link>
      <pubDate>Fri, 25 Feb 2022 00:01:03 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/understanding-currying/</guid>
      <description>What is Currying?  a transformation of functions that translates a function from callable as f(a, b, c) into callable as f(a)(b)(c). It transforms a function, and does not call it.  Example Code function curry(f) { // curry(f) does the currying transform  return function(a) { return function(b) { return f(a, b); }; }; } // usage function sum(a, b) { return a + b; } let curriedSum = curry(sum); alert( curriedSum(1)(2)); // 3 References &amp;ldquo;Currying&amp;rdquo;, JavaScript.</description>
    </item>
    
    <item>
      <title>For Loop with SetTimeout()</title>
      <link>https://haleyjung.github.io/posts/2022/02/for-loop-with-settimeout/</link>
      <pubDate>Thu, 24 Feb 2022 23:40:53 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/for-loop-with-settimeout/</guid>
      <description>Prompt 1 // Prompt 1 var array = [1, 2, 3, 4, 5] for(var i = 0; i &amp;lt; array.length; i++) { setTimeout(() =&amp;gt; { console.log(array[i]) }, 1000); } console.log(array[i]); // 5  For loop executes first  the for loop only exits until the set condition breaks.   After it&amp;rsquo;s finished, setTimeout() is executed  setTimeout() usually takes a callback function as its argument   setTimeout() has access to i in the for loop, thanks to closure arrayp[i] is therefore the last element of array when the console.</description>
    </item>
    
    <item>
      <title>Prototypes Review: Object.create()</title>
      <link>https://haleyjung.github.io/posts/2022/02/prototypes-review-object.create/</link>
      <pubDate>Thu, 24 Feb 2022 21:47:06 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/prototypes-review-object.create/</guid>
      <description>Case 1 var obj1 = { x: 10 }; var obj2 = Object.create(obj1); var obj3 = Object.create(obj1); obj1.x = 15; var result = obj2.x + obj3.x; console.log(result); // 15 + 15 = 30  obj1.x = 15; updates obj2.x and obj3.x to 15 from 10 Hence the result will be 15 + 15 = 30  Case 2 var obj1 = { x: 10 }; var obj2 = Object.create(obj1); obj2.x += 10; obj1.</description>
    </item>
    
    <item>
      <title>LeetCode: Shifting Letters - medium</title>
      <link>https://haleyjung.github.io/posts/2022/02/leetcode-shifting-letters-medium/</link>
      <pubDate>Thu, 24 Feb 2022 07:06:01 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/leetcode-shifting-letters-medium/</guid>
      <description>Prompt You are given a string s of lowercase English letters and an integer array shifts of the same length.
Call the shift() of a letter, the next letter in the alphabet, (wrapping around so that &amp;lsquo;z&amp;rsquo; becomes &amp;lsquo;a&amp;rsquo;).
For example, shift(&#39;a&#39;) = &#39;b&#39;, shift(&#39;t&#39;) = &#39;u&#39;, and shift(&#39;z&#39;) = &#39;a&#39;. Now for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times.</description>
    </item>
    
    <item>
      <title>Underscore Review</title>
      <link>https://haleyjung.github.io/posts/2022/02/underscore-review/</link>
      <pubDate>Wed, 23 Feb 2022 23:09:10 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/underscore-review/</guid>
      <description>_.identity = function(val) { return val; }; // first: return the first element if n is undefined  // if n is defined, return an array of the first n elements of the array _.first = function(array, n) { return n === undefined ? array[0] : array.slice(0, n); }; // last: return the last element if n is undefined  // if n is defined, return an array of the last n elements of the array _.</description>
    </item>
    
    <item>
      <title>Writing My Own `StringifyJSON`</title>
      <link>https://haleyjung.github.io/posts/2022/02/writing-my-own-stringifyjson/</link>
      <pubDate>Wed, 23 Feb 2022 00:27:45 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/writing-my-own-stringifyjson/</guid>
      <description>Goal I&amp;rsquo;m going to write out the JSON.stringify() method, which converts a JavaScript object or value to a JSON string.
 Boolean, Number, and String objects are converted to the corresponding primitive values during stringification.  String will be wrapped in extra quotation marks   undefined, Function, and Symbol are not valid JSON values. If they are found in an array, they will be changed to null. The numbers Infinity and NaN, as well as the value null, are all considered null.</description>
    </item>
    
    <item>
      <title>Writing My Own `getElementsByClassName()`</title>
      <link>https://haleyjung.github.io/posts/2022/02/writing-my-own-getelementsbyclassname/</link>
      <pubDate>Tue, 22 Feb 2022 00:23:20 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/writing-my-own-getelementsbyclassname/</guid>
      <description>Goal I&amp;rsquo;m going to write out the getElementsByClassName() method, using JavaScript. When it&amp;rsquo;s called on the document object, it returns an array-like object of all child elements which have all of the given class name(s).
Pseudocodes // Declare an empty array to store the result // Declare a function expression `hasClassName` // with a function parameter as `node` // to check which node has the same class name as `className` // Call the function expression `hasClassName` // and pass `document.</description>
    </item>
    
    <item>
      <title>Instantiation Patterns</title>
      <link>https://haleyjung.github.io/posts/2022/02/instantiation-patterns/</link>
      <pubDate>Mon, 21 Feb 2022 23:46:14 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/instantiation-patterns/</guid>
      <description>What is an instantiation pattern in JavaScript? It&amp;rsquo;s a way to create an object using functions.
5 Types of Instantiation Patterns 1. Functional Instantiation  Create a function Create an empty object inside the function  Properties and methods can be created here They will be accessible every time the function is called   Return the object  Pros
 Easy to understand Private properties (contained within the closure scope)  Cons</description>
    </item>
    
  </channel>
</rss>
