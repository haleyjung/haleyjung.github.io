<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learned</title>
    <link>https://haleyjung.github.io/</link>
    <description>Recent content on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 20 Jan 2022 10:50:59 -0500</lastBuildDate><atom:link href="https://haleyjung.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DOM</title>
      <link>https://haleyjung.github.io/posts/2022/01/dom/</link>
      <pubDate>Thu, 20 Jan 2022 10:50:59 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/dom/</guid>
      <description>Definition  DOM: Document Object Model An object-based representation of the source HTML document An interface to web pages; an API to the page  Functions  Allows browsers to determine what to render in the viewport Allows JavaScript to manipulate the page&amp;rsquo;s content, structure, and styles  DOM vs. HTML DOM is not HTML. It is an interface to valid HTML documents. They differ from one another for a number of reasons:</description>
    </item>
    
    <item>
      <title>Primitive and Non-Primitive Data Types</title>
      <link>https://haleyjung.github.io/posts/2022/01/primitive-and-non-primitive-data-types/</link>
      <pubDate>Wed, 19 Jan 2022 12:53:10 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/primitive-and-non-primitive-data-types/</guid>
      <description>Definitions Data Type There is a variety of data types, such as number, boolean, string, null, undefined, etc.
Primitive Data Type  Numbers Strings Booleans undefined null  Primitives are stored by value.
Every time a new variable is declared using a primitive data type, a new address in memory is created for that value.
let a = 1; let b = a;  a has value of 1, which is a Number, a Primitive data type.</description>
    </item>
    
    <item>
      <title>CDN: Content Delivery Networks</title>
      <link>https://haleyjung.github.io/posts/2022/01/cdn-content-delivery-networks/</link>
      <pubDate>Tue, 18 Jan 2022 11:27:23 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/cdn-content-delivery-networks/</guid>
      <description>Definition  CDN is a group of geographically distributed servers that speed up the delivery of web content by caching contents in proxy servers near to the user&amp;rsquo;s physical location. Leads to a faster and high performance of activities such as watching a movie, downloading a software, checking a bank balance, posting on social media, and making a transaction.  Purpose  Users experience a consistent, faster, and high performance web application.</description>
    </item>
    
    <item>
      <title>Scopes &amp; Closures</title>
      <link>https://haleyjung.github.io/posts/2022/01/scopes-closures/</link>
      <pubDate>Mon, 17 Jan 2022 18:36:49 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/scopes-closures/</guid>
      <description>Lexical Scopes The part of a program where a binding between a variable and value is valid (variables are only available under certain circumstances with different languages having different access rules).
 Describes the regions in my code where I can refer to a variable by name without getting access errors. Defining a function creates a new lexical scope It is a collection of key-value pairs, but is not an object - except the global context object.</description>
    </item>
    
    <item>
      <title>APIs &amp; jQuery</title>
      <link>https://haleyjung.github.io/posts/2022/01/apis-jquery/</link>
      <pubDate>Sat, 15 Jan 2022 12:40:33 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/apis-jquery/</guid>
      <description>APIs  Manipulate (create new or update existing) HTML elements on the page Create event-based user interactivity Embed rich media in documents with HTML &amp;lt;audio&amp;gt; and &amp;lt;video&amp;gt; elements Fetch data from a server Create visualizations by:  Creating SVG (Scalable Vector Graphics) Drawing on HTML canvas elements Rendering high-performance interactive 2D and 3D graphics with WebGL    Define jQuery  A JavaScript library that improves the native DOM API Portable across browsers Has a concise syntax Makes manipulating and adding interactivity to HTML documents easier  Using jQuery Method 1: Download the jQuery library and install it locally in the HTML code</description>
    </item>
    
    <item>
      <title>Chrome DevTools: Debugging JavaScript</title>
      <link>https://haleyjung.github.io/posts/2022/01/chrome-devtools-debugging-javascript/</link>
      <pubDate>Thu, 13 Jan 2022 09:33:30 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/chrome-devtools-debugging-javascript/</guid>
      <description>Step 1: Reproduce the bug Finding a series of actions that consistently reproduces a bug is always the first step to debugging.
Step 2: Get familiar with the Sources panel UI After opening the DevTools by pressing Command+Option+J on Mac, click the Sources tab. This is where we debug JavaScript. It has 3 main parts:
(1) Top left: File Navigator pane
This is where we can see and inspect every files that the page requests.</description>
    </item>
    
    <item>
      <title>Approach to Problem Solving</title>
      <link>https://haleyjung.github.io/posts/2022/01/approach-to-problem-solving/</link>
      <pubDate>Wed, 12 Jan 2022 10:26:29 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/approach-to-problem-solving/</guid>
      <description>IOCE: Input, Output, Constraints, Edge Cases  Identifying the input(s), output(s), constrains, and edge cases is important as we need to know what the inputs and expected outputs are for a problem, which also reflects my understanding of the prompt.  Strategy(s): How can I get from my input to my output?  A moment to be extra verbal and thinking out loud to brainstorm strategies After brainstorming the first strategy (write quick notes about it to remember), I can also come up with a second strategy, then identify trade-off.</description>
    </item>
    
    <item>
      <title>ESLint</title>
      <link>https://haleyjung.github.io/posts/2022/01/eslint/</link>
      <pubDate>Tue, 11 Jan 2022 23:21:14 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/eslint/</guid>
      <description>What is ESLint? &amp;ldquo;ESLint is a static code analysis tool for identifying problematic patterns found in JavaScript code. It was created by Nicholas C. Zakas in 2013. Rules in ESLint are configurable, and customized rules can be defined and loaded. ESLint covers both code quality and coding style issues.&amp;rdquo;
ESLint is written using Node.js to provide a fast runtime standard using a customizable set of rules like below.
module.exports = { parserOptions: { ecmaVersion: 5 }, rules: { /* Indentation */ &amp;#39;no-mixed-spaces-and-tabs&amp;#39;: 2, &amp;#39;indent-legacy&amp;#39;: [2, 2], /* Variable names */ &amp;#39;camelcase&amp;#39;: 2, /* Language constructs */ &amp;#39;curly&amp;#39;: 2, &amp;#39;eqeqeq&amp;#39;: [2, &amp;#39;smart&amp;#39;], &amp;#39;func-style&amp;#39;: [2, &amp;#39;expression&amp;#39;], /* Semicolons */ &amp;#39;semi&amp;#39;: 2, &amp;#39;no-extra-semi&amp;#39;: 2, /* Padding &amp;amp; additional whitespace (perferred but optional) */ &amp;#39;brace-style&amp;#39;: [2, &amp;#39;1tbs&amp;#39;, { &amp;#39;allowSingleLine&amp;#39;: true }], &amp;#39;semi-spacing&amp;#39;: 1, &amp;#39;key-spacing&amp;#39;: 1, &amp;#39;block-spacing&amp;#39;: 1, &amp;#39;comma-spacing&amp;#39;: 1, &amp;#39;no-multi-spaces&amp;#39;: 1, &amp;#39;space-before-blocks&amp;#39;: 1, &amp;#39;keyword-spacing&amp;#39;: [1, { &amp;#39;before&amp;#39;: true, &amp;#39;after&amp;#39;: true }], &amp;#39;space-infix-ops&amp;#39;: 1, /* Variable declaration */ &amp;#39;one-var&amp;#39;: [1, { &amp;#39;uninitialized&amp;#39;: &amp;#39;always&amp;#39;, &amp;#39;initialized&amp;#39;: &amp;#39;never&amp;#39; }], /* Minuta */ &amp;#39;comma-style&amp;#39;: [2, &amp;#39;last&amp;#39;], &amp;#39;quotes&amp;#39;: [1, &amp;#39;single&amp;#39;], &amp;#39;max-len&amp;#39;: [1, { &amp;#39;code&amp;#39;: 100 }], } }; Why should we use ESLint?</description>
    </item>
    
    <item>
      <title>Git Push Error</title>
      <link>https://haleyjung.github.io/posts/2022/01/git-push-error/</link>
      <pubDate>Mon, 10 Jan 2022 12:19:52 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/git-push-error/</guid>
      <description>error: failed to push some refs to &#39;origin&#39; &amp;ldquo;This means that someone else pushed a commit to the same branch you&amp;rsquo;re pushing to, but you don&amp;rsquo;t have that commit on your laptop yet. This can happen if it has been awhile since you ran &amp;ldquo;git pull&amp;rdquo; on a branch that many people contribute to, such as staging.&amp;rdquo;
To fix this issue, run:
git pull origin &amp;lt;your-branch&amp;gt; git push origin &amp;lt;your-branch&amp;gt; </description>
    </item>
    
    <item>
      <title>Mocha &amp; Chai</title>
      <link>https://haleyjung.github.io/posts/2022/01/mocha-chai/</link>
      <pubDate>Mon, 10 Jan 2022 12:16:25 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/mocha-chai/</guid>
      <description>What are Mocha and Chai? They are JavaScript frameworks that are commonly used together for unit testing.
Mocha is a testing framework that provides functions that are executed according in a specific order, and that logs their results to the terminal window.
When you read tests written in Mocha, you’ll see regular use of the keywords describe and it. These keywords, provided by Mocha, provide structure to the tests by batching them into test suites and test cases.</description>
    </item>
    
  </channel>
</rss>
