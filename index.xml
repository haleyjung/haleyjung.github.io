<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learned</title>
    <link>https://haleyjung.github.io/</link>
    <description>Recent content on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 17 Jan 2022 18:36:49 -0500</lastBuildDate><atom:link href="https://haleyjung.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scopes &amp; Closures</title>
      <link>https://haleyjung.github.io/posts/2022/01/scopes-closures/</link>
      <pubDate>Mon, 17 Jan 2022 18:36:49 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/scopes-closures/</guid>
      <description>Lexical Scope The part of a program where a binding between a variable and value is valid (variables are only available under certain circumstances with different languages having different access rules).
 Describes the regions in my code where I can refer to a variable by name without getting access errors. Defining a function creates a new lexical scope It is a collection of key-value pairs, but is not an object - except the global context object.</description>
    </item>
    
    <item>
      <title>Chrome DevTools: Debugging JavaScript</title>
      <link>https://haleyjung.github.io/posts/2022/01/chrome-devtools-debugging-javascript/</link>
      <pubDate>Thu, 13 Jan 2022 09:33:30 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/chrome-devtools-debugging-javascript/</guid>
      <description>Step 1: Reproduce the bug Finding a series of actions that consistently reproduces a bug is always the first step to debugging.
Step 2: Get familiar with the Sources panel UI After opening the DevTools by pressing Command+Option+J on Mac, click the Sources tab. This is where we debug JavaScript. It has 3 main parts:
(1) Top left: File Navigator pane
This is where we can see and inspect every files that the page requests.</description>
    </item>
    
    <item>
      <title>Approach to Problem Solving</title>
      <link>https://haleyjung.github.io/posts/2022/01/approach-to-problem-solving/</link>
      <pubDate>Wed, 12 Jan 2022 10:26:29 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/approach-to-problem-solving/</guid>
      <description>IOCE: Input, Output, Constraints, Edge Cases  Identifying the input(s), output(s), constrains, and edge cases is important as we need to know what the inputs and expected outputs are for a problem, which also reflects my understanding of the prompt.  Strategy(s): How can I get from my input to my output?  A moment to be extra verbal and thinking out loud to brainstorm strategies After brainstorming the first strategy (write quick notes about it to remember), I can also come up with a second strategy, then identify trade-off.</description>
    </item>
    
    <item>
      <title>ESLint</title>
      <link>https://haleyjung.github.io/posts/2022/01/eslint/</link>
      <pubDate>Tue, 11 Jan 2022 23:21:14 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/eslint/</guid>
      <description>What is ESLint? &amp;ldquo;ESLint is a static code analysis tool for identifying problematic patterns found in JavaScript code. It was created by Nicholas C. Zakas in 2013. Rules in ESLint are configurable, and customized rules can be defined and loaded. ESLint covers both code quality and coding style issues.&amp;rdquo;
ESLint is written using Node.js to provide a fast runtime standard using a customizable set of rules like below.
module.exports = { parserOptions: { ecmaVersion: 5 }, rules: { /* Indentation */ &amp;#39;no-mixed-spaces-and-tabs&amp;#39;: 2, &amp;#39;indent-legacy&amp;#39;: [2, 2], /* Variable names */ &amp;#39;camelcase&amp;#39;: 2, /* Language constructs */ &amp;#39;curly&amp;#39;: 2, &amp;#39;eqeqeq&amp;#39;: [2, &amp;#39;smart&amp;#39;], &amp;#39;func-style&amp;#39;: [2, &amp;#39;expression&amp;#39;], /* Semicolons */ &amp;#39;semi&amp;#39;: 2, &amp;#39;no-extra-semi&amp;#39;: 2, /* Padding &amp;amp; additional whitespace (perferred but optional) */ &amp;#39;brace-style&amp;#39;: [2, &amp;#39;1tbs&amp;#39;, { &amp;#39;allowSingleLine&amp;#39;: true }], &amp;#39;semi-spacing&amp;#39;: 1, &amp;#39;key-spacing&amp;#39;: 1, &amp;#39;block-spacing&amp;#39;: 1, &amp;#39;comma-spacing&amp;#39;: 1, &amp;#39;no-multi-spaces&amp;#39;: 1, &amp;#39;space-before-blocks&amp;#39;: 1, &amp;#39;keyword-spacing&amp;#39;: [1, { &amp;#39;before&amp;#39;: true, &amp;#39;after&amp;#39;: true }], &amp;#39;space-infix-ops&amp;#39;: 1, /* Variable declaration */ &amp;#39;one-var&amp;#39;: [1, { &amp;#39;uninitialized&amp;#39;: &amp;#39;always&amp;#39;, &amp;#39;initialized&amp;#39;: &amp;#39;never&amp;#39; }], /* Minuta */ &amp;#39;comma-style&amp;#39;: [2, &amp;#39;last&amp;#39;], &amp;#39;quotes&amp;#39;: [1, &amp;#39;single&amp;#39;], &amp;#39;max-len&amp;#39;: [1, { &amp;#39;code&amp;#39;: 100 }], } }; Why should we use ESLint?</description>
    </item>
    
    <item>
      <title>Mocha &amp; Chai</title>
      <link>https://haleyjung.github.io/posts/2022/01/mocha-chai/</link>
      <pubDate>Mon, 10 Jan 2022 12:16:25 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/mocha-chai/</guid>
      <description>What are Mocha and Chai? They are JavaScript frameworks that are commonly used together for unit testing.
Mocha is a testing framework that provides functions that are executed according in a specific order, and that logs their results to the terminal window.
When you read tests written in Mocha, you’ll see regular use of the keywords describe and it. These keywords, provided by Mocha, provide structure to the tests by batching them into test suites and test cases.</description>
    </item>
    
    <item>
      <title>Underscore.js</title>
      <link>https://haleyjung.github.io/posts/2022/01/underscore.js/</link>
      <pubDate>Sun, 09 Jan 2022 12:53:51 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/underscore.js/</guid>
      <description>&amp;ldquo;Underscore is a JavaScript library that provides a whole mess of useful functional programming helpers without extending any built-in objects. It’s the answer to the question: &amp;lsquo;If I sit down in front of a blank HTML page, and want to start being productive immediately, what do I need?&amp;rsquo; … and the tie to go along with jQuery&amp;rsquo;s tux and Backbone&amp;rsquo;s suspenders.
You can use Underscore in either an object-oriented or a functional style, depending on your preference.</description>
    </item>
    
    <item>
      <title>Jasmine</title>
      <link>https://haleyjung.github.io/posts/2022/01/jasmine/</link>
      <pubDate>Sat, 08 Jan 2022 14:38:40 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/jasmine/</guid>
      <description>What is Jasmine? Jasmine is an open-source testing framework for JavaScript. With this tool we are able to describe the code we are testing and make assertions about our code. In the early 2000s, JsUnit was a framework for testing JavaScript applications. It was upgraded and released as Jasmine in 2010 by Pivotal Labs.
It is a Behavior Driven Development testing framework: i.e. Regardless of which JavaScript framework I use (e.</description>
    </item>
    
    <item>
      <title>Pug.js</title>
      <link>https://haleyjung.github.io/posts/2021/12/pug.js/</link>
      <pubDate>Thu, 30 Dec 2021 16:24:23 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2021/12/pug.js/</guid>
      <description>What is Pug.js?  Pug.js is a HTML templating engine, which means you can write much simpler Pug code, which Pug compiler will compile into HTML code, that browser can understand. Pug.js, as from its name is a JavaScript library. Hence, we can run it inside browser or on node.js  What to do after the installation?   Tell express that our view engine is now PUG
 app.set(&amp;ldquo;view engine&amp;rdquo;, &amp;ldquo;pug&amp;rdquo;); create a views folder inside /.</description>
    </item>
    
    <item>
      <title>Server Standards</title>
      <link>https://haleyjung.github.io/posts/2021/12/server-standards/</link>
      <pubDate>Wed, 29 Dec 2021 14:40:44 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2021/12/server-standards/</guid>
      <description>How to set up a Server Install in Terminal  npm init  creates package.json   npm i express  creates package-lock.json and node_modules folder where express folder can be found package.json now includes express as dependencies *Create .gitignore and add /node_modules   npm i @babel/core @babel/node @babel/preset-env &amp;ndash;save-dev  babeljs.io adds babel as devDependencies   touch babel.config.json  copy-paste json code: {&amp;ldquo;presets&amp;rdquo;: [&amp;quot;@babel/preset-env&amp;quot;]} Now I can use babel by enabling presets   npm i nodemon &amp;ndash;save-dev  A package that watches the files and restarts when a change has been made so I won&amp;rsquo;t have to &amp;ldquo;npm run dev&amp;rdquo; every time   Update &amp;ldquo;scripts: {}&amp;rdquo; in package.</description>
    </item>
    
    <item>
      <title>Functional Programming</title>
      <link>https://haleyjung.github.io/posts/2021/12/functional-programming/</link>
      <pubDate>Mon, 20 Dec 2021 15:12:08 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2021/12/functional-programming/</guid>
      <description>Paradigm &amp;amp; Principles JavaScript can be written in either a declarative and imperative style
Declarative (Functional Programming)  Focuses on what to execute / what is being done Abstracts control flow (how) Focuses on data flow Code is composed of expressions: a piece of code that evaluates to some value  Imperative (Object Oriented Programming)  Defines control flow Specific steps to achieve a result Code is composed of statements: a piece of code that performs some action  Paradigm: MODEL  Nowadays functional programming is more popular Some programming languages are explicitly functional All code written in these languges must follow functional principles (e.</description>
    </item>
    
  </channel>
</rss>
