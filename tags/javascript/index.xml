<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Today I Learned</title>
    <link>https://haleyjung.github.io/tags/javascript/</link>
    <description>Recent content in JavaScript on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 10 Feb 2022 00:01:54 -0500</lastBuildDate><atom:link href="https://haleyjung.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript Revision 2</title>
      <link>https://haleyjung.github.io/posts/2022/02/javascript-revision-2/</link>
      <pubDate>Thu, 10 Feb 2022 00:01:54 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/javascript-revision-2/</guid>
      <description>Term Definition     Execution context Holds information about the environment within which the current code is being executed; Calling a function creates a new execution context.   Call Stack Where execution contexts get stacked on top of each other to keep track of where we are in the program’s execution.   Scope The regions in the code where we can refer to a variable by name without getting access errors; Defining a function creates a new lexical scope.</description>
    </item>
    
    <item>
      <title>JavaScript Revision 1</title>
      <link>https://haleyjung.github.io/posts/2022/02/javascript-revision-1/</link>
      <pubDate>Wed, 09 Feb 2022 22:17:53 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/javascript-revision-1/</guid>
      <description>Term Definition     Variable A named location for storing a value.   Function The primary method through which we manipulate data in JavaScript. A function is a JavaScript procedure.   Undefined An unconfigurable, unwritable global property / A scalar variable without a scalar value assigned / A variable that has not been assigned a value yet is undefined / A function returns undefined if a value was not returned / A method or statement returns undefined if the variable that is being evaluated does not have an assigned value   Falsy False / 0 / “” / null / undefined / NaN   Null An intentional absence of any object value / Treated as Falsy for Boolean operations   NaN Not a Number: a floating-point value that does not represent a valid number; could be because we tried to combine a number with undefined   Parameter vs.</description>
    </item>
    
    <item>
      <title>High Level Overview (2)</title>
      <link>https://haleyjung.github.io/posts/2022/02/high-level-overview-2/</link>
      <pubDate>Tue, 08 Feb 2022 00:02:45 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/high-level-overview-2/</guid>
      <description>The Engine and Runtime The JavaScript engine always contains a call stack and a heap.
Call Stack JavaScript code runs in the call stack.
The call stack is where execution contexts get stacked on top of each other to keep track of where we are in the program&amp;rsquo;s execution. The execution context on top of the stack is the one that&amp;rsquo;s currently running. When it&amp;rsquo;s finished running, it will be removed from the stack, and execution will go back to the previous execution context.</description>
    </item>
    
    <item>
      <title>High Level Overview (1)</title>
      <link>https://haleyjung.github.io/posts/2022/02/high-level-overview-1/</link>
      <pubDate>Mon, 07 Feb 2022 17:21:33 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/high-level-overview-1/</guid>
      <description>High-level languages, such as JavaScript and Python, have abstractions so that we don&amp;rsquo;t need to manage resources (i.e. memory/CPU) like we do for low level languages like C.
Garbage Collection One of the powerful tools in JavaScript that takes away the memory management from developers is garbage collection. It&amp;rsquo;s an algorithm inside the JavaScript engine that automatically removes old and unused objects from the computer memory.
Interpreted / Just-in-time Compiled Language The JavaScript code we write is a human-readable abstraction over machine code, which needs to be compiled/interpreted to machine code that is understood by the computer&amp;rsquo;s processor (only zeros and ones!</description>
    </item>
    
    <item>
      <title>Node.js: Content Types</title>
      <link>https://haleyjung.github.io/posts/2022/02/node.js-content-types/</link>
      <pubDate>Tue, 01 Feb 2022 01:30:17 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/node.js-content-types/</guid>
      <description>JSON: JavaScript Object Notation JSON, or JavaScript Object Notation, is a minimal, readable format for structuring data. It is used primarily to transmit data between a server and web application, as an alternative to XML.
JSON can be parsed by a standard JavaScript function, and is parsed into a ready-to-use JavaScript object. It is thus faster and easier than XML.
To read from JSON, we need to first use fs to read in the file as text(strings) and then `JOSN.</description>
    </item>
    
    <item>
      <title>Node / Node.JS</title>
      <link>https://haleyjung.github.io/posts/2022/01/node-/-node.js/</link>
      <pubDate>Mon, 31 Jan 2022 10:35:53 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/node-/-node.js/</guid>
      <description>What is Node? Nodes in the DOM are elements from the HTML page, which are organized in a hiearchical tree-like structure consisting of parents and children. Elements such as &amp;lt;p&amp;gt;, &amp;lt;div&amp;gt;, &amp;lt;section&amp;gt; are considered as &amp;ldquo;element&amp;rdquo; nodes while comments are &amp;ldquo;comment&amp;rdquo; nodes, &amp;ldquo;text&amp;rdquo; objects and line-breaks are &amp;ldquo;text&amp;rdquo; nodes. Every HTML element is a node, but not every node is an HTML element.
The topmost node is the root node of the DOM tree, Document, which has two children: &amp;lt;!</description>
    </item>
    
    <item>
      <title>Recursion</title>
      <link>https://haleyjung.github.io/posts/2022/01/recursion/</link>
      <pubDate>Sun, 30 Jan 2022 01:12:59 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/recursion/</guid>
      <description>Definition Recursion is a technique for solving problems wherein a function makes calls to itself. By doing so, it can complete a small amount of the processing, and delegate the rest of the problem to the recursive calls.
Recursive function always come with a function inside. With 2 minimum cases inside: a base case, and a recursive case. The base case is the situation or condition where we don&amp;rsquo;t need to recursively invoke the function and is safe to assume that that function can end easily.</description>
    </item>
    
    <item>
      <title>Prototype &amp; Class Patterns</title>
      <link>https://haleyjung.github.io/posts/2022/01/prototype-class-patterns/</link>
      <pubDate>Thu, 27 Jan 2022 07:29:36 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/prototype-class-patterns/</guid>
      <description>Prototype Chains JavaScript has only one constructor, objects.
Each object has a private property which holds a link to another object called prototype.
 i.e. JavaScript objects have a link to a prototype object.
 The prototype object has a prototype of its own, and so on until the object is reached with null as its prototype (i.e. no prototype). This acts as the final link in the prototype chain.</description>
    </item>
    
    <item>
      <title>Functional Classes</title>
      <link>https://haleyjung.github.io/posts/2022/01/functional-classes/</link>
      <pubDate>Wed, 26 Jan 2022 11:20:29 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/functional-classes/</guid>
      <description>Decorator Pattern var Car = function (loc) { var obj = { loc: loc }; ob.mov = function() { // Decorator pattern: creates a new function for every function call  obj.loc++; }; }; var amy = Car(1); amy.move(); var ben = Car(9); ben.move(); Functional Class Pattern with Shared Methods &amp;hellip;or Functional-Shared Pattern
var Car = function (loc) { var obj = { loc: loc }; ob.mov = move; return obj; }; var move = function() { this.</description>
    </item>
    
    <item>
      <title>JavaScript: this</title>
      <link>https://haleyjung.github.io/posts/2022/01/javascript-this/</link>
      <pubDate>Tue, 25 Jan 2022 12:07:56 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/javascript-this/</guid>
      <description>What is this?  An identifier for values Designed to support object oriented programming  Binding When a method or constructor function is invoked, this binds to a likely-focal object, so that we can easily access that object.
this is not bound to&amp;hellip; var fn = function (a, b) { log(this); // what is this NOT bound to? };   The function object: {f}
  An instance of the function it appears within: {}</description>
    </item>
    
  </channel>
</rss>
