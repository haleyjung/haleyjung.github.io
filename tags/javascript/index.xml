<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Today I Learned</title>
    <link>https://haleyjung.github.io/tags/javascript/</link>
    <description>Recent content in JavaScript on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 31 Jan 2022 10:35:53 -0500</lastBuildDate><atom:link href="https://haleyjung.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Node.js</title>
      <link>https://haleyjung.github.io/posts/2022/01/node.js/</link>
      <pubDate>Mon, 31 Jan 2022 10:35:53 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/node.js/</guid>
      <description>What is Node? Node is an open source, cross-platform runtime system for developing applications in JavaScript. It runs JavaScript outside the browser.
Terminal Commands Installation brew install node
node -v to check the version
To generate a package.json file for the module npm init
To save module dependencies to the package.json file npm install --save modulename
Node Shell Node Shell provides a read-evaluate-print-loop (REPL) for JavaScript programs.
Launch the Node shell by running this command, node.</description>
    </item>
    
    <item>
      <title>Recursion</title>
      <link>https://haleyjung.github.io/posts/2022/01/recursion/</link>
      <pubDate>Sun, 30 Jan 2022 01:12:59 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/recursion/</guid>
      <description>Definition Recursion is a technique for solving problems wherein a function makes calls to itself. By doing so, it can complete a small amount of the processing, and delegate the rest of the problem to the recursive calls.
Recursive function always come with a function inside. With 2 minimum cases inside: a base case, and a recursive case. The base case is the situation or condition where we don&amp;rsquo;t need to recursively invoke the function and is safe to assume that that function can end easily.</description>
    </item>
    
    <item>
      <title>Prototype &amp; Class Patterns</title>
      <link>https://haleyjung.github.io/posts/2022/01/prototype-class-patterns/</link>
      <pubDate>Thu, 27 Jan 2022 07:29:36 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/prototype-class-patterns/</guid>
      <description>Prototype Chains  A mechanism for making objects that resemble other objects. Makes one object behave as if it has the same properties of another object by delegating its failed property lookups to that other object at lookup time. Prototype chains make it possible for many child objects to all reflect the properties of one parent object. We can use a prototype object to store all the shared methods and make all our instance objects delegrate to that prototype object, rather than copying all the methods references over.</description>
    </item>
    
    <item>
      <title>Functional Classes</title>
      <link>https://haleyjung.github.io/posts/2022/01/functional-classes/</link>
      <pubDate>Wed, 26 Jan 2022 11:20:29 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/functional-classes/</guid>
      <description>Decorator Pattern var Car = function (loc) { var obj = { loc: loc }; ob.mov = function() { // Decorator pattern: creates a new function for every function call  obj.loc++; }; }; var amy = Car(1); amy.move(); var ben = Car(9); ben.move(); Functional Class Pattern with Shared Methods &amp;hellip;or Functional-Shared Pattern
var Car = function (loc) { var obj = { loc: loc }; ob.mov = move; return obj; }; var move = function() { this.</description>
    </item>
    
    <item>
      <title>JavaScript: this</title>
      <link>https://haleyjung.github.io/posts/2022/01/javascript-this/</link>
      <pubDate>Tue, 25 Jan 2022 12:07:56 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/javascript-this/</guid>
      <description>What is this?  An identifier for values Designed to support object oriented programming  Binding When a method or constructor function is invoked, this binds to a likely-focal object, so that we can easily access that object.
this is not bound to&amp;hellip; var fn = function (a, b) { log(this); // what is this NOT bound to? };   The function object: {f}
  An instance of the function it appears within: {}</description>
    </item>
    
    <item>
      <title>Higher Order Functions</title>
      <link>https://haleyjung.github.io/posts/2021/12/higher-order-functions/</link>
      <pubDate>Fri, 10 Dec 2021 20:32:49 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2021/12/higher-order-functions/</guid>
      <description>JavaScript will always pass PRIMITIVE types &amp;lsquo;by value&amp;rsquo; JavaScript will always pass NON-PRIMITIVE types &amp;lsquo;by reference&amp;rsquo;  First Class Functions (Function Literal) In JavaScript functions are first-class, meaning anything that can be done to other types can be done to functions. This means that the language supports constructing new functions during the execution of a program, storing them in data structures, passing them as arguments to other functions, and returning them as the values of other functions.</description>
    </item>
    
  </channel>
</rss>
