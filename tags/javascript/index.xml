<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Today I Learned</title>
    <link>https://haleyjung.github.io/tags/javascript/</link>
    <description>Recent content in JavaScript on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 07 Feb 2022 17:21:33 -0500</lastBuildDate><atom:link href="https://haleyjung.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>High Level Overview (1)</title>
      <link>https://haleyjung.github.io/posts/2022/02/high-level-overview-1/</link>
      <pubDate>Mon, 07 Feb 2022 17:21:33 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/high-level-overview-1/</guid>
      <description>High-level languages, such as JavaScript and Python, have abstractions so that we don&amp;rsquo;t need to manage resources (i.e. memory/CPU) like we do for low level languages like C.
Garbage Collection One of the powerful tools in JavaScript that takes away the memory management from developers is garbage collection. It&amp;rsquo;s an algorithm inside the JavaScript engine that automatically removes old and unused objects from the computer memory.
Interpreted / Just-in-time Compiled Language The JavaScript code we write is a ** human-readable abstraction over machine code**, which needs to be compiled/interpreted to machine code that is understood by the computer&amp;rsquo;s processor (only zeros and ones!</description>
    </item>
    
    <item>
      <title>Node.js: Content Types</title>
      <link>https://haleyjung.github.io/posts/2022/02/node.js-content-types/</link>
      <pubDate>Tue, 01 Feb 2022 01:30:17 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/node.js-content-types/</guid>
      <description>JSON: JavaScript Object Notation JSON, or JavaScript Object Notation, is a minimal, readable format for structuring data. It is used primarily to transmit data between a server and web application, as an alternative to XML.
JSON can be parsed by a standard JavaScript function, and is parsed into a ready-to-use JavaScript object. It is thus faster and easier than XML.
To read from JSON, we need to first use fs to read in the file as text(strings) and then `JOSN.</description>
    </item>
    
    <item>
      <title>Node / Node.JS</title>
      <link>https://haleyjung.github.io/posts/2022/01/node-/-node.js/</link>
      <pubDate>Mon, 31 Jan 2022 10:35:53 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/node-/-node.js/</guid>
      <description>What is Node? Nodes in the DOM are elements from the HTML page, which are organized in a hiearchical tree-like structure consisting of parents and children. Elements such as &amp;lt;p&amp;gt;, &amp;lt;div&amp;gt;, &amp;lt;section&amp;gt; are considered as &amp;ldquo;element&amp;rdquo; nodes while comments are &amp;ldquo;comment&amp;rdquo; nodes, &amp;ldquo;text&amp;rdquo; objects and line-breaks are &amp;ldquo;text&amp;rdquo; nodes. Every HTML element is a node, but not every node is an HTML element.
The topmost node is the root node of the DOM tree, Document, which has two children: &amp;lt;!</description>
    </item>
    
    <item>
      <title>Recursion</title>
      <link>https://haleyjung.github.io/posts/2022/01/recursion/</link>
      <pubDate>Sun, 30 Jan 2022 01:12:59 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/recursion/</guid>
      <description>Definition Recursion is a technique for solving problems wherein a function makes calls to itself. By doing so, it can complete a small amount of the processing, and delegate the rest of the problem to the recursive calls.
Recursive function always come with a function inside. With 2 minimum cases inside: a base case, and a recursive case. The base case is the situation or condition where we don&amp;rsquo;t need to recursively invoke the function and is safe to assume that that function can end easily.</description>
    </item>
    
    <item>
      <title>Prototype &amp; Class Patterns</title>
      <link>https://haleyjung.github.io/posts/2022/01/prototype-class-patterns/</link>
      <pubDate>Thu, 27 Jan 2022 07:29:36 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/prototype-class-patterns/</guid>
      <description>Prototype Chains  A mechanism for making objects that resemble other objects. Makes one object behave as if it has the same properties of another object by delegating its failed property lookups to that other object at lookup time. Prototype chains make it possible for many child objects to all reflect the properties of one parent object. We can use a prototype object to store all the shared methods and make all our instance objects delegrate to that prototype object, rather than copying all the methods references over.</description>
    </item>
    
    <item>
      <title>Functional Classes</title>
      <link>https://haleyjung.github.io/posts/2022/01/functional-classes/</link>
      <pubDate>Wed, 26 Jan 2022 11:20:29 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/functional-classes/</guid>
      <description>Decorator Pattern var Car = function (loc) { var obj = { loc: loc }; ob.mov = function() { // Decorator pattern: creates a new function for every function call  obj.loc++; }; }; var amy = Car(1); amy.move(); var ben = Car(9); ben.move(); Functional Class Pattern with Shared Methods &amp;hellip;or Functional-Shared Pattern
var Car = function (loc) { var obj = { loc: loc }; ob.mov = move; return obj; }; var move = function() { this.</description>
    </item>
    
    <item>
      <title>JavaScript: this</title>
      <link>https://haleyjung.github.io/posts/2022/01/javascript-this/</link>
      <pubDate>Tue, 25 Jan 2022 12:07:56 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/javascript-this/</guid>
      <description>What is this?  An identifier for values Designed to support object oriented programming  Binding When a method or constructor function is invoked, this binds to a likely-focal object, so that we can easily access that object.
this is not bound to&amp;hellip; var fn = function (a, b) { log(this); // what is this NOT bound to? };   The function object: {f}
  An instance of the function it appears within: {}</description>
    </item>
    
    <item>
      <title>IIFE &amp; Scopes</title>
      <link>https://haleyjung.github.io/posts/2022/01/iife-scopes/</link>
      <pubDate>Sat, 22 Jan 2022 11:10:24 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/iife-scopes/</guid>
      <description>Function Expression vs. Function Declaration The function name can be omitted in function expressions to create anonymous functions while function declarations (statements) require names.
A function expression can be used as an IIFE (Immediately Invoked Function Expression).
//Function Expression let variableName = function() { statements; }; // -&amp;gt; ends with a semicolon because it&amp;#39;s an assignment statement; not part of the function syntax  //Function Declaration function name([param[, param,[..., param]]]) { statements; } Definition of IIFE IIFE, also known as Self-Executing Anonymous Function, is a JavaScript function that runs as soon as it is defined.</description>
    </item>
    
    <item>
      <title>Function Call vs Function Invocation</title>
      <link>https://haleyjung.github.io/posts/2022/01/function-call-vs-function-invocation/</link>
      <pubDate>Fri, 21 Jan 2022 10:44:05 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/function-call-vs-function-invocation/</guid>
      <description>Function Call  Directly telling the function to run. The combined process of fully applying the function then invoking it, usually with the added semantic that the code will wait for a return value.  Function Invocation  i.e. Function got executed. Indirectly refers to the calling statement. The process required to schedule the function with its fully bound arguments for execution. Includes pushing arguments onto the stack and transferring the PC to the new address, placing messages/objects/functions/thunks on a queue for later execution or various other RPC systems.</description>
    </item>
    
    <item>
      <title>Primitive and Non-Primitive Data Types</title>
      <link>https://haleyjung.github.io/posts/2022/01/primitive-and-non-primitive-data-types/</link>
      <pubDate>Wed, 19 Jan 2022 12:53:10 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/primitive-and-non-primitive-data-types/</guid>
      <description>Definitions Data Type There is a variety of data types, such as number, boolean, string, null, undefined, etc.
Primitive Data Type  Numbers Strings Booleans undefined null  Primitives are stored by value.
Every time a new variable is declared using a primitive data type, a new address in memory is created for that value.
let a = 1; let b = a;  a has value of 1, which is a Number, a Primitive data type.</description>
    </item>
    
  </channel>
</rss>
