<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>untagged on Today I Learned</title>
    <link>https://haleyjung.github.io/tags/untagged/</link>
    <description>Recent content in untagged on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 21 Jan 2022 10:44:05 -0500</lastBuildDate><atom:link href="https://haleyjung.github.io/tags/untagged/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Function Call vs Function Invocation</title>
      <link>https://haleyjung.github.io/posts/2022/01/function-call-vs-function-invocation/</link>
      <pubDate>Fri, 21 Jan 2022 10:44:05 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/function-call-vs-function-invocation/</guid>
      <description>Function Call  Directly telling the function to run. The combined process of fully applying the function then invoking it, usually with the added semantic that the code will wait for a return value.  Function Invocation  i.e. Function got executed. Indirectly refers to the calling statement. The process required to schedule the function with its fully bound arguments for execution. Includes pushing arguments onto the stack and transferring the PC to the new address, placing messages/objects/functions/thunks on a queue for later execution or various other RPC systems.</description>
    </item>
    
  </channel>
</rss>
