<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Development on Today I Learned</title>
    <link>https://haleyjung.github.io/tags/web-development/</link>
    <description>Recent content in Web Development on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 09 Mar 2022 00:40:48 -0500</lastBuildDate><atom:link href="https://haleyjung.github.io/tags/web-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Redux</title>
      <link>https://haleyjung.github.io/posts/2022/03/understanding-redux/</link>
      <pubDate>Wed, 09 Mar 2022 00:40:48 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/understanding-redux/</guid>
      <description>Redux: Predictable State Container for JavaScript apps
 I&amp;rsquo;ve just finished a two-day sprint using React, and will be moving onto using Redux with React. So here are some fundamentals of Redux before the next sprint.
What is it?  Predictable State Container for JavaScript apps A JS library for managing global application state  Has packages including: React-Redux, Redux Toolkit, and Redux DevTools Extension   Uses a one-way data flow app structure Reduces server calls: only made when state change requires the server call  Key Points  Predictable  Helps applications to behave consistently Runs in different environments: client, server, native   Centralized  States can be used from any components (instead of lifting state to parent components) const rootReducer = Redux.</description>
    </item>
    
    <item>
      <title>Notes from a ReactJS Sprint</title>
      <link>https://haleyjung.github.io/posts/2022/03/notes-from-a-reactjs-sprint/</link>
      <pubDate>Tue, 08 Mar 2022 01:10:37 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/notes-from-a-reactjs-sprint/</guid>
      <description>Setting up Babel to watch all changes and compile automatically  In package.json’s scripts, create “start” and add the following including watch:  npx babel . --out-dir=compiled --presets=@babel/preset-react --ignore=node_modules,compiled --source-maps=inline --watch npx: allows local dependencies to run as commands babel: hey npx, search for and run the Babel command-line utility .: hey Babel, transpile all JS files in the current working directory --out-dir: hey again Babel, put the transpiled files into the compiled/ folder --presets hey hey Babel, make this kind of transformations.</description>
    </item>
    
    <item>
      <title>Semantic Versioning</title>
      <link>https://haleyjung.github.io/posts/2022/02/semantic-versioning/</link>
      <pubDate>Sat, 05 Feb 2022 10:48:06 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/semantic-versioning/</guid>
      <description>Semantic Versioning (SemVer) A versioning system for software releases, such as new plugins, addons, libraries, and extensions.
It consists of 3 components in the format of X.Y.Z
X: Major Version  When the major version number is increased, the minor and patch version numbers are reset to zero. Increasing the major number breaks the existing API.  Y: Minor Version  Minor version indicates the release of new functionality in the system (when implementing new features in a backwards-incompatible way).</description>
    </item>
    
    <item>
      <title>Systems</title>
      <link>https://haleyjung.github.io/posts/2022/02/systems/</link>
      <pubDate>Fri, 04 Feb 2022 00:31:44 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/systems/</guid>
      <description>Webpage Rendering  HTML is received from the server and processed into the DOM. The styles are loaded and parsed into the CSSOM. The render tree is created using the DOM and CSSOM. The browser creates a layout for each render tree element with its individual coordinates using the flow method, which requires just one pass to layout all the elements, compared to the tables method that requires more than one pass.</description>
    </item>
    
    <item>
      <title>Client-Side Validation</title>
      <link>https://haleyjung.github.io/posts/2022/02/client-side-validation/</link>
      <pubDate>Thu, 03 Feb 2022 13:50:26 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/client-side-validation/</guid>
      <description>What is client-side validation? It refers to providing feedbacks to users so that they can give us the correct information.
e.g. &amp;ldquo;your password must be at least 8 characters&amp;rdquo; or &amp;ldquo;this field is required.&amp;rdquo;
HTML5 Form Validation Form validaiton is a large part of project-specific, dependent on business logic.
Input Types &amp;lt;form&amp;gt; &amp;lt;label&amp;gt;Name (required)&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Email (required)&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;email&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Age (required, must be older than 13)&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;age&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Number of siblings&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;siblings&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Number of rooms in your house&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;rooms&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Blog url&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;blog&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Twitter Username&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;twitter&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; HTML5 Constraint API HTML5 constraint validation API helps developers avoid use of JavaScript for simple validations.</description>
    </item>
    
    <item>
      <title>Local Storage</title>
      <link>https://haleyjung.github.io/posts/2022/02/local-storage/</link>
      <pubDate>Wed, 02 Feb 2022 01:45:40 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/local-storage/</guid>
      <description>Definition of Local Storage  a browser API that allows a web application to persist its state inside a user&amp;rsquo;s web browser can be used to persist information retrieved from sources like user events, HTTP responses, and calculated results only persists strings has no expiration time until explicitly cleared improves a web application&amp;rsquo;s user experience more data can be stored in localStorage than in cookies  Data model: the software representation of information Data persistence: store data in the application so that when a user comes back to the site, they can pick up from where they left off</description>
    </item>
    
    <item>
      <title>DOM</title>
      <link>https://haleyjung.github.io/posts/2022/01/dom/</link>
      <pubDate>Thu, 20 Jan 2022 10:50:59 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/dom/</guid>
      <description>Definition  DOM: Document Object Model An object-based representation of the source HTML document An interface to web pages; an API to the page  Functions  Allows browsers to determine what to render in the viewport Allows JavaScript to manipulate the page&amp;rsquo;s content, structure, and styles  DOM vs. HTML DOM is not HTML. It is an interface to valid HTML documents. They differ from one another for a number of reasons:</description>
    </item>
    
    <item>
      <title>CDN: Content Delivery Networks</title>
      <link>https://haleyjung.github.io/posts/2022/01/cdn-content-delivery-networks/</link>
      <pubDate>Tue, 18 Jan 2022 11:27:23 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/cdn-content-delivery-networks/</guid>
      <description>Definition  CDN is a group of geographically distributed servers that speed up the delivery of web content by caching contents in proxy servers near to the user&amp;rsquo;s physical location. Leads to a faster and high performance of activities such as watching a movie, downloading a software, checking a bank balance, posting on social media, and making a transaction.  Purpose  Users experience a consistent, faster, and high performance web application.</description>
    </item>
    
    <item>
      <title>APIs &amp; jQuery</title>
      <link>https://haleyjung.github.io/posts/2022/01/apis-jquery/</link>
      <pubDate>Sat, 15 Jan 2022 12:40:33 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/01/apis-jquery/</guid>
      <description>APIs  Manipulate (create new or update existing) HTML elements on the page Create event-based user interactivity Embed rich media in documents with HTML &amp;lt;audio&amp;gt; and &amp;lt;video&amp;gt; elements Fetch data from a server Create visualizations by:  Creating SVG (Scalable Vector Graphics) Drawing on HTML canvas elements Rendering high-performance interactive 2D and 3D graphics with WebGL    Define jQuery  A JavaScript library that improves the native DOM API Portable across browsers Has a concise syntax Makes manipulating and adding interactivity to HTML documents easier  Using jQuery Method 1: Download the jQuery library and install it locally in the HTML code</description>
    </item>
    
    <item>
      <title>Pug.js</title>
      <link>https://haleyjung.github.io/posts/2021/12/pug.js/</link>
      <pubDate>Thu, 30 Dec 2021 16:24:23 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2021/12/pug.js/</guid>
      <description>What is Pug.js?  Pug.js is a HTML templating engine, which means you can write much simpler Pug code, which Pug compiler will compile into HTML code, that browser can understand. Pug.js, as from its name is a JavaScript library. Hence, we can run it inside browser or on node.js  What to do after the installation?   Tell express that our view engine is now PUG
 app.set(&amp;ldquo;view engine&amp;rdquo;, &amp;ldquo;pug&amp;rdquo;); create a views folder inside /.</description>
    </item>
    
  </channel>
</rss>
