<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on Today I Learned</title>
    <link>https://haleyjung.github.io/tags/algorithms/</link>
    <description>Recent content in Algorithms on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 02 Mar 2022 00:16:04 -0500</lastBuildDate><atom:link href="https://haleyjung.github.io/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Backtracking Algorithm: N Queen</title>
      <link>https://haleyjung.github.io/posts/2022/03/backtracking-algorithm-n-queen/</link>
      <pubDate>Wed, 02 Mar 2022 00:16:04 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/backtracking-algorithm-n-queen/</guid>
      <description>Prompt The eight queens puzzle is the problem of placing eight chess queens on an 8×8 chessboard so that no two queens threaten each other. Thus, a solution requires that no two queens share the same row, column, or diagonal. The eight queens puzzle is an example of the more general n queens problem of placing n non-attacking queens on an n×n chessboard, for which solutions exist for all natural numbers n with the exception of n=2 and n=3.</description>
    </item>
    
    <item>
      <title>Backtracking Algorithm: Knight&#39;s Tour</title>
      <link>https://haleyjung.github.io/posts/2022/03/backtracking-algorithm-knights-tour/</link>
      <pubDate>Tue, 01 Mar 2022 22:40:46 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/03/backtracking-algorithm-knights-tour/</guid>
      <description>What is a backtracking algorithm? An algorithmic-technique for solving problems recursively by trying to build a solution incrementally one piece at a time, removing solutions that fail to satisfy the constraints of the problem at any point of time (the time elapsed till reachign any level of the search tree).
It works incrementally.
Think of SudoKu!  To solve SudoKu, we fill digits one by one. When the current digit we added doesn&amp;rsquo;t lead to a solution, we remove it = backtrack We try another digit.</description>
    </item>
    
    <item>
      <title>LeetCode: Shifting Letters - medium</title>
      <link>https://haleyjung.github.io/posts/2022/02/leetcode-shifting-letters-medium/</link>
      <pubDate>Thu, 24 Feb 2022 07:06:01 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/leetcode-shifting-letters-medium/</guid>
      <description>Prompt You are given a string s of lowercase English letters and an integer array shifts of the same length.
Call the shift() of a letter, the next letter in the alphabet, (wrapping around so that &amp;lsquo;z&amp;rsquo; becomes &amp;lsquo;a&amp;rsquo;).
For example, shift(&#39;a&#39;) = &#39;b&#39;, shift(&#39;t&#39;) = &#39;u&#39;, and shift(&#39;z&#39;) = &#39;a&#39;. Now for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times.</description>
    </item>
    
    <item>
      <title>LeetCode: Add Two Numbers - medium</title>
      <link>https://haleyjung.github.io/posts/2022/02/leetcode-add-two-numbers-medium/</link>
      <pubDate>Sat, 12 Feb 2022 10:46:58 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/leetcode-add-two-numbers-medium/</guid>
      <description>Prompt You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example 1: Input: l1 = [2,4,3], l2 = [5,6,4] Output: [7,0,8] Explanation: 342 + 465 = 807.</description>
    </item>
    
    <item>
      <title>LeetCode: Two Sums - easy</title>
      <link>https://haleyjung.github.io/posts/2022/02/leetcode-two-sums-easy/</link>
      <pubDate>Thu, 10 Feb 2022 11:35:01 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2022/02/leetcode-two-sums-easy/</guid>
      <description>Prompt Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.
Example: Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</description>
    </item>
    
    <item>
      <title>Recommendation Engine: Netflix&#39;s Recommendation Algorithms</title>
      <link>https://haleyjung.github.io/posts/2021/11/recommendation-engine-netflixs-recommendation-algorithms/</link>
      <pubDate>Fri, 26 Nov 2021 14:06:25 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2021/11/recommendation-engine-netflixs-recommendation-algorithms/</guid>
      <description>Netflix&amp;rsquo;s Recommendation Algorithms Overview  Recommendation algorithms are at the core of the Netflix product. They provide our members with personalized suggestions to reduce the amount of time and frustration to find something great content to watch. Because of the importance of our recommendations, we continually seek to improve them by advancing the state-of-the-art in the field. We do this by using the data about what content our members watch and enjoy along with how they interact with our service to get better at figuring out what the next great movie or TV show for them will be.</description>
    </item>
    
    <item>
      <title>Recommendation Engine: Measurements and Challenges</title>
      <link>https://haleyjung.github.io/posts/2021/11/recommendation-engine-measurements-and-challenges/</link>
      <pubDate>Fri, 26 Nov 2021 13:38:29 -0500</pubDate>
      
      <guid>https://haleyjung.github.io/posts/2021/11/recommendation-engine-measurements-and-challenges/</guid>
      <description>In this post, I&amp;rsquo;ll dive further into the measurements and challenges of a recommendation engine. This post uses references from:
F.O. Isinkaye et al., &amp;ldquo;Recommendation systems: Principles, methods and evaluation,&amp;rdquo; Egyptian Informatics Journal, Cairo University, 13 March 2015.
&amp;ldquo;The Netflix Recommender System: Algorithms, Business Value, and Innovation&amp;rdquo;, ACM Transactions on Management Information Systems, Vol. 6, No. 4, Article 13, December 2015.
To note, I&amp;rsquo;ll be continuously adding more of the latest articles as references.</description>
    </item>
    
  </channel>
</rss>
